<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql数据库 </title>
      <link href="/mysql-shu-ju-ku.html"/>
      <url>/mysql-shu-ju-ku.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、-mysql数据库"><a href="#一、-mysql数据库" class="headerlink" title="一、 mysql数据库"></a>一、 mysql数据库</h2><blockquote><p>补充知识点</p><p>1、pymysql.escape_string()转义 </p><p>2、insert ‘1256’3’ 处理方法：‘1256’‘3’   在中间再加一个‘让它转义就可以了，方法挺简单的</p></blockquote><h4 id="1-数据库的基本使用"><a href="#1-数据库的基本使用" class="headerlink" title="1 数据库的基本使用"></a>1 数据库的基本使用</h4><h5 id="1-1-数据库的介绍"><a href="#1-1-数据库的介绍" class="headerlink" title="1.1 数据库的介绍"></a>1.1 数据库的介绍</h5><ul><li><p>定义</p><p><strong>数据库</strong>，简而言之可视为<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E5%8C%96" target="_blank" rel="noopener">电子化</a>的<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E6%9F%9C" target="_blank" rel="noopener">文件柜</a>——存储电子<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">文件</a>的处所，用户可以对文件中的数据进行新增、截取、更新、删除等操作。</p><p>所谓“数据库”是以<strong>一定方式</strong>储存在一起、能与多个用户<a href="https://baike.baidu.com/item/%E5%85%B1%E4%BA%AB" target="_blank" rel="noopener">共享</a>、具有尽可能小的<a href="https://baike.baidu.com/item/%E5%86%97%E4%BD%99%E5%BA%A6" target="_blank" rel="noopener">冗余度</a>、与应用程序彼此独立的数据<a href="https://baike.baidu.com/item/%E9%9B%86%E5%90%88" target="_blank" rel="noopener">集合</a>。</p><p>SQL    结构化查询语言（Structured Query Language）</p><h3 id="数据库就是一种特殊的文件，其中存储着需要的数据"><a href="#数据库就是一种特殊的文件，其中存储着需要的数据" class="headerlink" title="数据库就是一种特殊的文件，其中存储着需要的数据"></a>数据库就是一种特殊的文件，其中存储着需要的数据</h3></li><li><p>数据行(记录)</p></li><li><p>数据列(字段)</p></li><li><p>数据表(数据行的集合)</p></li><li><p>数据库(数据表的集合)</p></li></ul><h5 id="1-2-RDBMS-介绍"><a href="#1-2-RDBMS-介绍" class="headerlink" title="1.2 RDBMS 介绍"></a>1.2 RDBMS 介绍</h5><ul><li><p>模型</p><ul><li>C/S  客户服务器模型</li><li>B/S 浏览器服务器模型（browser）</li></ul></li><li><p>RDBMS</p><blockquote><p>Relational Database Management System  关系型数据库管理系统</p><p>通过表来表示关系型</p></blockquote><ul><li><p>当前主要使用两种类型的数据库：关系型数据库、非关系型数据库，本部分主要讨论关系型数据库，对于非关系型数据库会在后面学习</p></li><li><p>所谓的关系型数据库RDBMS，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据</p></li><li><p>查看数据库排名:<a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">https://db-engines.com/en/ranking</a></p></li><li><p>关系型数据库的主要产品（软件）：</p><ul><li><p>oracle：在以前的大型项目中使用,银行,电信等项目</p></li><li><p>mysql：web时代使用最广泛的关系型数据库</p></li><li><p>ms sql server：在微软的项目中使用</p></li><li><p>sqlite：轻量级数据库，主要应用在移动平台（ipython3 使用记录在存在这里）</p><p>它不需要搭建服务器，内建型数据库</p></li></ul></li></ul></li><li><p>RDBMS与数据库的关系</p><ul><li>一套软件叫mysql有两个概念，一个关系型数据库的软件，它可以生成数据库，另一个是mysql数据库</li><li>互联网通信用的是HTTP协议，同样，数据库，客户端与数据库也存在一种协议，叫sql语句。</li></ul></li></ul><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，后来被Sun公司收购，Sun公司后来又被Oracle公司收购，目前属于Oracle旗下产品 </p><p><strong>特点</strong></p><ul><li>使用C和C++编写，并使用了多种编译器进行测试，保证源代码的可移植性</li><li>支持多种操作系统，如Linux、Windows、AIX、FreeBSD、HP-UX、MacOS、NovellNetware、OpenBSD、OS/2 Wrap、Solaris等</li><li>为多种编程语言提供了API，如C、C++、Python、Java、Perl、PHP、Eiffel、Ruby等</li><li>支持多线程，充分利用CPU资源</li><li>优化的SQL查询算法，有效地提高查询速度</li><li>提供多语言支持，常见的编码如GB2312、BIG5、UTF8</li><li>提供TCP/IP、ODBC和JDBC等多种数据库连接途径</li><li>提供用于管理、检查、优化数据库操作的管理工具</li><li>大型的数据库。可以处理拥有上千万条记录的大型数据库</li><li>支持多种存储引擎</li><li>MySQL 软件采用了双授权政策，它分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择MySQL作为网站数据库</li><li>MySQL使用标准的SQL数据语言形式</li><li>Mysql是可以定制的，采用了GPL协议，你可以修改源码来开发自己的Mysql系统</li><li>在线DDL更改功能</li><li>复制全局事务标识</li><li>复制无崩溃从机</li><li>复制多线程从机</li></ul><blockquote><p>开源 免费 不要钱 使用范围广,跨平台支持性好,提供了多种语言调用的 API</p><p>是学习数据库开发的首选</p></blockquote><h5 id="1-3-服务器、客户端安装及使用"><a href="#1-3-服务器、客户端安装及使用" class="headerlink" title="1.3 服务器、客户端安装及使用"></a>1.3 服务器、客户端安装及使用</h5><ol><li><p><strong>服务器的安装</strong></p><ul><li><p>安装服务器端：在终端中输入如下命令，回车后，然后按照提示输入</p><pre class="line-numbers language-mysql"><code class="language-mysql">sudo apt-get install mysql-server安装目录/usr/sbin/mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>当前使用的ubuntu镜像中已经安装好了mysql服务器端，无需再安装，并且设置成了开机自启动</p></li><li><p>服务器用于接收客户端的请求、执行sql语句、管理数据库</p></li><li><p>服务器端一般以服务方式管理，名称为mysql</p></li><li><p>启动服务</p><pre class="line-numbers language-mysql"><code class="language-mysql">sudo service mysql start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看进程中是否存在mysql服务</p><pre class="line-numbers language-mysql"><code class="language-mysql">ps ajx|grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>停止服务</p><pre class="line-numbers language-mysql"><code class="language-mysql">sudo service mysql stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启服务</p><pre class="line-numbers language-mysql"><code class="language-mysql">sudo service mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>配置</strong></p><ul><li><p>配置文件目录为/etc/mysql/mysql.cnf，<code>以cnf为结尾的文件是配置文件``/etc目录 　　包含很多文件.许多网络配置文件也在/etc 中.</code>  </p></li><li><p>进入conf.d目录，打开mysql.cnf，发现并没有配置</p></li><li><p>进入mysql.conf.d目录，打开mysql.cnf，可以看到配置项</p></li><li><p>主要配置项如下</p><pre><code>bind-address表示服务器绑定的ip，默认为127.0.0.1port表示端口，默认为3306datadir表示数据库目录，默认为/var/lib/mysqlgeneral_log_file表示普通日志，默认为/var/log/mysql/mysql.loglog_error表示错误日志，默认为/var/log/mysql/error.log</code></pre><ul><li><p>补增：</p><pre><code>首先注意usr 指 Unix System Resource，而不是User 然后通常： /usr/bin下面的都是系统预装的可执行程序，会随着系统升级而改变。 /usr/local/bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。 </code></pre><pre><code>etc:不是什么缩写,是and so on的意思 来源于 法语的 et cetera 翻译成中文就是 等等 的意思.这下面放的都是一堆零零碎碎的东西, 就叫etc, 这其实是个历史遗留.这个目录一般用来存放程序所需的整个文件系统的配置文件.</code></pre></li></ul></li></ul></li></ol><ol start="3"><li><p><strong>客户端</strong></p><p>客户端为开发人员与dba使用，通过socket方式与服务端通信，常用的有navicat、命令行mysql0</p></li></ol><p>图形化界面客户端navicat</p><ul><li>可以到<a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">Navicat官网</a>下载</li><li>将压缩文件拷贝到ubuntu虚拟机中，放到桌面上，解压</li></ul><pre><code>tar zxvf navicat112_mysql_cs_x64.tar.gz</code></pre><ul><li>进入解压的目录，运行如下命令</li></ul><pre><code>./start_navicat</code></pre><ul><li>问题一：中文乱码</li><li>解决：打开start_navicat文件</li></ul><pre><code>将export LANG=&quot;en_US.UTF-8&quot;改为export LANG=&quot;zh_CN.UTF-8&quot;</code></pre><ul><li>问题二：试用期</li><li>解决：删除用户目录下的.navicat64目录</li></ul><pre><code>cd ~rm -r .navicat64</code></pre><ul><li><p>命令行客户端</p><ul><li>在终端运行如下命令，按提示填写信息</li></ul><pre><code>sudo apt-get install mysql-client</code></pre><ul><li>当前使用的ubuntu镜像中已经安装好了mysql客户端，无需再安装</li><li>详细连接的命令可以查看帮助文档</li></ul><pre><code>mysql --help</code></pre><ul><li>最基本的连接命令如下，输入后回车</li></ul><pre><code>mysql -uroot -pmysql</code></pre></li></ul><ul><li><p>按ctrl+d或输入如下命令退出</p><pre><code>quit 或者 exit</code></pre></li></ul><h5 id="1-4-数据完整性"><a href="#1-4-数据完整性" class="headerlink" title="1.4 数据完整性"></a>1.4 数据完整性</h5><ul><li><p>一个数据库就是一个完整的业务单元，可以包含多张表，数据被存储在表中</p></li><li><p>在表中为了更加准确的存储数据，保证数据的正确有效，可以在创建表的时候，为表添加一些强制性的验证，包括数据字段的类型、约束</p><h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h4><ul><li>可以通过查看帮助文档查阅所有支持的数据类型</li><li>使用数据类型的原则是：够用就行，尽量使用取值范围小的，而不用大的，这样可以更多的节省存储空间</li><li>常用数据类型如下：<ul><li>整数：int，bit</li><li>小数：decimal</li><li>字符串：varchar,char</li><li>日期时间: date, time, datetime</li><li>枚举类型(enum)</li></ul></li><li>特别说明的类型如下： <ul><li>decimal表示浮点数，如decimal(5,2)表示共存5位数，小数占2位</li><li>char表示固定长度的字符串，如char(3)，如果填充’ab’时会补一个空格为<code>&#39;ab &#39;</code></li><li>varchar表示可变长度的字符串，如varchar(3)，填充’ab’时就会存储’ab’</li><li>字符串text表示存储大文本，当字符大于4000时推荐使用</li><li>对于图片、音频、视频等文件，不存储在数据库中，而是上传到某个服务器上，然后在表中存储这个文件的保存路径</li></ul></li><li>更全的数据类型可以参考<a href="http://blog.csdn.net/anxpp/article/details/51284106" target="_blank" rel="noopener">http://blog.csdn.net/anxpp/article/details/51284106</a></li></ul></li></ul><h4 id="2-约束"><a href="#2-约束" class="headerlink" title="2. 约束"></a>2. 约束</h4><ul><li>主键primary key：物理上存储的顺序</li><li>非空not null：此字段不允许填写空值</li><li>惟一unique：此字段的值不允许重复</li><li>默认default：当不填写此值时会使用默认值，如果填写时以填写为准</li><li>外键foreign key：对关系字段进行约束，当为关系字段填写值时，会到关联的表中查询此值是否存在，如果存在则填写成功，如果不存在则填写失败并抛出异常</li><li>说明：虽然外键约束可以保证数据的有效性，但是在进行数据的crud（增加、修改、删除、查询）时，都会降低数据库的性能，所以不推荐使用，那么数据的有效性怎么保证呢？答：可以在逻辑层进行控制</li><li>自增长auto_increment</li></ul><blockquote><p>数值类型(常用)</p></blockquote><table><thead><tr><th>类型</th><th>字节大小</th><th>有符号范围(Signed)</th><th>无符号范围(Unsigned)</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128 ~ 127</td><td>0 ~ 255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768 ~ 32767</td><td>0 ~ 65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608 ~ 8388607</td><td>0 ~ 16777215</td></tr><tr><td>INT/INTEGER</td><td>4</td><td>-2147483648 ~2147483647</td><td>0 ~ 4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808 ~ 9223372036854775807</td><td>0 ~ 18446744073709551615</td></tr><tr><td>decimal</td><td></td><td>小数</td><td></td></tr></tbody></table><blockquote><p>字符串</p></blockquote><table><thead><tr><th>类型</th><th>字节大小</th><th>示例</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255</td><td>类型:char(3) 输入 ‘ab’, 实际存储为’ab ‘, 输入’abcd’ 实际存储为 ‘abc’</td></tr><tr><td>VARCHAR</td><td>0-255</td><td>类型:varchar(3) 输 ‘ab’,实际存储为’ab’, 输入’abcd’,实际存储为’abc’</td></tr><tr><td>TEXT</td><td>0-65535</td><td>大文本</td></tr></tbody></table><blockquote><p>日期时间类型</p></blockquote><table><thead><tr><th>类型</th><th>字节大小</th><th>示例</th></tr></thead><tbody><tr><td>DATE</td><td>4</td><td>‘2020-01-01’</td></tr><tr><td>TIME</td><td>3</td><td>‘12:29:59’</td></tr><tr><td>DATETIME</td><td>8</td><td>‘2020-01-01 12:29:59’</td></tr><tr><td>YEAR</td><td>1</td><td>‘2017’</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>‘1970-01-01 00:00:01’ UTC ~ ‘2038-01-01 00:00:01’ UTC</td></tr></tbody></table><h5 id="1-5-数据库的操作"><a href="#1-5-数据库的操作" class="headerlink" title="1.5 数据库的操作"></a>1.5 数据库的操作</h5><ul><li>打开终端，运行命令</li></ul><pre><code>mysql -uroot -pmysql -uroot -pmysql(后面加密码)回车后输入密码，当前设置的密码为mysql</code></pre><ul><li>退出命令</li></ul><pre class="line-numbers language-python"><code class="language-python">exitquitctrl <span class="token operator">+</span> d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看当前有哪些数据库</li></ul><pre class="line-numbers language-python"><code class="language-python">show databases<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#不区分大小写，支持换行写 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>登录成功后，输入如下命令查看效果</li></ul><pre class="line-numbers language-python"><code class="language-python">查看版本：select version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">#记得带括号</span>显示当前时间：select now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>创建数据库</li></ul><pre class="line-numbers language-python"><code class="language-python">create database python<span class="token number">-01</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true"># 创建的数据库编码方式默认为latin1拉丁文</span>create database `python<span class="token number">-02</span>` charset<span class="token operator">=</span>utf8；    <span class="token comment" spellcheck="true">#创建的数据库，将编码方式改为utf8，中文就可以显示出来了</span><span class="token comment" spellcheck="true"># 当文件中有-时，会认为特殊含义，加上``就可以了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除数据库</li></ul><pre class="line-numbers language-python"><code class="language-python">drop database python<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用数据库</li></ul><pre class="line-numbers language-python"><code class="language-python">show databases<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 显示所有的数据库</span>use python<span class="token number">-01</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 使用需要的数据库</span>select database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 显示需要的数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-6-数据表的操作"><a href="#1-6-数据表的操作" class="headerlink" title="1.6 数据表的操作"></a>1.6 数据表的操作</h5><h6 id="lt-1-创建表"><a href="#lt-1-创建表" class="headerlink" title="&lt;1 创建表"></a>&lt;1 创建表</h6><ul><li>查看数据库里有哪些表</li></ul><pre class="line-numbers language-python"><code class="language-python">show tables<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建表</li></ul><pre class="line-numbers language-python"><code class="language-python">create table sheet<span class="token punctuation">(</span>id int<span class="token punctuation">,</span>name varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 括号里加字段</span>create table sheet<span class="token punctuation">(</span>id int primary key <span class="token operator">not</span> null auto_increment<span class="token punctuation">,</span>name varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打开表，看字段部分</li></ul><pre><code>desc sheet;</code></pre><ul><li>显示创建表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show create table students;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>红框：引擎。存储引擎的作用就是规定了数据存储时的存储结构</code></p><ul><li><ul><li>例：创建班级表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">create table classes(    id int unsigned auto_increment primary key not null,    name varchar(10));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例：创建学生表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">create table students(    id int unsigned primary key auto_increment not null,    name varchar(20) default '',    age tinyint unsigned default 0,    height decimal(5,2),    gender enum('男','女','保密'),    # 如果在插入时，写了别的，会报错    cls_id int unsigned default 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>查看表里的内容</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">drop table sheet2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h6 id="lt-2-字段的增删改查"><a href="#lt-2-字段的增删改查" class="headerlink" title="&lt;2 字段的增删改查"></a>&lt;2 字段的增删改查</h6><ul><li><p>字段</p><ul><li><p>修改表-添加字段</p><pre class="line-numbers language-mysql"><code class="language-mysql"> alter table 表名 add 列名 类型;     # alter相当于change 例：alter table students add birthday datetime; desc students;  # 查看字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改字段属性</p><pre class="line-numbers language-mysql"><code class="language-mysql">alter table students modify birthday date;    # modify 是略微的改desc students;  # 查看字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改字段名字</p><pre class="line-numbers language-mysql"><code class="language-mysql">alter table students change birthday birth date default 1990-01-01;  desc students;  # 查看字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除字段</p><pre class="line-numbers language-mysql"><code class="language-mysql">alter table students drop high;desc students;  # 查看字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h6 id="lt-3-数据的增删改查"><a href="#lt-3-数据的增删改查" class="headerlink" title="&lt;3 数据的增删改查"></a>&lt;3 数据的增删改查</h6><p>增删改查(curd)<code>curd的解释: 代表创建（Create）、更新（Update）、读取（Retrieve）和删除（Delete）</code> </p><ul><li><p>插入</p><pre class="line-numbers language-mysql"><code class="language-mysql">insert into students values(0,"老王",18,188.88,"男",0)insert into students values(null,"老王",18,188.88,"男",0)insert into students values(default,"老王",18,188.88,"男",0)# 枚举中的下标从1开始insert into students values(default,"老王",18,188.88,"1",0)   # 性别1可以表示男性# 部分插入insert into students (name,age) values("小李"，30)# 多行插入insert into students (name,age) values("大乔"，30)（"小乔",25）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改</p><blockquote><p>格式: <strong>UPDATE</strong> <strong>*tbname*</strong> <strong>SET col1={expr1|DEFAULT} [,col2={expr2|default}]…[where 条件判断]</strong></p></blockquote><pre><code>update 表名 set 列1=值1,列2=值2... where 条件例：update students set gender=0,hometown=&#39;北京&#39; where id=5;</code></pre></li></ul><ul><li><p>查询</p><ul><li><p>查询所有列</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 查询所有信息select * from classes;# 查询姓名为老王的所有信息select * from students where name="老王";# 查询ID号大于6的数据信息select * from students where id>6;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询指定列</p><pre class="line-numbers language-mysql"><code class="language-mysql">select name,age from students where id>6;# 可以使用as为列或表指定别名select name as 姓名,age as 性别 from students where id>6;# 更改字段的顺序select age as 性别，name as 姓名 from students where id>6;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>删除</p><ul><li><p><strong>DELETE FROM tbname [where 条件判断]</strong> </p><pre class="line-numbers language-mysql"><code class="language-mysql">delete from 表名 where 条件例：delete from students where id=5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>逻辑删除，本质就是修改操作</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"># 增加一个字段，默认为0比特，比特只有1和0alter table students add isdelete bit default=0;# 把id为1的isdelete字段改为1，则数据表中所有为1的，就是要删除的。update students set isdelete=1 where id=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><table><thead><tr><th></th><th>数据库</th><th>表</th><th>字段</th><th>数据</th></tr></thead><tbody><tr><td>增</td><td><strong>create</strong> database python;</td><td><strong>create</strong> table students;</td><td><strong>alter</strong> <strong>table</strong> students <strong>add</strong> birthday datetime;</td><td><strong>insert</strong> <strong>into</strong> students <strong>values</strong>(0,”老王”,18,188.88,”男”,0);</td></tr><tr><td></td><td>创建数据库</td><td>创建表</td><td>添加字段</td><td>插入数据</td></tr><tr><td>删</td><td><strong>drop</strong> database python;</td><td><strong>drop</strong> table students;</td><td><strong>alter</strong> <strong>table</strong> students <strong>drop</strong> high;</td><td><strong>delete from</strong> students <strong>where</strong> id=5;</td></tr><tr><td></td><td>删除数据库</td><td>删除表</td><td>删除字段及相关数据</td><td></td></tr><tr><td>改</td><td></td><td></td><td><strong>alter</strong> <strong>table</strong> students <strong>change</strong> birthday birth date default 1990-01-01;                        <strong>alter</strong> table students <strong>modify</strong> birthday date;</td><td><strong>update</strong> students <strong>set</strong> gender=0,hometown=’北京’ <strong>where</strong> id=5;</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>查</td><td><strong>select</strong> database();</td><td></td><td></td><td><strong>select</strong> * <strong>from</strong> students;</td></tr><tr><td></td><td>查看当年数据库的名字</td><td></td><td></td><td>查看整个表</td></tr><tr><td></td><td><strong>show</strong> databases;查看</td><td><strong>show</strong> create table students;/<strong>show</strong> table students</td><td></td><td></td></tr><tr><td></td><td><strong>use</strong> python-01;</td><td><strong>desc</strong> students;</td><td></td><td></td></tr><tr><td></td><td>选择数据库</td><td>查看表的字段信息</td><td></td><td></td></tr></tbody></table><h5 id="1-7-数据库的备份"><a href="#1-7-数据库的备份" class="headerlink" title="1.7 数据库的备份"></a>1.7 数据库的备份</h5><ul><li>运行mysqldump命令</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">mysqldump –uroot –p 数据库名 > python.sql;      dump ：矿石堆# 按提示输入mysql的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h5 id="1-8-数据库的设计"><a href="#1-8-数据库的设计" class="headerlink" title="1.8 数据库的设计"></a>1.8 数据库的设计</h5><ol><li><strong>数据库设计</strong></li></ol><ul><li><p>关系型数据库建议在E-R模型的基础上，我们需要根据产品经理的设计策划，抽取出来模型与关系，制定出表结构，这是项目开始的第一步</p></li><li><p>在开发中有很多设计数据库的软件，常用的如power designer，db desinger等，这些软件可以直观的看到实体及实体间的关系</p></li><li><p>设计数据库，可能是由专门的数据库设计人员完成，也可能是由开发组成员完成，一般是项目经理带领组员来完成</p></li><li><p>现阶段不需要独立完成数据库设计，但是要注意积累一些这方面的经验</p></li></ul><ol start="2"><li><strong>三范式</strong></li></ol><ul><li><p>经过研究和对使用中问题的总结，对于设计数据库提出了一些规范，这些规范被称为范式(Normal Form)</p></li><li><p>目前有迹可寻的共有8种范式，一般需要遵守3范式即可</p><p>◆ 第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。</p><blockquote><p>考虑这样一个表：【联系人】（姓名，性别，电话） 如果在实际场景中，一个联系人有家庭电话和公司电话，那么这种表结构设计就没有达到 1NF。要符合 1NF 我们只需把列（电话）拆分，即：【联系人】（姓名，性别，家庭电话，公司电话）。1NF 很好辨别，但是 2NF 和 3NF 就容易搞混淆。</p></blockquote><p>◆ 第二范式（2NF）：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</p><blockquote><p>考虑一个订单明细表：【OrderDetail】（OrderID，ProductID，UnitPrice，Discount，Quantity，ProductName）。 因为我们知道在一个订单中可以订购多种产品，所以单单一个 OrderID 是不足以成为主键的，主键应该是（OrderID，ProductID）。显而易见 Discount（折扣），Quantity（数量）完全依赖（取决）于主键（OderID，ProductID），而 UnitPrice，ProductName 只依赖于 ProductID。所以 OrderDetail 表不符合 2NF。不符合 2NF 的设计容易产生冗余数据。</p><p>可以把【OrderDetail】表拆分为【OrderDetail】（OrderID，ProductID，Discount，Quantity）和【Product】（ProductID，UnitPrice，ProductName）来消除原订单表中UnitPrice，ProductName多次重复的情况。</p></blockquote><p>◆ 第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p><blockquote><p>考虑一个订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID）。 其中 OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity 等非主键列都完全依赖于主键（OrderID），所以符合 2NF。不过问题是 CustomerName，CustomerAddr，CustomerCity 直接依赖的是 CustomerID（非主键列），而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合 3NF。 通过拆分【Order】为【Order】（OrderID，OrderDate，CustomerID）和【Customer】（CustomerID，CustomerName，CustomerAddr，CustomerCity）从而达到 3NF。 *第二范式（2NF）和第三范式（3NF）的概念很容易混淆，区分它们的关键点在于，2NF：非主键列是否完全依赖于主键，还是依赖于主键的一部分；3NF：非主键列是直接依赖于主键，还是直接依赖于非主键列</p></blockquote></li></ul><ol start="3"><li><strong>E-R模型</strong></li></ol><ul><li>E表示entry，实体，设计实体就像定义一个类一样，指定从哪些方面描述对象，一个实体转换为数据库中的一个表</li><li>R表示relationship，关系，关系描述两个实体之间的对应规则，关系的类型包括包括一对一、一对多、多对多</li><li>关系也是一种数据，需要通过一个字段存储在表中</li><li>实体A对实体B为1对1，则在表A或表B中创建一个字段，存储另一个表的主键值</li></ul><ol start="4"><li><strong>逻辑删除</strong><ul><li>对于重要数据，并不希望物理删除，一旦删除，数据无法找回</li><li>删除方案：设置isDelete的列，类型为bit，表示逻辑删除，默认值为0</li><li>对于非重要数据，可以进行物理删除</li><li>数据的重要性，要根据实际开发决定</li></ul></li></ol><ul><li><p>示例</p><ul><li>设计两张表：班级表、学生表<ul><li>班级表classes <ul><li>id</li><li>name</li><li>isdelete</li></ul></li><li>学生表students <ul><li>id</li><li>name</li><li>birthday</li><li>gender</li><li>clsid</li><li>isdelete</li></ul></li></ul></li></ul></li></ul><h5 id="1-9-数据导出csv"><a href="#1-9-数据导出csv" class="headerlink" title="1.9  数据导出csv"></a>1.9  数据导出csv</h5><p>使用<strong>select …. into outfile</strong>的方法</p><p>直接在mysql的交互界面使用select命令导出数据到文件。 </p><pre class="line-numbers language-mysql"><code class="language-mysql">root@newsdb 09:53:08> select * from t_hk_stock_news where news_time > "2018.12.31 23:59:59" into outfile "/db/test.csv";ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上报错需要在配置文件中指定secure_file_priv参数的值，这个值指向一个地址，导出的文件需要写入到对应的地址中。</p><p>解决方式</p><p> 首先在mysql环境下使用<code>show variables like &quot;secure_file_priv&quot;;</code>查看一下这个变量的参数： </p><p>我这里这个参数的值是null，说明mysql中就没有设置secure_file_priv这个选项。如果这个参数是个特定的文件路径，就说明文件只有在这个路径下才能将它导入导出到mysql。参数secure_file_priv的值及含义如下：</p><p>secure_file_priv值    含义</p><table><thead><tr><th>NULL</th><th>禁止文件的导入导出</th></tr></thead><tbody><tr><td>””</td><td>（空字符串）允许所有文件的导入导出</td></tr><tr><td>一个特定的路径地址</td><td>只有该路径地址下的文件可以导入导出到mysq</td></tr></tbody></table><p>现在我们来设置一下这个选项。找到mysql安装包下的my.ini文件：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>secure_file_priv<span class="token operator">=</span><span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">fields terminated by描述字段的分隔符，默认情况下是tab字符（\t） optionally enclosed by描述的是字段的括起字符。escaped by描述的转义字符。默认的是反斜杠（backslash：\ ）  lines terminated by : 行与行之间的分隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql"><code class="language-mysql">root@newsdb 01:50:35>select * from t_hk_stock_news limit 3 into outfile "/db/test2.csv" fields terminated by ',' optionally enclosed by '"' escaped by '"' lines terminated by "\r\n";Query OK, 3 rows affected (0.01 sec)#数据如下[root@test2 db]# head test2.csv "00002752-c807-11e7-85f5-00163e020202",1,"NOW.838555","hk03337","安东油田服务(03337.HK)就现有优先票据提交换要约及额外发行票据","2017-11-13 07:35:25",1,0000000001,-1,"阿思达克","N,"N,"N,"2017-11-13 07:35:25",1510529725,"N,"N,1,"2f87c978-d3d1-11e7-9394-00163e020202","N,"2017-11-28 08:15:06""0000327bac35ba504d621e1140f2f775",1,"NOW.909884","hk00700","《瑞信窝轮》腾讯升逾2%撑大市美团续挫,留意腾讯购13570 / 沽15322/美团购14369 /沽14698","2018-11-26 14:07:39",1,0000000001,-1,"阿思达克","N,"N,"N,"2018-11-26 14:07:39",1543212459,"N,"N,1,"ea7916c91c037af7054f775998eda559","N,"2018-11-27 14:35:10""0000327bac35ba504d621e1140f2f775",1,"NOW.909884","hk01810","《瑞信窝轮》腾讯升逾2%撑大市美团续挫,留意腾讯购13570 / 沽15322/美团购14369 /沽14698","2018-11-26 14:07:39",1,0000000001,-1,"阿思达克","N,"N,"N,"2018-11-26 14:07:39",1543212459,"N,"N,1,"ea7916c91c037af7054f775998eda559","N,"2018-11-27 14:35:10"[root@test2 db]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-数据库查询"><a href="#2-数据库查询" class="headerlink" title="2 数据库查询"></a>2 数据库查询</h4><h5 id="2-1-mysql查询"><a href="#2-1-mysql查询" class="headerlink" title="2.1 mysql查询"></a>2.1 mysql查询</h5><ul><li>查询所有字段</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询指定字段</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select name from students;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 as 给字段起别名</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select id as 序号, name as 名字, gender as 性别 from students;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>可以通过 as 给表起别名</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 如果是一张表查询 可以省略表明select id, name, gender from students;-- 表名.字段名select students.id,students.name,students.gender from students;-- 可以通过 as 给表起别名 select s.id,s.name,s.gender from students as s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在select后面列前使用distinct可以消除重复的行</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select distinct 列1,... from 表名;例：select distinct gender from students;# 去除重复项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li></li></ul><h5 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h5><p>使用where子句对表中的数据筛选，结果为true的行会出现在结果集中 </p><ul><li>语法如下：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from 表名 where 条件;例：select * from students where id=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>where后面支持多种运算符，进行条件的处理</p><ul><li>比较运算符</li><li>逻辑运算符</li><li>模糊查询</li><li>范围查询</li><li>空判断</li></ul><h6 id="lt-1-比较运算符"><a href="#lt-1-比较运算符" class="headerlink" title="&lt;1 比较运算符"></a>&lt;1 比较运算符</h6><ul><li><p>等于: =</p></li><li><p>大于: &gt;</p></li><li><p>大于等于: &gt;=</p></li><li><p>小于: &lt;</p></li><li><p>小于等于: &lt;=</p></li><li><p>不等于: != 或 &lt;&gt;</p><p>例1：查询编号大于3的学生</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students where id > 3;select name,age from students where id > 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例2：查询编号不大于4的学生</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students where id <= 4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例3：查询姓名不是“黄蓉”的学生</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students where name != '黄蓉';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例4：查询没被删除的学生</p><pre class="line-numbers language-python"><code class="language-python">select <span class="token operator">*</span> <span class="token keyword">from</span> students where is_delete<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h6 id="lt-2-逻辑运算符"><a href="#lt-2-逻辑运算符" class="headerlink" title="&lt;2 逻辑运算符"></a>&lt;2 逻辑运算符</h6><ul><li><p>and</p></li><li><p>or</p></li><li><p>not</p><p>例：</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 查询编号大于3的女同学 select * from students where id > 3 and gender=0;# 查询编号小于4或没被删除的学生select * from students where id < 4 or is_delete=0;# 查询不在select * from students where not id < 4 or is_delete=0;   # not只对id有用select * from students where not (id < 4 or is_delete=0);   # not对id、 is_delete有用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="lt-3-模糊查询"><a href="#lt-3-模糊查询" class="headerlink" title="&lt;3 模糊查询"></a>&lt;3 模糊查询</h6><ul><li><p>like，效率低</p><ul><li>%表示任意多个任意字符</li><li>_表示一个任意字符</li></ul></li><li><p>rlike 正则</p><ul><li><p>实例：</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 查找姓名以小开始的姓名select * from students where name like "小%";# 查找姓名有 小 的姓名select * from students where name like "%小%";# 查找两个字的姓名select * from students where name like "__";# 查找至少两个字的姓名select * from students where name like "__%";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code># 查找周***伦的姓名  正则select * from students where name rlike &quot;^周.*伦$&quot;;```</code></pre><p>  ​    </p><h5 id="2-3-范围查询"><a href="#2-3-范围查询" class="headerlink" title="2.3 范围查询"></a>2.3 范围查询</h5><ul><li><p>in表示在一个非连续的范围内</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 查询编号是1或3或8的学生 select * from students where id in(1,3,8);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>between … and …表示在一个连续的范围内</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 查询编号为3至8的学生select * from students where id between 3 and 8;         # 包括3和8select * from students where id not between 3 and 8;   # 等同于下面select * from students where not id between 3 and 8; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>空判断</p><ul><li><p>注意：null与’’ ”是不同的   </p></li><li><p>判空is null</p></li><li><p>判非空is not null</p></li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">  select * from students where height is null;  select * from students where height is not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-4-排序"><a href="#2-4-排序" class="headerlink" title="2.4 排序"></a>2.4 排序</h5><ul><li><p>order by 列1 asc|desc</p><ul><li>asc     从小到大排序</li><li>desc   从大到小排序</li><li>将行数据按照列1进行排序，如果某些行列1的值相同时，则按照列2排序，以此类推</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"># 查询未删除男生信息，按学号降序select * from students where gender=1 and is_delete=0 order by id desc;# 显示所有的学生信息，先按照年龄从大-->小排序，当年龄相同时 按照身高从高-->矮排序select * from students  order by age desc, height desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="2-5-聚合"><a href="#2-5-聚合" class="headerlink" title="2.5 聚合"></a>2.5 聚合</h5><ul><li><p>总数</p><ul><li>count(*)表示计算总行数，括号中写星与列名，结果是相同的</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"># 例1：查询学生总数select count(*) from students;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>最大值</p><ul><li>max(列)表示求此列的最大值</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"># 例2：查询女生的编号最大值select max(id) from students where gender=2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>最小值</p><ul><li>min(列)表示求此列的最小值</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"># 例3：查询未删除的学生最小编号select min(id) from students where is_delete=0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>求和</p><ul><li>sum(列)表示求此列的和</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"># 例4：查询男生的总年龄select sum(age) from students where gender=1;-- 平均年龄select sum(age)/count(*) from students where gender=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>平均值</p><ul><li>avg(列)表示求此列的平均值</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"># 例5：查询未删除女生的编号平均值select avg(id) from students where is_delete=0 and gender=2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><p>四舍五入</p><ul><li>round(123.12,1)保留一位小数</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select round(sum(age)/count(*),2) from students;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="2-6-分组"><a href="#2-6-分组" class="headerlink" title="2.6 分组"></a>2.6 分组</h5><ol><li>group by的含义:将查询结果按照1个或多个字段进行分组，字段值相同的为一组</li><li>group by可用于单个字段分组，也可用于多个字段分组</li></ol><ul><li><p>分组与聚合结合</p><pre class="line-numbers language-mysql"><code class="language-mysql">select gender, count(*) from students group by gender;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>group_concat()</p><pre class="line-numbers language-mysql"><code class="language-mysql">select gender, group_concat(name) from students group by gender;select gender, group_concat(name,"_",age,"_",id) from students where gender=1 group by gender;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>group by + having</p><ol><li>having 条件表达式：用来分组查询后指定一些条件来输出查询结果</li><li>having作用和where一样，但having只能用于group by</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">select gender,group_concat(name) from students group by gender having count(*)>2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="2-7-分页"><a href="#2-7-分页" class="headerlink" title="2.7 分页"></a>2.7 分页</h5><p>limit 语法，在select语句里，放在最后</p><pre><code>select * from 表名 limit start,count</code></pre><ul><li><p>限制查询出来的个数</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students limit 2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询前五个</p><pre class="line-numbers language-python"><code class="language-python">select <span class="token operator">*</span> <span class="token keyword">from</span> students limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true"># id从1到5 从1开始，取5个</span>select <span class="token operator">*</span> <span class="token keyword">from</span> students limit <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># id从6到10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>分页</p><pre class="line-numbers language-mysql"><code class="language-mysql"># m是每页多少内容，n是第几页select * from students where is_delete=0 limit (n-1)*m,m     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="2-8-连接查询"><a href="#2-8-连接查询" class="headerlink" title="2.8 连接查询"></a>2.8 连接查询</h5><p>当查询结果的列来源于多张表时，需要将多张表连接成一个大的数据集，再选择合适的列返回</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from 表1 inner或left或right join 表2 on 表1.列 = 表2.列<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql支持三种类型的连接查询，分别为：</p><ul><li><p>内连接查询：查询的结果为两个表匹配到的数据 </p><p>实例：</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students inner join classes on students.cls_id=classes.id;# 显示需要的字段select students.*, classes.name from students inner join classes on students.cls_id=classes.id;# 缩短字段select s.*, cs.name from students as s inner join classes as c on s.cls_id=c.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>左连接查询：查询的结果为两个表匹配到的数据，左表特有的数据，对于右表中不存在的数据使用null填充</li></ul><pre class="line-numbers language-python"><code class="language-python">select <span class="token operator">*</span> <span class="token keyword">from</span> students left join classes on students<span class="token punctuation">.</span>cls_id<span class="token operator">=</span>classes<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 对查询的结果进行处理，查找对应过来的结果为空的</span>  select <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">as</span> s left join classes <span class="token keyword">as</span> c on s<span class="token punctuation">.</span>cls_id<span class="token operator">=</span>c<span class="token punctuation">.</span>id having c<span class="token punctuation">.</span>id <span class="token keyword">is</span> null <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>右连接查询：查询的结果为两个表匹配到的数据，右表特有的数据，对于左表中不存在的数据使用null填充</li></ul><h5 id="2-9-自关联"><a href="#2-9-自关联" class="headerlink" title="2.9 自关联"></a>2.9 自关联</h5><ul><li><p>创建areas表的语句如下：</p><pre class="line-numbers language-mysql"><code class="language-mysql">create table areas(    aid int primary key,    atitle varchar(20),    pid int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>从sql文件中导入数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">source areas.sql;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询一共有多少个省</p><pre class="line-numbers language-mysql"><code class="language-mysql">select count(*) from areas where pid is null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>例1：查询省的名称为“山西省”的所有城市</p><pre class="line-numbers language-mysql"><code class="language-mysql">select city.* from areas as cityinner join areas as province on city.pid=province.aidwhere province.atitle='山西省';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>例2：查询市的名称为“广州市”的所有区县(原理就是把一张表，拆成两个表)</p><pre class="line-numbers language-mysql"><code class="language-mysql">select dis.* from areas as disinner join areas as city on city.aid=dis.pidwhere city.atitle='广州市';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="2-10-子查询"><a href="#2-10-子查询" class="headerlink" title="2.10 子查询"></a>2.10 子查询</h5><p>运行速度慢一些</p><blockquote><p>在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句</p></blockquote><ul><li>主查询</li></ul><blockquote><p>主要查询的对象,第一条 select 语句</p></blockquote><ul><li><p><strong>主查询和子查询的关系</strong></p><ul><li>子查询是嵌入到主查询中</li><li>子查询是辅助主查询的,要么充当条件,要么充当数据源</li><li>子查询是可以独立存在的语句,是一条完整的 select 语句</li></ul></li><li><p>子查询分类</p><ul><li>标量子查询: 子查询返回的结果是一个数据(一行一列)</li><li>列子查询: 返回的结果是一列(一列多行)</li><li>行子查询: 返回的结果是一行(一行多列)</li></ul></li><li><p>标量子查询</p><ol><li>查询班级学生平均年龄</li><li>查询大于平均年龄的学生</li></ol><pre><code>select * from students where age &gt; (select avg(age) from students);</code></pre></li><li><p>列级子查询</p><ul><li>查询还有学生在班的所有班级名字</li><li><ol><li>找出学生表中所有的班级 id</li><li>找出班级表中对应的名字</li></ol></li></ul><pre><code>select name from classes where id in (select cls_id from students);</code></pre></li><li><p>行级子查询</p><ul><li>需求: 查找班级年龄最大,身高最高的学生</li><li>行元素: 将多个字段合成一个行元素,在行级子查询中会使用到行元素</li></ul><pre><code>select * from students where (height,age) = (select max(height),max(age) from students);</code></pre></li><li><p>子查询中特定关键字使用</p><ul><li>in 范围<ul><li>格式: 主查询 where 条件 in (列子查询)</li></ul></li></ul></li></ul><h5 id="2-11-总结"><a href="#2-11-总结" class="headerlink" title="2.11 总结"></a>2.11 总结</h5><pre><code>SELECT select_expr [,select_expr,...] [            FROM tb_name      [WHERE 条件判断]      [GROUP BY {col_name | postion} [ASC | DESC], ...]       [HAVING WHERE 条件判断]      [ORDER BY {col_name|expr|postion} [ASC | DESC], ...]      [ LIMIT {[offset,]rowcount | row_count OFFSET offset}]]</code></pre><ul><li>完整的select语句</li></ul><pre><code>select distinct *from 表名where ....group by ... having ...order by ...limit start,count</code></pre><ul><li>执行顺序为： <ul><li>from 表名</li><li>where ….</li><li>group by …</li><li>select distinct *</li><li>having …</li><li>order by …</li><li>limit start,count</li></ul></li><li>实际使用中，只是语句中某些部分的组合，而不是全部</li></ul><h4 id="3-mysql与python交互"><a href="#3-mysql与python交互" class="headerlink" title="3 mysql与python交互"></a>3 mysql与python交互</h4><h5 id="3-1-数据的准备与基本查询"><a href="#3-1-数据的准备与基本查询" class="headerlink" title="3.1 数据的准备与基本查询"></a>3.1 数据的准备与基本查询</h5><ul><li><p>创建表</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 创建 "京东" 数据库create database jing_dong charset=utf8;-- 使用 "京东" 数据库use jing_dong;-- 创建一个商品goods数据表create table goods(    id int unsigned primary key auto_increment not null,    name varchar(150) not null,    cate_name varchar(40) not null,    brand_name varchar(40) not null,    price decimal(10,3) not null default 0,    is_show bit not null default 1,    is_saleoff bit not null default 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>插入数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 向goods表中插入数据insert into goods values(0,'r510vc 15.6英寸笔记本','笔记本','华硕','3399',default,default); insert into goods values(0,'y400n 14.0英寸笔记本电脑','笔记本','联想','4999',default,default);insert into goods values(0,'g150th 15.6英寸游戏本','游戏本','雷神','8499',default,default); insert into goods values(0,'x550cc 15.6英寸笔记本','笔记本','华硕','2799',default,default); insert into goods values(0,'x240 超极本','超级本','联想','4880',default,default); insert into goods values(0,'u330p 13.3英寸超极本','超级本','联想','4299',default,default); insert into goods values(0,'svp13226scb 触控超极本','超级本','索尼','7999',default,default); insert into goods values(0,'ipad mini 7.9英寸平板电脑','平板电脑','苹果','1998',default,default);insert into goods values(0,'ipad air 9.7英寸平板电脑','平板电脑','苹果','3388',default,default); insert into goods values(0,'ipad mini 配备 retina 显示屏','平板电脑','苹果','2788',default,default); insert into goods values(0,'ideacentre c340 20英寸一体电脑 ','台式机','联想','3499',default,default); insert into goods values(0,'vostro 3800-r1206 台式电脑','台式机','戴尔','2899',default,default); insert into goods values(0,'imac me086ch/a 21.5英寸一体电脑','台式机','苹果','9188',default,default); insert into goods values(0,'at7-7414lp 台式电脑 linux ）','台式机','宏碁','3699',default,default); insert into goods values(0,'z220sff f4f06pa工作站','服务器/工作站','惠普','4288',default,default); insert into goods values(0,'poweredge ii服务器','服务器/工作站','戴尔','5388',default,default); insert into goods values(0,'mac pro专业级台式电脑','服务器/工作站','苹果','28888',default,default); insert into goods values(0,'hmz-t3w 头戴显示设备','笔记本配件','索尼','6999',default,default); insert into goods values(0,'商务双肩背包','笔记本配件','索尼','99',default,default); insert into goods values(0,'x3250 m4机架式服务器','服务器/工作站','ibm','6888',default,default); insert into goods values(0,'商务双肩背包','笔记本配件','索尼','99',default,default);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>演练</p><ul><li>查询类型cate_name为 ‘超极本’ 的商品名称、价格</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select name,price from goods where cate_name = '超级本';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>显示商品的种类</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select cate_name from goods group by cate_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>求所有电脑产品的平均价格,并且保留两位小数</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select round(avg(price),2) as avg_price from goods;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>显示每种商品的平均价格</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select cate_name,avg(price) from goods group by cate_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询每种类型的商品中 最贵、最便宜、平均价、数量</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select cate_name,max(price),min(price),avg(price),count(*) from goods group by cate_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询所有价格大于平均价格的商品，并且按价格降序排序</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select id,name,price from goods where price > (select round(avg(price),2) as avg_price from goods) order by price desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查询每种类型中最贵的电脑信息</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goodsinner join     (        select        cate_name,         max(price) as max_price,         min(price) as min_price,         avg(price) as avg_price,         count(*) from goods group by cate_name    ) as goods_new_info on goods.cate_name=goods_new_info.cate_name and goods.price=goods_new_info.max_price;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="3-2-拆分多个表"><a href="#3-2-拆分多个表" class="headerlink" title="3.2 拆分多个表"></a>3.2 拆分多个表</h5><ol><li><p>创建表</p><pre class="line-numbers language-mysql"><code class="language-mysql">create table if not exists goods_cates(    id int unsigned primary key auto_increment,    name varchar(40) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>查询goods表中商品的种类</p><pre class="line-numbers language-mysql"><code class="language-mysql">select cate_name from goods group by cate_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将分组结果写入到goods_cates数据表</p><pre class="line-numbers language-mysql"><code class="language-mysql">insert into goods_cates (name) select cate_name from goods group by cate_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="2"><li><p>同步数据表</p><pre class="line-numbers language-mysql"><code class="language-mysql">update goods as g inner join goods_cates as c on g.cate_name=c.name set g.cate_name=c.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li><p>创建 “商品品牌表” 表</p><ul><li>通过create…select来创建数据表并且同时写入记录,一步到位</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- select brand_name from goods group by brand_name;-- 在创建数据表的时候一起插入数据-- 注意: 需要对brand_name 用as起别名，否则name字段就没有值create table goods_brands (    id int unsigned primary key auto_increment,    name varchar(40) not null) select brand_name as name from goods group by brand_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>同步数据</p><ul><li>通过goods_brands数据表来更新goods数据表</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">update goods as g inner join goods_brands as b on g.brand_name=b.name set g.brand_name=b.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="5"><li><p>修改表结构</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 可以一次修改两个字段alter table goods  change cate_name cate_id int unsigned not null,change brand_name brand_id int unsigned not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="6"><li><p>外键</p><pre class="line-numbers language-mysql"><code class="language-mysql"># goods表的商品分类设为外键，且约束不能为空，才能创建成功alter table goods add foreign key (cate_id) references goods_cates(id);    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>如何取消外键约束</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 需要先获取外键约束名称,该名称系统会自动生成,可以通过查看表创建语句来获取名称show create table goods;-- 获取名称之后就可以根据名称来删除外键约束alter table goods drop foreign key 外键名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><strong>在实际开发中,很少会使用到外键约束,会极大的降低表更新的效率</strong></li></ul><h5 id="3-3-python安装pymysql"><a href="#3-3-python安装pymysql" class="headerlink" title="3.3 python安装pymysql"></a>3.3 python安装pymysql</h5><ul><li><p>pip 是用来管理python包的工具。pip分为2和3 ，默认为2</p><pre><code>pip3 install pymysql</code></pre></li></ul><h5 id="3-4-python操作mysql"><a href="#3-4-python操作mysql" class="headerlink" title="3.4 python操作mysql"></a>3.4 python操作mysql</h5><ul><li>在py文件中引入pymysql模块</li></ul><pre><code>from pymysql import connect</code></pre><p><strong>Connection 对象</strong></p><ul><li>用于建立与数据库的连接</li><li>创建对象：调用connect()方法</li></ul><pre class="line-numbers language-python"><code class="language-python">conn<span class="token operator">=</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token punctuation">,</span>database<span class="token operator">=</span><span class="token string">"jing_dong"</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建浮标</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from goods"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#  返回是条目数</span>cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 返回的是第一条信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数host：连接的mysql主机，如果本机是’localhost’</li><li>参数port：连接的mysql主机的端口，默认是3306</li><li>参数database：数据库的名称</li><li>参数user：连接的用户名</li><li>参数password：连接的密码</li><li>参数charset：通信采用的编码方式，推荐使用utf8</li></ul><p><strong>Cursor对象</strong></p><ul><li>用于执行sql语句，使用频度最高的语句为select、insert、update、delete</li><li>获取Cursor对象：调用Connection对象的cursor()方法</li></ul><pre><code>cs1=conn.cursor()</code></pre><p><strong>对象的方法</strong></p><ul><li>close()关闭</li><li>execute(operation [, parameters ])执行语句，返回受影响的行数，主要用于执行insert、update、delete语句，也可以执行create、alter、drop等语句</li><li>fetchone()执行查询语句时，获取查询结果集的第一个行数据，<strong>返回一个元组，如果为空，返回None</strong></li><li>fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回</li></ul><p><strong>对象的属性</strong></p><ul><li><p>rowcount只读属性，表示最近一次execute()执行后受影响的行数</p></li><li><p>connection获得当前连接对象</p></li></ul><h5 id="3-5-案例-京东商场查询"><a href="#3-5-案例-京东商场查询" class="headerlink" title="3.5 案例 京东商场查询"></a>3.5 案例 京东商场查询</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymysql <span class="token keyword">import</span> connect  <span class="token number">2</span>   <span class="token number">3</span> <span class="token keyword">class</span> <span class="token class-name">JD</span><span class="token punctuation">:</span>  <span class="token number">4</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">5</span>         self<span class="token punctuation">.</span>con <span class="token operator">=</span> connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token punctuation">,</span>database<span class="token operator">=</span><span class="token string">"jing_dong"</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>  <span class="token number">6</span>         <span class="token comment" spellcheck="true"># 创建游标对象</span>  <span class="token number">7</span>         self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">8</span>   <span class="token number">9</span>     <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">10</span>         self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">11</span>         self<span class="token punctuation">.</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">12</span>  <span class="token number">13</span>     <span class="token keyword">def</span> <span class="token function">execute_sql</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sql<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">14</span>         self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token number">15</span>         <span class="token keyword">for</span> tem <span class="token keyword">in</span> self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">16</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>tem<span class="token punctuation">)</span> <span class="token number">17</span>  <span class="token number">18</span>     <span class="token keyword">def</span> <span class="token function">goods</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">19</span>         sql <span class="token operator">=</span> <span class="token string">"select * from goods"</span> <span class="token number">20</span>         self<span class="token punctuation">.</span>execute_sql<span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token number">21</span>  <span class="token number">22</span>     <span class="token keyword">def</span> <span class="token function">goods_cates</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">23</span>         sql <span class="token operator">=</span> <span class="token string">"select name from goods_cates"</span> <span class="token number">24</span>         self<span class="token punctuation">.</span>execute_sql<span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token number">25</span>  <span class="token number">26</span>     <span class="token keyword">def</span> <span class="token function">goods_brand</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">27</span>         sql <span class="token operator">=</span> <span class="token string">"select name from goods_brand"</span> <span class="token number">28</span>         self<span class="token punctuation">.</span>execute_sql<span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token number">29</span>  <span class="token number">30</span>     @staticmethod <span class="token number">31</span>     <span class="token keyword">def</span> <span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">32</span>         <span class="token comment" spellcheck="true"># 显示提示</span> <span class="token number">33</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎来到京东商城"</span><span class="token punctuation">)</span> <span class="token number">34</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1、所有的商品信息"</span><span class="token punctuation">)</span> <span class="token number">35</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2、所有的商品分类"</span><span class="token punctuation">)</span> <span class="token number">36</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3、所有的商品品牌分类"</span><span class="token punctuation">)</span> <span class="token number">37</span>  <span class="token number">38</span>         <span class="token keyword">return</span> input<span class="token punctuation">(</span><span class="token string">"请输入要查询的数字"</span><span class="token punctuation">)</span> <span class="token number">39</span>  <span class="token number">40</span>     <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">41</span>         <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token number">42</span>             num <span class="token operator">=</span> self<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">43</span>             <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token number">44</span>                 self<span class="token punctuation">.</span>goods<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">45</span>             <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span> <span class="token number">46</span>                 self<span class="token punctuation">.</span>goods_cates<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">47</span>             <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span> <span class="token number">48</span>                 self<span class="token punctuation">.</span>goods_brand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">49</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">50</span>     <span class="token comment" spellcheck="true"># 创建京东对象</span> <span class="token number">51</span>     jd <span class="token operator">=</span> JD<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">52</span>  <span class="token number">53</span>     <span class="token comment" spellcheck="true"># 调用京东run函数，使其运行</span> <span class="token number">54</span>     jd<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">55</span>  <span class="token number">56</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span> <span class="token number">57</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-6-python-增加，修改"><a href="#3-6-python-增加，修改" class="headerlink" title="3.6 python 增加，修改"></a>3.6 python 增加，修改</h5><p>对数据进行修改的话，加入</p><p><code>conn.commit()</code></p><p>对数据撤回的，加入</p><p><code>conn.rollback()</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymysql <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建Connection连接</span>    conn <span class="token operator">=</span> connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>database<span class="token operator">=</span><span class="token string">'jing_dong'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'mysql'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获得Cursor对象</span>    cs1 <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 执行insert语句，并返回受影响的行数：添加一条数据</span>    <span class="token comment" spellcheck="true"># 增加</span>    count <span class="token operator">=</span> cs1<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'insert into goods_cates(name) values("硬盘")'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打印受影响的行数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    count <span class="token operator">=</span> cs1<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'insert into goods_cates(name) values("光盘")'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># # 更新</span>    <span class="token comment" spellcheck="true"># count = cs1.execute('update goods_cates set name="机械硬盘" where name="硬盘"')</span>    <span class="token comment" spellcheck="true"># # 删除</span>    <span class="token comment" spellcheck="true"># count = cs1.execute('delete from goods_cates where id=6')</span>    <span class="token comment" spellcheck="true"># 提交之前的操作，如果之前已经之执行过多次的execute，那么就都进行提交</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭Cursor对象</span>    cs1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭Connection对象</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-7-注入"><a href="#3-7-注入" class="headerlink" title="3.7 注入"></a>3.7 注入</h5><ul><li>sql语句的参数化，可以有效防止sql注入</li><li>注意：此处不同于python的字符串格式化，全部使用%s占位</li></ul><h4 id="4-Mysql高级"><a href="#4-Mysql高级" class="headerlink" title="4 Mysql高级"></a>4 Mysql高级</h4><h5 id="4-1-视图"><a href="#4-1-视图" class="headerlink" title="4.1 视图"></a>4.1 视图</h5><ol><li>问题</li></ol><p>对于复杂的查询，往往是有多个数据表进行关联查询而得到，如果数据库因为需求等原因发生了改变，为了保证查询出来的数据与之前相同，则需要在多个地方进行修改，维护起来非常麻烦</p><p>解决办法：定义视图</p><ol start="2"><li>视图是什么</li></ol><p>通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><p>视图是对若干张基本表的引用，一张虚表，查询语句执行的结果，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；</p><p>方便操作，特别是查询操作，减少复杂的SQL语句，增强可读性；</p><ol start="3"><li>定义视图</li></ol><p>建议以v_开头</p><pre class="line-numbers language-mysql"><code class="language-mysql">create view 视图名称 as    select语句;create view v_goods as select g.*,c.name as cate_name,b.name as brand_name from goods as g left join goods_cates as c on g.cate_id=c.id left join goods_brand as b on g.brand_id=b.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>三张表（goods as g       goods_cates as c       goods_brand as b  ）进行左连接，最后的显示第一张表的全部，二、三张表的name</p><ol start="4"><li>查看视图</li></ol><p>查看表会将所有的视图也列出来</p><pre class="line-numbers language-mysql"><code class="language-mysql">show tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>使用视图</li></ol><p>视图的用途就是查询</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from v_stu_score;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>删除视图</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">drop view 视图名称;例：drop view v_stu_sco;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="8"><li>视图的作用<ul><li>提高了重用性，就像一个函数</li><li>对数据库重构，却不影响程序的运行</li><li>提高了安全性能，可以对不同的用户</li><li>让数据更加清晰</li></ul></li></ol><h5 id="4-2-事务（面试题）"><a href="#4-2-事务（面试题）" class="headerlink" title="4.2 事务（面试题）"></a>4.2 事务（面试题）</h5><ol><li>为什么要有事务</li></ol><p>事务广泛的运用于订单系统、银行系统等多种场景</p><p>例如：</p><blockquote><p>A用户和B用户是银行的储户，现在A要给B转账500元，那么需要做以下几件事：</p><ol><li>检查A的账户余额&gt;500元；</li><li>A 账户中扣除500元;</li><li>B 账户中增加500元;</li></ol></blockquote><p>正常的流程走下来，A账户扣了500，B账户加了500，皆大欢喜。</p><p>那如果A账户扣了钱之后，系统出故障了呢？A白白损失了500，而B也没有收到本该属于他的500。</p><p>以上的案例中，隐藏着一个前提条件：A扣钱和B加钱，要么同时成功，要么同时失败。事务的需求就在于此</p><p><strong>所谓事务,它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</strong></p><p>例如，银行转帐工作：从一个帐号扣款并使另一个帐号增款，这两个操作要么都执行，要么都不执行。所以，应该把他们看成一个事务。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性</p><p>事务四大特性(简称ACID)</p><ul><li>原子性(Atomicity)</li><li>一致性(Consistency)</li><li>隔离性(Isolation)</li><li>持久性(Durability)</li></ul><p>以下内容出自《高性能MySQL》第三版，了解事务的ACID及四种隔离级有助于我们更好的理解事务运作。</p><p>下面举一个银行应用是解释事务必要性的一个经典例子。假如一个银行的数据库有两张表：支票表（checking）和储蓄表（savings）。现在要从用户Jane的支票账户转移200美元到她的储蓄账户，那么至少需要三个步骤：</p><ol><li>检查支票账户的余额高于或者等于200美元。</li><li>从支票账户余额中减去200美元。</li><li>在储蓄帐户余额中增加200美元。</li></ol><p>上述三个步骤的操作必须打包在一个事务中，任何一个步骤失败，则必须回滚所有的步骤。</p><p>可以用START TRANSACTION语句开始一个事务，然后要么使用COMMIT提交将修改的数据持久保存，要么使用ROLLBACK撤销所有的修改。事务SQL的样本如下：</p><ol><li>start transaction;</li><li>select balance from checking where customer_id = 10233276;</li><li>update checking set balance = balance - 200.00 where customer_id = 10233276;</li><li>update savings set balance = balance + 200.00 where customer_id = 10233276;</li><li>commit;</li></ol><p>一个很好的事务处理系统，必须具备这些标准特性：</p><ul><li>原子性（atomicity）</li></ul><blockquote><p>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性</p></blockquote><ul><li>一致性（consistency）</li></ul><blockquote><p>数据库总是从一个一致性的状态转换到另一个一致性的状态。（在前面的例子中，一致性确保了，即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。）</p></blockquote><ul><li>隔离性（isolation）</li></ul><blockquote><p>通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。（在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去200美元。）</p></blockquote><ul><li>持久性（durability）</li></ul><blockquote><p>一旦事务提交，则其所做的修改会永久保存到数据库。（此时即使系统崩溃，修改的数据也不会丢失。）</p></blockquote><p>事务命令</p><p>表的引擎类型必须是innodb类型才可以使用事务，这是mysql表的默认引擎</p><p>查看表的创建语句，可以看到engine=innodb</p><pre><code>-- 选择数据库use jing_dong;-- 查看goods表show create table goods;</code></pre><p>开启事务，命令如下：</p><ul><li>开启事务后执行修改命令，变更会维护到本地缓存中，而不维护到物理表中</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">begin;或者start transaction;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>提交事务，命令如下</p><ul><li>将缓存中的数据变更维护到物理表中</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">commit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回滚事务，命令如下：</p><ul><li>放弃缓存中变更的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意</p><ol><li>修改数据的命令会自动的触发事务，包括insert、update、delete</li><li>而在SQL语句中有手动开启事务的原因是：可以进行多次数据的修改，如果成功一起成功，否则一起会滚到之前的数据</li></ol><h6 id="lt-1-提交"><a href="#lt-1-提交" class="headerlink" title="&lt;1 提交"></a>&lt;1 提交</h6><ul><li>为了演示效果，需要打开两个终端窗口，使用同一个数据库，操作同一张表（用到之前的jing_dong数据，可以回到mysql第3天中查看）</li></ul><p>step1：连接</p><ul><li>终端1：查询商品分类信息</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step2：增加数据</p><ul><li>终端2：开启事务，插入数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">begin;insert into goods_cates(name) values('小霸王游戏机');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>终端2：查询数据，此时有新增的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step3：查询</p><ul><li>终端1：查询数据，发现并没有新增的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step4：提交</p><ul><li>终端2：完成提交</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">commit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step5：查询</p><ul><li>终端1：查询，发现有新增的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="lt-2-回滚"><a href="#lt-2-回滚" class="headerlink" title="&lt;2 回滚"></a>&lt;2 回滚</h6><ul><li>为了演示效果，需要打开两个终端窗口，使用同一个数据库，操作同一张表</li></ul><p>step1：连接</p><ul><li>终端1</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step2：增加数据</p><ul><li>终端2：开启事务，插入数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">begin;insert into goods_cates(name) values('小霸王游戏机');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>终端2：查询数据，此时有新增的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step3：查询</p><ul><li>终端1：查询数据，发现并没有新增的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step4：回滚</p><ul><li>终端2：完成回滚</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step5：查询</p><ul><li>终端1：查询数据，发现没有新增的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from goods_cates;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-3-索引"><a href="#4-3-索引" class="headerlink" title="4.3 索引"></a>4.3 索引</h5><ol><li><strong>思考</strong></li></ol><blockquote><p>在图书馆中是如何找到一本书的？</p></blockquote><p>一般的应用系统对比数据库的读写比例在10:1左右(即有10次查询操作时有1次写的操作)，</p><p>而且插入操作和更新操作很少出现性能问题，</p><p>遇到最多、最容易出问题还是一些复杂的查询操作，所以查询语句的优化显然是重中之重</p><ol start="2"><li><strong>解决办法</strong></li></ol><p>当数据库中数据量很大时，查找数据会变得很慢</p><p>优化方案：索引</p><ol start="3"><li><strong>索引是什么</strong></li></ol><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p><p>更通俗的说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度</p><ol start="4"><li><strong>索引目的</strong></li></ol><p>索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？</p><p><strong>5. 索引原理</strong></p><p>除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。</p><p>数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。</p><p><strong>6. 索引的使用</strong></p><ul><li>查看索引</li></ul><pre><code>show index from 表名;</code></pre><ul><li>创建索引<ul><li>如果指定字段是字符串，需要指定长度，建议长度与定义字段时的长度一致</li><li>字段类型如果不是字符串，可以不填写长度部分</li></ul></li></ul><pre><code>create index 索引名称 on 表名(字段名称(长度))</code></pre><ul><li>删除索引：</li></ul><pre><code>drop index 索引名称 on 表名;</code></pre><ol start="7"><li><strong>索引demo</strong></li></ol><p>7.1. 创建测试表testindex</p><pre><code>create table test_index(title varchar(10));</code></pre><p>7.2 使用python程序（ipython也可以）通过pymsql模块 向表中加入十万条数据</p><pre><code>from pymysql import connectdef main():    # 创建Connection连接    conn = connect(host=&#39;localhost&#39;,port=3306,database=&#39;jing_dong&#39;,user=&#39;root&#39;,password=&#39;mysql&#39;,charset=&#39;utf8&#39;)    # 获得Cursor对象    cursor = conn.cursor()    # 插入10万次数据    for i in range(100000):        cursor.execute(&quot;insert into test_index values(&#39;ha-%d&#39;)&quot; % i)    # 提交数据    conn.commit()if __name__ == &quot;__main__&quot;:    main()</code></pre><p>7.3. 查询</p><ul><li>开启运行时间监测：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">set profiling=1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查找第1万条数据ha-99999</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from test_index where title='ha-99999';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看执行的时间：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profiles;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>为表title_index的title列创建索引：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">create index test_index on title_index(title(10));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行查询语句：</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">select * from test_index where title='ha-99999';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>再次查看执行的时间</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">show profiles;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li><strong>注意：</strong></li></ol><blockquote><p>要注意的是，建立太多的索引将会影响更新和插入的速度，因为它需要同样更新每个索引文件。对于一个经常需要更新和插入的表格，就没有必要为一个很少使用的where字句单独建立索引了，对于比较小的表，排序的开销不会很大，也没有必要建立另外的索引。</p><p>建立索引会占用磁盘空间</p></blockquote><h5 id="4-4-账户管理（了解）"><a href="#4-4-账户管理（了解）" class="headerlink" title="4.4 账户管理（了解）"></a>4.4 账户管理（了解）</h5><h6 id="lt-1-授权"><a href="#lt-1-授权" class="headerlink" title="&lt;1 授权"></a>&lt;1 授权</h6><p>需要使用实例级账户登录后操作，以root为例</p><p>主要操作包括：</p><ul><li>查看所有用户</li><li>修改密码</li><li>删除用户</li></ul><p><strong>1. 查看所有用户</strong></p><ul><li>所有用户及权限信息存储在mysql数据库的user表中</li><li>查看user表的结构</li></ul><pre><code>desc user;</code></pre><ul><li><p>主要字段说明：</p><ul><li>Host表示允许访问的主机</li><li>User表示用户名</li><li>authentication_string表示密码，为加密后的值</li></ul></li><li><p>查看所有用户</p><pre><code>select host,user,authentication_string from user;</code></pre><p>结果</p><pre><code>mysql&gt; select host,user,authentication_string from user;+-----------+------------------+-------------------------------------------+| host      | user             | authentication_string                     |+-----------+------------------+-------------------------------------------+| localhost | root             | *E74858DB86EBA20BC33D0AECAE8A8108C56B17FA || localhost | mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE || localhost | debian-sys-maint | *EFED9C764966EDB33BB7318E1CBD122C0DFE4827 |+-----------+------------------+-------------------------------------------+3 rows in set (0.00 sec)</code></pre></li></ul><ol start="2"><li><strong>创建账户、授权</strong></li></ol><ul><li>需要使用实例级账户登录后操作，以root为例</li><li>常用权限主要包括：create、alter、drop、insert、update、delete、select</li><li>如果分配所有权限，可以使用all privileges</li></ul><p>2.1 创建账户&amp;授权</p><pre><code>grant 权限列表 on 数据库 to &#39;用户名&#39;@&#39;访问主机&#39; identified by &#39;密码&#39;;</code></pre><p><strong>2.2 示例1</strong></p><p>创建一个<code>laowang</code>的账号，密码为<code>123456</code>，只能通过本地访问, 并且只能对<code>jing_dong</code>数据库中的所有表进行<code>读</code>操作</p><p>step1：使用root登录</p><pre><code>mysql -uroot -p回车后写密码，然后回车</code></pre><p>step2：创建账户并授予所有权限</p><pre><code>grant select on jing_dong.* to &#39;laowang&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</code></pre><p>说明</p><ul><li><p>可以操作python数据库的所有表，方式为:<code>jing_dong.*</code></p></li><li><p>访问主机通常使用 百分号% 表示此账户可以使用任何ip的主机登录访问此数据库</p></li><li><p>访问主机可以设置成 localhost或具体的ip，表示只允许本机或特定主机访问</p></li><li><p>查看用户有哪些权限</p></li></ul><pre><code>show grants for laowang@localhost;</code></pre><p>step3：退出root的登录</p><pre><code>quit</code></pre><p>step4：使用laowang账户登录</p><pre><code>mysql -ulaowang -p回车后写密码，然后回车</code></pre><p><strong>2.3 示例2</strong></p><p>创建一个<code>laoli</code>的账号，密码为<code>12345678</code>，可以任意电脑进行链接访问, 并且对<code>jing_dong</code>数据库中的所有表拥有所有权限</p><pre><code>grant all privileges on jing_dong.* to &quot;laoli&quot;@&quot;%&quot; identified by &quot;12345678&quot;</code></pre><h6 id="lt-2-修改权限"><a href="#lt-2-修改权限" class="headerlink" title="&lt;2 修改权限"></a>&lt;2 修改权限</h6><p><strong>1.  修改权限</strong></p><pre><code>grant 权限名称 on 数据库 to 账户@主机 with grant option;</code></pre><ol start="2"><li><strong>修改密码</strong></li></ol><p>使用root登录，修改mysql数据库的user表</p><ul><li><p>使用password()函数进行密码加密</p><pre><code>update user set authentication_string=password(&#39;新密码&#39;) where user=&#39;用户名&#39;;例：update user set authentication_string=password(&#39;123&#39;) where user=&#39;laowang&#39;;</code></pre></li><li><p>注意修改完成后需要刷新权限</p><pre><code>刷新权限：flush privileges</code></pre></li></ul><ol start="3"><li><strong>远程登录（危险慎用）</strong></li></ol><p>如果向在一个Ubuntu中使用msyql命令远程连接另外一台mysql服务器的话，通过以下方式即可完成，但是此方法仅仅了解就好了，不要在实际生产环境中使用</p><p>修改 /etc/mysql/mysql.conf.d/mysqld.cnf 文件</p><pre><code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><h5 id="4-5-主从"><a href="#4-5-主从" class="headerlink" title="4.5 主从"></a>4.5 主从</h5><ol><li><p><strong>主从同步的定义</strong></p><p>读写分离</p><p>数据备份</p><p>主从同步使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器（master），其余的服务器充当从服务器（slave）。因为复制是异步进行的，所以从服务器不需要一直连接着主服务器，从服务器甚至可以通过拨号断断续续地连接主服务器。通过配置文件，可以指定复制所有的数据库，某个数据库，甚至是某个数据库上的某个表。</p><p>使用主从同步的好处：</p><ul><li>通过增加从服务器来提高数据库的性能，在主服务器上执行写入和更新，在从服务器上向外提供读功能，可以动态地调整从服务器的数量，从而调整整个数据库的性能。</li><li>提高数据安全，因为数据已复制到从服务器，从服务器可以终止复制进程，所以，可以在从服务器上备份而不破坏主服务器相应数据</li><li>在主服务器上生成实时数据，而在从服务器上分析这些数据，从而提高主服务器的性能</li></ul><p>主从同步使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器（master），其余的服务器充当从服务器（slave）。因为复制是异步进行的，所以从服务器不需要一直连接着主服务器，从服务器甚至可以通过拨号断断续续地连接主服务器。通过配置文件，可以指定复制所有的数据库，某个数据库，甚至是某个数据库上的某个表。</p><p>使用主从同步的好处：</p><ul><li>通过增加从服务器来提高数据库的性能，在主服务器上执行写入和更新，在从服务器上向外提供读功能，可以动态地调整从服务器的数量，从而调整整个数据库的性能。</li><li>提高数据安全，因为数据已复制到从服务器，从服务器可以终止复制进程，所以，可以在从服务器上备份而不破坏主服务器相应数据</li><li>在主服务器上生成实时数据，而在从服务器上分析这些数据，从而提高主服务器的性能</li></ul></li></ol><p><strong>2. 主从同步的机制</strong></p><p>Mysql服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行该日志文件来保持和主服务器的数据一致。</p><p>在使用二进制日志时，主服务器的所有操作都会被记录下来，然后从服务器会接收到该日志的一个副本。从服务器可以指定执行该日志中的哪一类事件（譬如只插入数据或者只更新数据），默认会执行日志中的所有语句。</p><p>每一个从服务器会记录关于二进制日志的信息：文件名和已经处理过的语句，这样意味着不同的从服务器可以分别执行同一个二进制日志的不同部分，并且从服务器可以随时连接或者中断和服务器的连接。</p><p>主服务器和每一个从服务器都必须配置一个唯一的ID号（在my.cnf文件的[mysqld]模块下有一个server-id配置项），另外，每一个从服务器还需要通过CHANGE MASTER TO语句来配置它要连接的主服务器的ip地址，日志文件名称和该日志里面的位置（这些信息存储在主服务器的数据库里）</p><ol start="3"><li>配置主从同步的基本步骤</li></ol><p>有很多种配置主从同步的方法，可以总结为如下的步骤：</p><ol><li>在主服务器上，必须开启二进制日志机制和配置一个独立的ID</li><li>在每一个从服务器上，配置一个唯一的ID，创建一个用来专门复制主服务器数据的账号</li><li>在开始复制进程前，在主服务器上记录二进制文件的位置信息</li><li>如果在开始复制之前，数据库中已经有数据，就必须先创建一个数据快照（可以使用mysqldump导出数据库，或者直接复制数据文件）</li><li>配置从服务器要连接的主服务器的IP地址和登陆授权，二进制日志文件名和位置</li></ol><table><thead><tr><th></th><th>数据库</th><th>表</th><th>字段</th><th>数据</th></tr></thead><tbody><tr><td>增</td><td><strong>create</strong> database python;</td><td><strong>create</strong> table students;</td><td><strong>alter</strong> <strong>table</strong> students <strong>add</strong> birthday datetime;</td><td><strong>insert</strong> <strong>into</strong> students <strong>values</strong>(0,”老王”,18,188.88,”男”,0);</td></tr><tr><td></td><td>创建数据库</td><td>创建表</td><td>添加字段</td><td>插入数据</td></tr><tr><td>删</td><td><strong>drop</strong> database python;</td><td><strong>drop</strong> table students;</td><td><strong>alter</strong> <strong>table</strong> students <strong>drop</strong> high;</td><td><strong>delete from</strong> students <strong>where</strong> id=5;</td></tr><tr><td></td><td>删除数据库</td><td>删除表</td><td>删除字段及相关数据</td><td></td></tr><tr><td>改</td><td></td><td></td><td><strong>alter</strong> <strong>table</strong> students <strong>change</strong> birthday birth date default 1990-01-01;                        <strong>alter</strong> table students <strong>modify</strong> birthday date;</td><td><strong>update</strong> students <strong>set</strong> gender=0,hometown=’北京’ <strong>where</strong> id=5;</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>查</td><td><strong>select</strong> database();</td><td></td><td></td><td><strong>select</strong> * <strong>from</strong> students;</td></tr><tr><td></td><td>查看当年数据库的名字</td><td></td><td></td><td>查看整个表</td></tr><tr><td></td><td><strong>show</strong> databases;查看</td><td><strong>show</strong> create table students;/<strong>show</strong> table students</td><td></td><td></td></tr><tr><td></td><td><strong>use</strong> python-01;</td><td><strong>desc</strong> students;</td><td></td><td></td></tr><tr><td></td><td>选择数据库</td><td>查看表的字段信息</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 关系型数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux </title>
      <link href="/linux.html"/>
      <url>/linux.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux指令大全"><a href="#Linux指令大全" class="headerlink" title="Linux指令大全"></a>Linux指令大全</h1><h2 id="一-文件管理"><a href="#一-文件管理" class="headerlink" title="一.文件管理"></a>一.文件管理</h2><h3 id="1-ls命令-–-显示指定工作目录下的文件及属性信息"><a href="#1-ls命令-–-显示指定工作目录下的文件及属性信息" class="headerlink" title="1.ls命令 – 显示指定工作目录下的文件及属性信息"></a>1.ls命令 – 显示指定工作目录下的文件及属性信息</h3><p>​    ls是最常被使用到的Linux命令之一，来自于英文单词list的缩写，也正如list单词的英文意思，其功能是列举出指定目录下的文件名称及其属性。</p><p>​    </p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">显示所有文件及目录 (包括以“.”开头的隐藏文件)</td></tr><tr><td align="center">-l</td><td align="center">使用长格式列出文件及目录的详细信息</td></tr><tr><td align="center">-r</td><td align="center">将文件以相反次序显示(默认依英文字母次序)</td></tr><tr><td align="center">-t</td><td align="center">根据最后的修改时间排序</td></tr><tr><td align="center">-A</td><td align="center">同 -a ，但不列出 “.” (当前目录) 及 “..” (父目录)</td></tr><tr><td align="center">-S</td><td align="center">根据文件大小排序</td></tr><tr><td align="center">-R</td><td align="center">递归列出所有子目录</td></tr><tr><td align="center">-d</td><td align="center">查看目录的信息，而不是里面子文件的信息</td></tr><tr><td align="center">-i</td><td align="center">输出文件的inode节点信息</td></tr><tr><td align="center">-m</td><td align="center">水平列出文件，以逗号间隔</td></tr><tr><td align="center">-X</td><td align="center">按文件扩展名排序</td></tr><tr><td align="center">–color</td><td align="center">输出信息中带有着色效果</td></tr></tbody></table><p><strong>参考示例：</strong></p><p>输出当前目录中的文件（默认不含隐藏文件）：</p><pre><code>[root@linuxcool ~]# lsanaconda-ks.cfg  Documents  initial-setup-ks.cfg  Pictures  TemplatesDesktop          Downloads  Music                 Public    Videos</code></pre><p>输出当前目录中的文件（含隐藏文件）：</p><pre><code>[root@linuxcool ~]# ls -a.                .bashrc  Documents             Music      Videos..               .cache   Downloads             Pictures   .viminfoanaconda-ks.cfg  .config  .esd_auth             .pki.bash_history    .cshrc   .ICEauthority         Public.bash_logout     .dbus    initial-setup-ks.cfg  .tcshrc.bash_profile    Desktop  .local                Templates</code></pre><p>输出文件的长格式，包含属性详情信息：</p><pre><code>[root@linuxcool ~]# ls -ltotal 8-rw-------. 1 root root 1430 Dec 14 08:05 anaconda-ks.cfgdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Desktopdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Documentsdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Downloads-rw-r--r--. 1 root root 1585 Dec 14 08:34 initial-setup-ks.cfgdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Musicdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Picturesdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Publicdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Templatesdrwxr-xr-x. 2 root root    6 Dec 14 08:37 Videos</code></pre><p>输出指定目录中的文件列表：</p><pre><code>[root@linuxcool ~]# ls /etcadjtime                     hosts                     pulsealiases                     hosts.allow               qemu-gaalsa                        hosts.deny                qemu-kvmalternatives                hp                        radvd.confanacrontab                  idmapd.conf               rasasound.conf                 init.d                    rc0.dat.deny                     inittab                   rc1.d………………省略部分输出信息………………</code></pre><p>输出文件名称及inode属性块号码：</p><pre><code>[root@linuxcool ~]# ls -i35290115 anaconda-ks.cfg  35290137 initial-setup-ks.cfg  35290164 Templates 1137391 Desktop          17840039 Music                 51609597 Videos 1137392 Documents        35290165 Pictures17840038 Downloads        51609596 Public</code></pre><p>搭配通配符一起使用，输出指定目录中所有以sd开头的文件名称：</p><pre><code>[root@linuxcool ~]# ls /dev/sd*/dev/sda  /dev/sda1  /dev/sda2</code></pre><p>依据文件大小进行排序，输出指定目录中文件属性详情信息：</p><pre><code>[root@linuxcool ~]# ls -Sl /etctotal 1348-rw-r--r--.  1 root root    692241 Sep 10  2018 services-rw-r--r--.  1 root root     66482 Dec 14 08:34 ld.so.cache-rw-r--r--.  1 root root     60352 May 11  2017 mime.types-rw-r--r--.  1 root dnsmasq  26843 Aug 12  2018 dnsmasq.conf-rw-r--r--.  1 root root     25696 Dec 12  2018 brltty.conf-rw-r--r--.  1 root root      9450 Aug 12  2018 nanorc-rw-r--r--.  1 root root      7265 Dec 14 08:03 kdump.conf-rw-------.  1 tss  tss       7046 Aug 13  2018 tcsd.conf………………省略部分输出信息………………</code></pre><h3 id="2-cp命令-–-复制文件或目录"><a href="#2-cp命令-–-复制文件或目录" class="headerlink" title="2.cp命令 – 复制文件或目录"></a>2.cp命令 – 复制文件或目录</h3><p>​    cp命令来自于英文单词copy的缩写，用于将一个或多个文件或目录复制到指定位置，亦常用于文件的备份工作。-r参数用于递归操作，复制目录时若忘记加则会直接报错，而-f参数则用于当目标文件已存在时会直接覆盖不再询问，这两个参数尤为常用。</p><p><strong>语法格式：</strong>cp [参数] 源文件 目标文件</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">若目标文件已存在，则会直接覆盖原文件</td></tr><tr><td align="center">-i</td><td align="center">若目标文件已存在，则会询问是否覆盖</td></tr><tr><td align="center">-p</td><td align="center">保留源文件或目录的所有属性</td></tr><tr><td align="center">-r</td><td align="center">递归复制文件和目录</td></tr><tr><td align="center">-d</td><td align="center">当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录</td></tr><tr><td align="center">-l</td><td align="center">对源文件建立硬连接，而非复制文件</td></tr><tr><td align="center">-s</td><td align="center">对源文件建立符号连接，而非复制文件</td></tr><tr><td align="center">-b</td><td align="center">覆盖已存在的文件目标前将目标文件备份</td></tr><tr><td align="center">-v</td><td align="center">详细显示cp命令执行的操作过程</td></tr><tr><td align="center">-a</td><td align="center">等价于“pdr”选项</td></tr></tbody></table><p><strong>参考实例</strong></p><p>在当前工作目录中，将某个文件复制一份，并定义新文件名称：</p><pre><code>[root@linuxcool ~]# cp anaconda-ks.cfg kickstart.cfg</code></pre><p>在当前工作目录中，将某个目录复制一份，并定义新目录名称：</p><pre><code>[root@linuxcool ~]# cp -r Documents Doc</code></pre><p>复制某个文件时，保留其原始权限及用户归属信息：</p><pre><code>[root@linuxcool ~]# cp -a kickstart.cfg ks.cfg</code></pre><p>将某个文件复制到/etc目录中，并覆盖已有文件，不进行询问：</p><pre><code>[root@linuxcool ~]# cp -f ks.cfg /etc</code></pre><p>将多个文件一同复制到/etc目录中，如已有目标文件名称则默认询问是否覆盖：</p><pre><code>[root@linuxcool ~]# cp anaconda-ks.cfg ks.cfg /etccp: overwrite &#39;/etc/ks.cfg&#39;? y</code></pre><h3 id="3-mkdir命令-–-创建目录文件"><a href="#3-mkdir命令-–-创建目录文件" class="headerlink" title="3.mkdir命令 – 创建目录文件"></a>3.mkdir命令 – 创建目录文件</h3><p>​    mkdir命令来自于英文词组“make directories”的缩写，其功能是用来创建目录文件。使用简单，但需要注意若要创建的目标目录已经存在，则会提示已存在而不继续创建，不覆盖已有文件。而目录不存在，但具有嵌套的依赖关系，例如a/b/c/d/e/f，要想一次性创建则需要加入-p参数，进行递归操作。</p><p>​        <strong>语法格式 :</strong> mkdir [参数] 目录</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-p</td><td align="center">递归创建多级目录</td></tr><tr><td align="center">-m</td><td align="center">建立目录的同时设置目录的权限</td></tr><tr><td align="center">-z</td><td align="center">设置安全上下文</td></tr><tr><td align="center">-v</td><td align="center">显示目录的创建过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>在当前工作目录中，建立一个目录文件：</p><pre><code>[root@linuxcool ~]# mkdir dir1</code></pre><p>在当前工作目录中，创建一个目录文件并设置700权限，不让除所有主以外任何人读、写、执行它：</p><pre><code>[root@linuxcool ~]# mkdir -m 700 dir2</code></pre><p>在当前工作目录中，一次性创建多个目录文件：</p><pre><code>[root@linuxcool ~]# mkdir dir3 dir4 dir5</code></pre><p>在系统根目录中，一次性创建多个有嵌套关系的目录文件：</p><pre><code>[root@linuxcool ~]# mkdir -p /dir1/dir2/dir3/dir4/dir5</code></pre><h3 id="4-mv命令-–-移动或改名文件"><a href="#4-mv命令-–-移动或改名文件" class="headerlink" title="4.mv命令 – 移动或改名文件"></a>4.mv命令 – 移动或改名文件</h3><p>​    mv命令来自于英文单词move的缩写，其功能与英文含义相同，用于对文件进行剪切和重命名。</p><p>​    这是一个高频使用的文件管理命令，我们需要留意它与复制命令的区别。cp命令是用于文件的复制操作，文件个数是增加的，而mv则为剪切操作，也就是对文件进行移动（搬家）操作，文件位置发生变化，但总个数并无增加。</p><p>​    在同一个目录内对文件进行剪切的操作，实际应理解成重命名操作，例如下面的实例一所示。</p><p>​    <strong>语法格式：</strong>mv [参数] 源文件 目标文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-i</td><td align="center">若存在同名文件，则向用户询问是否覆盖</td></tr><tr><td align="center">-f</td><td align="center">覆盖已有文件时，不进行任何提示</td></tr><tr><td align="center">-b</td><td align="center">当文件存在时，覆盖前为其创建一个备份</td></tr><tr><td align="center">-u</td><td align="center">当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>在当前工作目录中，对某个文件进行剪切后粘贴（重命名）操作：</p><pre><code>[root@linuxcool ~]# mv anaconda-ks.cfg ks.cfg</code></pre><p>将某个文件移动到/etc目录中，保留文件原始名称：</p><pre><code>[root@linuxcool ~]# mv ks.cfg /etc</code></pre><p>将某个目录移动到/etc目录中，并定义新的目录名称：</p><pre><code>[root@linuxcool ~]# mv Documents /etc/docs</code></pre><p>将/home目录中所有的文件都移动到当前工作目录中，遇到已存在文件则直接覆盖：</p><pre><code>[root@linuxcool ~]# mv -f /home/* .</code></pre><h3 id="5-pwd命令-–-显示当前工作目录的路径"><a href="#5-pwd命令-–-显示当前工作目录的路径" class="headerlink" title="5.pwd命令 – 显示当前工作目录的路径"></a>5.pwd命令 – 显示当前工作目录的路径</h3><p>​    pwd命令来自于英文词组”print working directory“的缩写，其功能是用于显示当前工作目录的路径，即显示所在位置的绝对路径。</p><p>​    在实际工作中，我们经常会在不同目录之间进行切换，为了防止”迷路“，可以使用pwd命令快速查看当前所处的工作目录路径，方便开展后续工作。</p><p>​    <strong>语法格式</strong>：pwd [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th>-L</th><th>显示逻辑路径</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查看当前工作目录路径：</p><pre><code>[root@linuxcool ~]# pwd/root</code></pre><h2 id="二-文档编辑"><a href="#二-文档编辑" class="headerlink" title="二.文档编辑"></a>二.文档编辑</h2><h3 id="1-cat命令-–-在终端设备上显示文件内容"><a href="#1-cat命令-–-在终端设备上显示文件内容" class="headerlink" title="1.cat命令 – 在终端设备上显示文件内容"></a>1.cat命令 – 在终端设备上显示文件内容</h3><p>​    cat命令来自于英文单词concatenate的缩写，其功能是用于查看文件内容。在Linux系统中有很多用于查看文件内容的命令，例如more、tail、head……等等，每个命令都有各自的特点。cat命令适合查看内容较少的、纯文本的文件。</p><p>​    对于内容较多的文件，使用cat命令查看后会在屏幕上快速滚屏，用户往往看不清所显示的具体内容，只好按Ctrl+c键中断命令的执行，所以对于大文件，干脆用more命令吧~</p><p>​    <strong>语法格式：</strong>cat [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">显示行数（空行也编号）</td></tr><tr><td align="center">-s</td><td align="center">显示行数（多个空行算一个编号）</td></tr><tr><td align="center">-b</td><td align="center">显示行数（空行不编号）</td></tr><tr><td align="center">-E</td><td align="center">每行结束处显示$符号</td></tr><tr><td align="center">-T</td><td align="center">将TAB字符显示为 ^I符号</td></tr><tr><td align="center">-v</td><td align="center">使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</td></tr><tr><td align="center">-e</td><td align="center">等价于”-vE”组合</td></tr><tr><td align="center">-t</td><td align="center">等价于”-vT”组合</td></tr><tr><td align="center">-A</td><td align="center">等价于 -vET组合</td></tr><tr><td align="center">–help</td><td align="center">显示帮助信息</td></tr><tr><td align="center">–version</td><td align="center">显示版本信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查看某个文件的内容：</p><pre><code>[root@linuxcool ~]# cat anaconda-ks.cfg#version=RHEL8ignoredisk --only-use=sdaautopart --type=lvm# Partition clearing information………………省略部分输出信息………………</code></pre><p>​    查看某个文件的内容，并显示行号：</p><pre><code>[root@linuxcool ~]# cat -n anaconda-ks.cfg     1    #version=RHEL8     2    ignoredisk --only-use=sda     3    autopart --type=lvm     4    # Partition clearing information     5    clearpart --none --initlabel     6    # Use graphical install………………省略部分输出信息………………</code></pre><p>​    搭配空设备文件和输出重定向操作符，将某个文件内容清空：</p><pre><code>[root@linuxcool ~]# cat /dev/null &gt; anaconda-ks.cfg [root@linuxcool ~]# cat anaconda-ks.cfg [root@linuxcool ~]# </code></pre><p>​    持续写入文件内容，直到碰到EOF符后才会结束并保存：</p><pre><code>[root@linuxcool ~]# cat &gt; anaconda-ks.cfg &lt;&lt; EOF&gt; Hello,World&gt; Linux!~&gt; EOF[root@linuxcool ~]# cat anaconda-ks.cfg Hello,WorldLinux!~</code></pre><p>​    搭配输出重定向操作符，将光盘设备制作成镜像文件：</p><pre><code>[root@linuxcool ~]# cat /dev/cdrom &gt; rhel.iso[root@linuxcool ~]# ls rhel.iso  -lh-rw-r--r--. 1 root root 6.7G May  2 00:43 rhel.iso[root@linuxcool ~]# file rhel.iso rhel.iso: DOS/MBR boot sector; partition 2 : ID=0xef, start-CHS (0x3ff,254,63), end-CHS (0x3ff,254,63), startsector 23128, 19888 sectors</code></pre><h3 id="2-echo命令-–-输出字符串或提取后的变量值"><a href="#2-echo命令-–-输出字符串或提取后的变量值" class="headerlink" title="2.echo命令 – 输出字符串或提取后的变量值"></a>2.echo命令 – 输出字符串或提取后的变量值</h3><p>​    echo是用于在终端设备上输出指定字符串或变量提取后值的命令，能够给用户一些简单的提醒信息，也可以将输出的指定字符串内容同管道符一起传递给后续命令作为标准输入信息再来进行二次处理，又或者同输出重定向符一起操作，将信息直接写入到文件中。</p><p>​    如需提取变量值，需在变量名称前加入$符号做提取，变量名称一般均为大写形式。</p><p>​    <strong>语法格式：</strong>echo [参数] 字符串/变量</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">不输出结尾的换行符</td></tr><tr><td align="center">-e “\a”</td><td align="center">发出警告音</td></tr><tr><td align="center">-e “\b”</td><td align="center">删除前面的一个字符</td></tr><tr><td align="center">-e “\c”</td><td align="center">结尾不加换行符</td></tr><tr><td align="center">-e “\f”</td><td align="center">换行，光标扔停留在原来的坐标位置</td></tr><tr><td align="center">-e “\n”</td><td align="center">换行，光标移至行首</td></tr><tr><td align="center">-e “\r”</td><td align="center">光标移至行首，但不换行</td></tr><tr><td align="center">-E</td><td align="center">禁止反斜杠转移，与-e参数功能相反</td></tr><tr><td align="center">—version</td><td align="center">查看版本信息</td></tr><tr><td align="center">–help</td><td align="center">查看帮助信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    输出指定字符串到终端设备界面（默认为电脑屏幕）：</p><pre><code>[root@linuxcool ~]# echo LinuxCoolLinuxCool</code></pre><p>​    输出某个变量值内容：</p><pre><code>[root@linuxcool ~]# echo $PATH/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/root/bin</code></pre><p>​    搭配转义符一起使用，输出纯字符串内容：</p><pre><code>[root@linuxcool ~]# echo \$PATH$PATH</code></pre><p>​    搭配输出重定向符一起使用，将字符串内容直接写入文件中：</p><pre><code>[root@linuxcool ~]# echo &quot;Hello World&quot; &gt; Document</code></pre><p>​    搭配反引号执行命令，并将执行结果输出：</p><pre><code>[root@linuxcool ~]# echo `uptime`16:16:12 up 52 min, 1 user, load average: 0.00, 0.00, 0.00</code></pre><p>​    输出带有换行符的内容：</p><pre><code>[root@linuxcool ~]# echo -e &quot;First\nSecond\nThird&quot;FirstSecondThird</code></pre><p>​    指定删除字符串中某些字符，随后将内容输出</p><pre><code>[root@linuxcool ~]# echo -e &quot;123\b456&quot; 12456</code></pre><h3 id="3-rm命令-–-删除文件或目录"><a href="#3-rm命令-–-删除文件或目录" class="headerlink" title="3.rm命令 – 删除文件或目录"></a>3.rm命令 – 删除文件或目录</h3><p>​    rm命令来自于英文单词remove的缩写，其功能是用于删除文件或目录，一次可以删除多个文件，或递归删除目录及其内的所有子文件。</p><p>​    rm也是一个很危险的命令，使用的时候要特别当心，尤其对于新手更要格外注意，如执行rm -rf /*命令则会清空系统中所有的文件，甚至无法恢复回来。所以我们在执行之前一定要再次确认下在哪个目录中，到底要删除什么文件，考虑好后再敲击回车，时刻保持清醒的头脑。</p><p>​    <strong>语法格式：</strong>rm [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制删除（不二次询问）</td></tr><tr><td align="center">-i</td><td align="center">删除前会询问用户是否操作</td></tr><tr><td align="center">-r/R</td><td align="center">递归删除</td></tr><tr><td align="center">-v</td><td align="center">显示指令的详细执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    删除某个文件，默认会进行二次确认，敲击y进行确认。</p><pre><code>[root@linuxcool ~]# rm anaconda-ks.cfg rm: remove regular file &#39;anaconda-ks.cfg&#39;? y</code></pre><p>​    删除某个文件，强制操作不需要二次确认：</p><pre><code>[root@linuxcool ~]# rm -f initial-setup-ks.cfg </code></pre><p>​    删除某个目录及其内的子文件或子目录，一并都强制删除：</p><pre><code>[root@linuxcool ~]# rm -rf Documents</code></pre><p>​    强制删除当前工作目录内的所有以.txt为后缀的文件</p><pre><code>root@linuxcool ~]# rm -f *.txt</code></pre><p>​    强制清空服务器系统内的所有文件：</p><pre><code>root@linuxcool ~]# rm -f *.txt</code></pre><h3 id="4-tail命令-–-查看文件尾部内容"><a href="#4-tail命令-–-查看文件尾部内容" class="headerlink" title="4.tail命令 – 查看文件尾部内容"></a>4.tail命令 – 查看文件尾部内容</h3><p>​    tail命令的功能是用于查看文件尾部内容，例如默认会在终端界面上显示出指定文件的末尾十行，如果指定了多个文件，则会在显示的每个文件内容前面加上文件名来加以区分。</p><p>​    高阶玩法的-f参数作用是持续显示文件的尾部最新内容，类似于机场候机厅的大屏幕，总会把最新的消息展示给用户，对阅读日志文件尤为适合，而不需要手动刷新。</p><p>​    <strong>语法格式：</strong>tail [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">输出文件尾部的N（N为整数）个字节内容</td></tr><tr><td align="center">-f</td><td align="center">持续显示文件最新追加的内容</td></tr><tr><td align="center">-F <n></n></td><td align="center">与选项“-follow=name”和“–retry”连用时功能相同</td></tr><tr><td align="center">-n <n></n></td><td align="center">输出文件的尾部N（N位数字）行内容</td></tr><tr><td align="center">–retry</td><td align="center">即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。</td></tr><tr><td align="center">–pid=&lt;进程号&gt;</td><td align="center">与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令</td></tr><tr><td align="center">–help</td><td align="center">显示指令的帮助信息</td></tr><tr><td align="center">–version</td><td align="center">显示指令的版本信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    默认显示某个文件尾部的后10行内容：</p><pre><code>[root@linuxcool ~]# tail initial-setup-ks.cfg %addon com_redhat_subscription_manager %end%addon ADDON_placeholder --disable --reserve-mb=auto%end%anacondapwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notemptypwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyokpwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty%end</code></pre><p>​    指定显示某个文件尾部的后5行内容：</p><pre><code>[root@linuxcool ~]# tail -n 5 initial-setup-ks.cfg %anacondapwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notemptypwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyokpwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty%end</code></pre><p>​    指定显示某个文件尾部的后15个字节：</p><pre><code>[root@linuxcool ~]# tail -c 30 initial-setup-ks.cfg t --nochanges --notempty%end</code></pre><p>​    持续刷新显示某个文件尾部的后10行内容：</p><pre><code>[root@linuxcool ~]# tail -f /var/log/messages………………省略输出信息………………</code></pre><h3 id="5-grep命令-–-强大的文本搜索工具"><a href="#5-grep命令-–-强大的文本搜索工具" class="headerlink" title="5.grep命令 – 强大的文本搜索工具"></a>5.grep命令 – 强大的文本搜索工具</h3><p>​    grep来自于英文词组“global search regular expression and print out the line”的缩写，意思是用于全面搜索的正则表达式，并将结果输出。人们通常会将grep命令与正则表达式搭配使用，参数作为搜索过程中的补充或对输出结果的筛选，命令模式十分灵活。</p><p>​    与之容易混淆的是egrep命令和fgrep命令。如果把grep命令当作是标准搜索命令，那么egrep则是扩展搜索命令，等价于“grep -E”命令，支持扩展的正则表达式。而fgrep则是快速搜索命令，等价于“grep -F”命令，不支持正则表达式，直接按照字符串内容进行匹配。</p><p>​    <strong>语法格式：</strong> grep [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-i</th><th align="center">忽略大小写</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">只输出匹配行的数量</td></tr><tr><td align="center">-l</td><td align="center">只列出符合匹配的文件名，不列出具体的匹配行</td></tr><tr><td align="center">-n</td><td align="center">列出所有的匹配行，显示行号</td></tr><tr><td align="center">-h</td><td align="center">查询多文件时不显示文件名</td></tr><tr><td align="center">-s</td><td align="center">不显示不存在、没有匹配文本的错误信息</td></tr><tr><td align="center">-v</td><td align="center">显示不包含匹配文本的所有行</td></tr><tr><td align="center">-w</td><td align="center">匹配整词</td></tr><tr><td align="center">-x</td><td align="center">匹配整行</td></tr><tr><td align="center">-r</td><td align="center">递归搜索</td></tr><tr><td align="center">-q</td><td align="center">禁止输出任何结果，已退出状态表示搜索是否成功</td></tr><tr><td align="center">-b</td><td align="center">打印匹配行距文件头部的偏移量，以字节为单位</td></tr><tr><td align="center">-o</td><td align="center">与-b结合使用，打印匹配的词据文件头部的偏移量，以字节为单位</td></tr><tr><td align="center">-F</td><td align="center">匹配固定字符串的内容</td></tr><tr><td align="center">-E</td><td align="center">支持扩展的正则表达式</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    搜索某个文件中，包含某个关键词的内容：</p><pre><code>[root@linuxcool ~]# grep root /etc/passwdroot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin</code></pre><p>​    搜索某个文件中，以某个关键词开头的内容：</p><pre><code>[root@linuxcool ~]# grep ^root /etc/passwdroot:x:0:0:root:/root:/bin/bash</code></pre><p>​    搜索多个文件中，包含某个关键词的内容：</p><pre><code>[root@linuxcool ~]# grep linuxprobe /etc/passwd /etc/shadow/etc/passwd:linuxprobe:x:1000:1000:linuxprobe:/home/linuxprobe:/bin/bash/etc/shadow:linuxprobe:$6$9Av/41hCM17T2PrT$hoggWJ3J/j6IqEOSp62elhdOYPLhQ1qDho7hANcm5fQkPCQdib8KCWGdvxbRvDmqyOarKpWGxd8NAmp3j2Ln00::0:99999:7:::</code></pre><p>​    搜索多个文件中，包含某个关键词的内容，不显示文件名称：</p><pre><code>[root@linuxcool ~]# grep -h linuxprobe /etc/passwd /etc/shadowlinuxprobe:x:1000:1000:linuxprobe:/home/linuxprobe:/bin/bashlinuxprobe:$6$9Av/41hCM17T2PrT$hoggWJ3J/j6IqEOSp62elhdOYPLhQ1qDho7hANcm5fQkPCQdib8KCWGdvxbRvDmqyOarKpWGxd8NAmp3j2Ln00::0:99999:7:::</code></pre><p>​    输出在某个文件中，包含某个关键词行的数量：</p><pre><code>[root@linuxcool ~]# grep -c root /etc/passwd /etc/shadow/etc/passwd:2/etc/shadow:1</code></pre><p>​    搜索某个文件中，包含某个关键词位置的行号及内容：</p><pre><code>[root@linuxcool ~]# grep -n network anaconda-ks.cfg 17:network  --bootproto=static --device=ens160 --ip=192.168.10.10 --netmask=255.255.255.0 --onboot=off --ipv6=auto --activate18:network  --hostname=linuxcool.com</code></pre><p>​    搜索某个文件中，不包含某个关键词的内容：</p><pre><code>[root@linuxcool ~]# grep -v nologin /etc/passwdroot:x:0:0:root:/root:/bin/bashsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltlinuxprobe:x:1000:1000:linuxprobe:/home/linuxprobe:/bin/bash</code></pre><p>​    搜索当前工作目录中，包含某个关键词内容的文件，未找到则提示：</p><pre><code>[root@linuxcool ~]# grep -l root *anaconda-ks.cfggrep: Desktop: Is a directorygrep: Documents: Is a directorygrep: Downloads: Is a directoryinitial-setup-ks.cfggrep: Music: Is a directorygrep: Pictures: Is a directorygrep: Public: Is a directorygrep: Templates: Is a directorygrep: Videos: Is a directory</code></pre><p>​    搜索当前工作目录中，包含某个关键词内容的文件，未找到不提示：</p><pre><code>[root@linuxcool ~]# grep -sl root *anaconda-ks.cfginitial-setup-ks.cfg</code></pre><p>​    递归搜索，不仅搜索指定目录，还搜索其内子目录内是否有关键词文件：</p><pre><code>[root@linuxcool ~]# grep -srl root /etc/etc/fstab/etc/X11/xinit/Xclients/etc/X11/xinit/xinitrc/etc/libreport/events.d/collect_dnf.conf/etc/libreport/events.d/bugzilla_anaconda_event.conf/etc/libreport/forbidden_words.conf………………省略部分输出信息………………</code></pre><p>​    搜索某个文件中，精准匹配到某个关键词的内容（搜索词应与整行内容完全一样才会显示，有别于一般搜索）：</p><pre><code>[root@linuxcool ~]# grep -x cd anaconda-ks.cfg [root@linuxcool ~]# grep -x cdrom anaconda-ks.cfg cdrom</code></pre><p>​    判断某个文件中，是否包含某个关键词，通过返回状态值输出结果（0为包含，1为不包含），方便在Shell脚本中判断和调用：</p><pre><code>[root@linuxcool ~]# grep -q linuxprobe anaconda-ks.cfg [root@linuxcool ~]# echo $?0[root@linuxcool ~]# grep -q linuxcool anaconda-ks.cfg [root@linuxcool ~]# echo $?1</code></pre><p>​    搜索某个文件中，空行的数量：</p><pre><code>[root@linuxcool ~]# grep -c ^$ anaconda-ks.cfg 6</code></pre><h2 id="三-系统管理"><a href="#三-系统管理" class="headerlink" title="三.系统管理"></a>三.系统管理</h2><h3 id="1-find命令-–-根据路径和条件搜索指定文件"><a href="#1-find命令-–-根据路径和条件搜索指定文件" class="headerlink" title="1.find命令 – 根据路径和条件搜索指定文件"></a>1.find命令 – 根据路径和条件搜索指定文件</h3><p>​    find命令的功能是根据给定的路径和条件查找相关文件或目录，可以使用的参数很多，并且支持正则表达式，结合管道符后能够实现更加复杂的功能，是系统管理员和普通用户日常工作必须掌握的命令之一。</p><p>​    find命令通常进行的是从根目录（/）开始的全盘搜索，有别于whereis、which、locate……等等的有条件或部分文件的搜索。对于服务器负载较高的情况，建议不要在高峰时期使用find命令的模糊搜索，会相对消耗较多的系统资源。</p><p>​    <strong>语法格式</strong>：find [路径] [参数]</p><p>​    <strong>常用参数</strong>：</p><table><thead><tr><th align="center">-name</th><th align="center">匹配名称</th></tr></thead><tbody><tr><td align="center">-perm</td><td align="center">匹配权限（mode为完全匹配，-mode为包含即可）</td></tr><tr><td align="center">-user</td><td align="center">匹配所有者</td></tr><tr><td align="center">-group</td><td align="center">匹配所有组</td></tr><tr><td align="center">-mtime -n +n</td><td align="center">匹配修改内容的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td align="center">-atime -n +n</td><td align="center">匹配访问文件的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td align="center">-ctime -n +n</td><td align="center">匹配修改文件权限的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td align="center">-nouser</td><td align="center">匹配无所有者的文件</td></tr><tr><td align="center">-nogroup</td><td align="center">匹配无所有组的文件</td></tr><tr><td align="center">-newer f1 !f2</td><td align="center">匹配比文件f1新但比f2旧的文件</td></tr><tr><td align="center">-type b/d/c/p/l/f</td><td align="center">匹配文件类型（后面的字幕字母依次表示块设备、目录、字符设备、管道、链接文件、文本文件）</td></tr><tr><td align="center">-size</td><td align="center">匹配文件的大小（+50KB为查找超过50KB的文件，而-50KB为查找小于50KB的文件）</td></tr><tr><td align="center">-prune</td><td align="center">忽略某个目录</td></tr><tr><td align="center">-exec …… {};</td><td align="center">后面可跟用于进一步处理搜索结果的命令</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    全盘搜索系统中所有以.conf结尾的文件：</p><pre><code>[root@linuxcool ~]# find / -name *.conf/run/tmpfiles.d/kmod.conf/etc/resolv.conf/etc/dnf/dnf.conf/etc/dnf/plugins/copr.conf/etc/dnf/plugins/debuginfo-install.conf/etc/dnf/plugins/product-id.conf/etc/dnf/plugins/subscription-manager.conf………………省略部分输出信息………………</code></pre><p>​    在/etc目录中搜索所有大约1M大小的文件：</p><pre><code>[root@linuxcool ~]# find /etc -size +1M/etc/selinux/targeted/policy/policy.31/etc/udev/hwdb.bin</code></pre><p>​    在/home目录中搜索所有属于指定用户的文件：</p><pre><code>[root@linuxcool ~]# find /home -user linuxprobe/home/linuxprobe/home/linuxprobe/.mozilla/home/linuxprobe/.mozilla/extensions/home/linuxprobe/.mozilla/plugins/home/linuxprobe/.bash_logout/home/linuxprobe/.bash_profile/home/linuxprobe/.bashrc</code></pre><p>​    列出当前工作目录中的所有文件、目录以及子文件信息：</p><pre><code>[root@linuxcool ~]# find .../.bash_logout./.bash_profile./.bashrc./.cshrc./.tcshrc./anaconda-ks.cfg………………省略部分输出信息………………</code></pre><p>​    在/var/log目录下搜索所有指定后缀的文件，后缀不需要大小写。</p><pre><code>[root@linuxcool ~]# find /var/log -iname &quot;*.log&quot;/var/log/audit/audit.log/var/log/rhsm/rhsmcertd.log/var/log/rhsm/rhsm.log/var/log/sssd/sssd.log/var/log/sssd/sssd_implicit_files.log/var/log/sssd/sssd_nss.log/var/log/sssd/sssd_kcm.log/var/log/tuned/tuned.log/var/log/anaconda/anaconda.log/var/log/anaconda/X.log………………省略部分输出信息………………</code></pre><p>​    在/var/log目录下搜索所有后缀不是.log的文件：</p><pre><code>[root@linuxcool ~]# find /var/log ! -name &quot;*.log&quot;/var/log/var/log/lastlog/var/log/README/var/log/private/var/log/wtmp/var/log/btmp/var/log/samba</code></pre><p>​    搜索当前工作目录中的所有近7天被修改过的文件：</p><pre><code>[root@linuxcool ~]# find . -mtime +7./.bash_logout./.bash_profile./.bashrc./.cshrc./.tcshrc………………省略部分输出信息………………</code></pre><p>​    全盘搜索系统中所有类型为目录，且权限为1777的目录文件：</p><pre><code>[root@linuxcool ~]# find / -type d -perm 1777/dev/mqueue/dev/shm/var/tmp/tmp………………省略部分输出信息………………</code></pre><p>​    全盘搜索系统中所有类型为普通文件，且可以执行的文件信息：</p><pre><code>[root@linuxcool ~]# find / -type f -perm /a=x /boot/vmlinuz-4.18.0-80.el8.x86_64/boot/vmlinuz-0-rescue-c8b04558503242459d908c6c22a2d481/etc/X11/xinit/xinitrc.d/50-systemd-user.sh/etc/X11/xinit/xinitrc.d/00-start-message-bus.sh/etc/X11/xinit/xinitrc.d/localuser.sh/etc/X11/xinit/Xclients/etc/X11/xinit/Xsession/etc/X11/xinit/xinitrc………………省略部分输出信息………………</code></pre><p>​    全盘搜索系统中所有后缀为.mp4的文件，并删除所有查找到的文件：</p><pre><code>[root@linuxcool ~]# find / -name &quot;*.mp4&quot; -exec rm -rf {} \;</code></pre><h3 id="2-rpm命令-–-RPM软件包管理器"><a href="#2-rpm命令-–-RPM软件包管理器" class="headerlink" title="2.rpm命令 – RPM软件包管理器"></a>2.rpm命令 – RPM软件包管理器</h3><p>​    rpm命令来自于英文词组”RedHat Package Manager“的缩写，中文译为红帽软件包管理器，其功能是用于在Linux系统下对软件包进行安装、卸载、查询、验证、升级等工作。</p><p>​    <strong>语法格式：</strong>rpm [参数] 软件包</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">查询所有的软件包</th></tr></thead><tbody><tr><td align="center">-b或-t</td><td align="center">设置包装套件的完成阶段，并指定套件档的文件名称；</td></tr><tr><td align="center">-c</td><td align="center">只列出组态配置文件，本参数需配合”-l”参数使用</td></tr><tr><td align="center">-d</td><td align="center">只列出文本文件，本参数需配合”-l”参数使用</td></tr><tr><td align="center">-e</td><td align="center">卸载软件包</td></tr><tr><td align="center">-f</td><td align="center">查询文件或命令属于哪个软件包</td></tr><tr><td align="center">-h</td><td align="center">安装软件包时列出标记</td></tr><tr><td align="center">-i</td><td align="center">安装软件包</td></tr><tr><td align="center">-l</td><td align="center">显示软件包的文件列表</td></tr><tr><td align="center">-p</td><td align="center">查询指定的rpm软件包</td></tr><tr><td align="center">-q</td><td align="center">查询软件包</td></tr><tr><td align="center">-R</td><td align="center">显示软件包的依赖关系</td></tr><tr><td align="center">-s</td><td align="center">显示文件状态，本参数需配合”-l”参数使用</td></tr><tr><td align="center">-U</td><td align="center">升级软件包</td></tr><tr><td align="center">-v</td><td align="center">显示命令执行过程</td></tr><tr><td align="center">-vv</td><td align="center">详细显示指令执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    正常安装软件包：</p><pre><code>[root@linuxcool ~]# rpm -ivh cockpit-185-2.el8.x86_64.rpm Verifying...                          ################################# [100%]Preparing...                          ################################# [100%]    package cockpit-185-2.el8.x86_64 is already installed</code></pre><p>显示系统已安装过的全部RPM软件包：</p><pre><code>[root@linuxcool ~]# rpm -qaqemu-kvm-block-gluster-2.12.0-63.module+el8+2833+c7d6d092.x86_64boost-atomic-1.66.0-6.el8.x86_64gnome-session-wayland-session-3.28.1-6.el8.x86_64grub2-tools-2.02-66.el8.x86_64lohit-gurmukhi-fonts-2.91.2-3.el8.noarchliberation-fonts-common-2.00.3-4.el8.noarchpolicycoreutils-python-utils-2.8-16.1.el8.noarch………………省略部分输出信息………………</code></pre><p>​    查询某个软件的安装路径：</p><pre><code>[root@linuxcool ~]# rpm -ql cockpit/usr/share/cockpit/usr/share/doc/cockpit/AUTHORS/usr/share/doc/cockpit/COPYING/usr/share/doc/cockpit/README.md/usr/share/man/man1/cockpit.1.gz/usr/share/metainfo/cockpit.appdata.xml/usr/share/pixmaps/cockpit.png</code></pre><p>​    卸载某个通过RPM软件包安装的服务：</p><pre><code>[root@linuxcool ~]# rpm -evh cockpitPreparing...                          ################################# [100%]Cleaning up / removing...   1:cockpit-185-2.el8                ################################# [100%]</code></pre><p>​    升级某个软件包：</p><pre><code>[root@linuxcool ~]# rpm -Uvh cockpit-185-2.el8.x86_64.rpm Verifying...                          ################################# [100%]Preparing...                          ################################# [100%]Updating / installing...   1:cockpit-185-2.el8                ################################# [100%]</code></pre><h3 id="3-startx命令-–-初始化X-windows系统"><a href="#3-startx命令-–-初始化X-windows系统" class="headerlink" title="3.startx命令 – 初始化X-windows系统"></a>3.startx命令 – 初始化X-windows系统</h3><p>​    startx命令来自于英文词组”start X-windows“的缩写，其功能是用于启动X-Windows系统。X-Windows System也被称为X或X11，中文译为X窗口系统，主要工作就是以图形方式显示软件窗口的系统，现在的GNOME和KDE桌面环境都是以X窗口系统为基础构建成的。</p><p>​    <strong>语法格式：</strong>startx [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th>— -depth &lt;数字&gt;</th><th>指定颜色深度</th></tr></thead><tbody><tr><td>-m</td><td>当未找到启动脚本时，启动窗口管理器</td></tr><tr><td>-r</td><td>当未找到启动脚本时，装入资源文件</td></tr><tr><td>-w</td><td>强制启动</td></tr><tr><td>-x</td><td>使用startup脚本启动X-windows会话</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    以默认方式初始化启动X窗口系统：</p><pre><code>[root@linuxcool ~]# startxX.Org X Server 1.20.3X Protocol Version 11, Revision 0Build Operating System:  4.14.0-49.el7a.noaead.x86_64 Current Operating System: Linux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64………………省略部分输出信息………………</code></pre><p>​    指定以16位颜色深度启动X窗口系统：</p><pre><code>[root@linuxcool ~]# startx -- -depth 16X.Org X Server 1.20.3X Protocol Version 11, Revision 0Build Operating System:  4.14.0-49.el7a.noaead.x86_64 Current Operating System: Linux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64………………省略部分输出信息………………</code></pre><p>​    强制启动X窗口系统：</p><pre><code>[root@linuxcool ~]# startx -wX.Org X Server 1.20.3X Protocol Version 11, Revision 0Build Operating System:  4.14.0-49.el7a.noaead.x86_64 Current Operating System: Linux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64………………省略部分输出信息………………</code></pre><h3 id="4-ps命令-–-显示进程状态"><a href="#4-ps命令-–-显示进程状态" class="headerlink" title="4.ps命令 – 显示进程状态"></a>4.ps命令 – 显示进程状态</h3><p>​    ps命令来自于英文词组”process status“的缩写，其功能是用于显示当前系统的进程状态。使用ps命令可以查看到进程的所有信息，例如进程的号码、发起者、系统资源使用占比（处理器与内存）、运行状态等等。帮助我们及时的发现哪些进程出现”僵死“或”不可中断“等异常情况。</p><p>经常会与kill命令搭配使用来中断和删除不必要的服务进程，避免服务器的资源浪费。</p><p>​    <strong>语法格式：</strong>ps [参数]</p><p>​    <strong>常用参数：</strong>﻿</p><table><thead><tr><th align="center">a</th><th align="center">显示现行终端机下的所有程序，包括其他用户的程序</th></tr></thead><tbody><tr><td align="center">-A</td><td align="center">显示所有程序</td></tr><tr><td align="center">c</td><td align="center">显示每个程序真正的指令名称，而不包含路径</td></tr><tr><td align="center">-C &lt;指令名称&gt;</td><td align="center">指定执行指令的名称，并列出该指令的程序的状况</td></tr><tr><td align="center">-d</td><td align="center">显示所有程序，但不包括阶段作业管理员的程序</td></tr><tr><td align="center">e</td><td align="center">列出程序时，显示每个程序所使用的环境变量</td></tr><tr><td align="center">-f</td><td align="center">显示UID,PPIP,C与STIME栏位</td></tr><tr><td align="center">f</td><td align="center">用ASCII字符显示树状结构，表达程序间的相互关系</td></tr><tr><td align="center">g</td><td align="center">显示现行终端机下的所有程序，包括所属组的程序</td></tr><tr><td align="center">-G &lt;群组识别码&gt;</td><td align="center">列出属于该群组的程序的状况</td></tr><tr><td align="center">h</td><td align="center">不显示标题列</td></tr><tr><td align="center">-H</td><td align="center">显示树状结构，表示程序间的相互关系</td></tr><tr><td align="center">-j</td><td align="center">采用工作控制的格式显示程序状况</td></tr><tr><td align="center">-l</td><td align="center">采用详细的格式来显示程序状况</td></tr><tr><td align="center">L</td><td align="center">列出栏位的相关信息</td></tr><tr><td align="center">-m</td><td align="center">显示所有的执行绪</td></tr><tr><td align="center">n</td><td align="center">以数字来表示USER和WCHAN栏位</td></tr><tr><td align="center">-N</td><td align="center">显示所有的程序，除了执行ps指令终端机下的程序之外</td></tr><tr><td align="center">-p &lt;程序识别码&gt;</td><td align="center">指定程序识别码，并列出该程序的状况</td></tr><tr><td align="center">r</td><td align="center">只列出现行终端机正在执行中的程序</td></tr><tr><td align="center">-s &lt;阶段作业&gt;</td><td align="center">列出隶属该阶段作业的程序的状况</td></tr><tr><td align="center">s</td><td align="center">采用程序信号的格式显示程序状况</td></tr><tr><td align="center">S</td><td align="center">列出程序时，包括已中断的子程序资料</td></tr><tr><td align="center">-t &lt;终端机编号&gt;</td><td align="center">列出属于该终端机的程序的状况</td></tr><tr><td align="center">-T</td><td align="center">显示现行终端机下的所有程序</td></tr><tr><td align="center">u</td><td align="center">以用户为主的格式来显示程序状况</td></tr><tr><td align="center">-U &lt;用户识别码&gt;</td><td align="center">列出属于该用户的程序的状况</td></tr><tr><td align="center">U &lt;用户名称&gt;</td><td align="center">列出属于该用户的程序的状况</td></tr><tr><td align="center">v</td><td align="center">采用虚拟内存的格式显示程序状况</td></tr><tr><td align="center">-V或V</td><td align="center">显示版本信息</td></tr><tr><td align="center">-w或w</td><td align="center">采用宽阔的格式来显示程序状况</td></tr><tr><td align="center">x</td><td align="center">显示所有程序，不以终端机来区分</td></tr><tr><td align="center">X</td><td align="center">采用旧式的Linux i386登陆格式显示程序状况</td></tr><tr><td align="center">-y</td><td align="center">配合选项”-l”使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位</td></tr><tr><td align="center">–cols &lt;每列字符数&gt;</td><td align="center">设置每列的最大字符数</td></tr><tr><td align="center">–headers</td><td align="center">重复显示标题列</td></tr><tr><td align="center">–help</td><td align="center">在线帮助</td></tr><tr><td align="center">–info</td><td align="center">显示排错信息</td></tr><tr><td align="center">–lines &lt;显示列数&gt;</td><td align="center">设置显示画面的列数</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统中全部的进程信息，含详细信息：</p><pre><code>[root@linuxcool ~]# ps aux USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot          2  0.0  0.0      0     0 ?        S    20:05   0:00 [kthreadd]root          3  0.0  0.0      0     0 ?        I&lt;   20:05   0:00 [rcu_gp]root          4  0.0  0.0      0     0 ?        I&lt;   20:05   0:00 [rcu_par_gp]………………省略部分输出信息………………</code></pre><p>​    结合输出重定向，将当前进程信息保留备份至指定文件：</p><pre><code>[root@linuxcool ~]# ps aux &gt; backup.txt</code></pre><p>​    结合管道操作符，将当前系统运行状态中指定进程信息过滤出来：</p><pre><code>[root@linuxcool ~]# ps -ef | grep ssh………………省略输出信息………………</code></pre><p>​    结合管道操作符，将当前系统运行状态中指定用户的进程信息过滤出来：</p><pre><code>[root@linuxcool ~]# ps -u root   PID TTY          TIME CMD     1 ?        00:00:01 systemd     2 ?        00:00:00 kthreadd     3 ?        00:00:00 rcu_gp     4 ?        00:00:00 rcu_par_gp………………省略部分输出信息………………</code></pre><p>​    结合管道操作符与sort命令，依据处理器使用量（第三列）情况降序排序：</p><pre><code>[root@linuxcool ~]# ps aux | sort -rnk 3USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot       2341  0.4  8.1 4504040 164896 tty2   Sl+  20:05   0:24 /usr/bin/gnome-shellroot       4534  0.3  0.4 220064  8520 ?        Ssl  21:37   0:00 /usr/libexec/nm-dispatchergdm        1541  0.1  7.3 4211428 147400 tty1   Sl+  20:05   0:06 /usr/bin/gnome-shell………………省略部分输出信息………………</code></pre><p>​    结合管道操作符与sort命令，依据内存使用量（第四列）情况降序排序：</p><pre><code>[root@linuxcool ~]# ps aux | sort -rnk 4USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot       2341  0.4  8.1 4503976 164828 tty2   Sl+  20:05   0:27 /usr/bin/gnome-shellgdm        1541  0.1  7.3 4211428 147556 tty1   Sl+  20:05   0:08 /usr/bin/gnome-shellroot       2661  0.0  3.1 1271636 63004 tty2    Sl+  20:05   0:01 /usr/bin/gnome-software --gapplication-service………………省略部分输出信息………………</code></pre><h3 id="5-uname命令-–-显示系统内核信息"><a href="#5-uname命令-–-显示系统内核信息" class="headerlink" title="5.uname命令 – 显示系统内核信息"></a>5.uname命令 – 显示系统内核信息</h3><p>​    uname命令来自于英文词组”Unix name“的缩写，其功能是用于查看系统主机名、内核及硬件架构等信息。如果不加任何参数，默认仅显示系统内核名称，相当于-s参数。</p><p>​    <strong>语法格式：</strong>uname [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示系统所有相关信息</th></tr></thead><tbody><tr><td align="center">-m</td><td align="center">显示计算机硬件架构</td></tr><tr><td align="center">-n</td><td align="center">显示主机名称</td></tr><tr><td align="center">-r</td><td align="center">显示内核发行版本号</td></tr><tr><td align="center">-s</td><td align="center">显示内核名称</td></tr><tr><td align="center">-v</td><td align="center">显示内核版本</td></tr><tr><td align="center">-p</td><td align="center">显示主机处理器类型</td></tr><tr><td align="center">-o</td><td align="center">显示操作系统名称</td></tr><tr><td align="center">-i</td><td align="center">显示硬件平台</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统内核名称：</p><pre><code>[root@linuxcool ~]# unameLinux</code></pre><p>​    显示系统所有相关信息（含内核名称、主机名、版本号及硬件架构）：</p><pre><code>[root@linuxcool ~]# uname -aLinux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</code></pre><p>​    显示系统内核版本号：</p><pre><code>[root@linuxcool ~]# uname -r 4.18.0-80.el8.x86_64</code></pre><p>​    现在系统硬件架构：</p><pre><code>[root@linuxcool ~]# uname -ix86_64</code></pre><h2 id="五-磁盘管理"><a href="#五-磁盘管理" class="headerlink" title="五.磁盘管理"></a>五.磁盘管理</h2><h3 id="1-df命令-–-显示磁盘空间使用情况"><a href="#1-df命令-–-显示磁盘空间使用情况" class="headerlink" title="1.df命令 – 显示磁盘空间使用情况"></a>1.df命令 – 显示磁盘空间使用情况</h3><p>​    df命令来自于英文词组”Disk Free“的缩写，其功能是用于显示系统上磁盘空间的使用量情况。df命令显示的磁盘使用量情况含可用、已有及使用率等信息，默认单位为Kb，建议使用-h参数进行单位换算，毕竟135M比138240Kb更利于阅读对吧~</p><p>​    <strong>语法格式：</strong> df [参数] [对象磁盘/分区]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示所有系统文件</th></tr></thead><tbody><tr><td align="center">-B &lt;块大小&gt;</td><td align="center">指定显示时的块大小</td></tr><tr><td align="center">-h</td><td align="center">以容易阅读的方式显示</td></tr><tr><td align="center">-H</td><td align="center">以1000字节为换算单位来显示</td></tr><tr><td align="center">-i</td><td align="center">显示索引字节信息</td></tr><tr><td align="center">-k</td><td align="center">指定块大小为1KB</td></tr><tr><td align="center">-l</td><td align="center">只显示本地文件系统</td></tr><tr><td align="center">-t &lt;文件系统类型&gt;</td><td align="center">只显示指定类型的文件系统</td></tr><tr><td align="center">-T</td><td align="center">输出时显示文件系统类型</td></tr><tr><td align="center">– -sync</td><td align="center">在取得磁盘使用信息前，先执行sync命令</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    带有容量单位的显示系统全部磁盘使用量情况：</p><pre><code>[root@linuxcool ~]# df -hFilesystem             Size  Used Avail Use% Mounted ondevtmpfs               969M     0  969M   0% /devtmpfs                  984M     0  984M   0% /dev/shmtmpfs                  984M  9.6M  974M   1% /runtmpfs                  984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root   17G  3.9G   14G  23% //dev/sr0               6.7G  6.7G     0 100% /media/cdrom/dev/sda1             1014M  152M  863M  15% /boottmpfs                  197M   16K  197M   1% /run/user/42tmpfs                  197M  3.5M  194M   2% /run/user/0</code></pre><p>​    带有容量单位的显示指定磁盘分区使用量情况：</p><pre><code>[root@linuxcool ~]# df -h /bootFilesystem      Size  Used Avail Use% Mounted on/dev/sda1      1014M  152M  863M  15% /boot</code></pre><p>​    显示系统中所有文件系统格式为xfs的磁盘分区使用量情况：</p><pre><code>[root@linuxcool ~]# df -t xfsFilesystem            1K-blocks    Used Available Use% Mounted on/dev/mapper/rhel-root  17811456 4041320  13770136  23% //dev/sda1               1038336  155556    882780  15% /boot</code></pre><h3 id="2-fdisk命令-–-管理磁盘分区"><a href="#2-fdisk命令-–-管理磁盘分区" class="headerlink" title="2.fdisk命令 – 管理磁盘分区"></a>2.fdisk命令 – 管理磁盘分区</h3><p>​    fdisk命令来自于英文词组“Partition table manipulator for Linux”的缩写，其功能是用于管理磁盘的分区信息。如果一套几百平米的房子内部没有墙壁，虽然看起来会很敞亮，但是各种声音、气味、物品会随意充斥在整个房子内，让人极不舒适，因此需要用墙壁按照功能进行划分，例如卧室、厕所、厨房、阳台等等。</p><p>​    fdisk命令可以用于对磁盘进行分区操作，用户可以根据实际情况进行合理划分，这样后期挂载和使用时会方便很多。</p><p>​    <strong>语法格式：</strong>fdisk [参数] [设备]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-b</th><th align="center">指定每个分区的大小</th></tr></thead><tbody><tr><td align="center">-l</td><td align="center">列出指定的外围设备的分区表状况</td></tr><tr><td align="center">-s</td><td align="center">将指定的分区大小输出到标准输出上，单位为区块</td></tr><tr><td align="center">-u</td><td align="center">搭配”-l”参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址</td></tr><tr><td align="center">-v</td><td align="center">显示版本信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查看当前系统的分区情况：</p><pre><code>[root@linuxcool ~]# fdisk -lDisk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x5f1d8ee5Device     Boot   Start      End  Sectors Size Id Type/dev/sda1  *       2048  2099199  2097152   1G 83 Linux/dev/sda2       2099200 41943039 39843840  19G 8e Linux LVM………………省略部分输出信息………………</code></pre><p>​    管理指定硬盘的分区（过程省略，以《Linux就该这么学》第6章节为准）：</p><pre><code>[root@linuxcool ~]# fdisk /dev/sdaWelcome to fdisk (util-linux 2.32.1).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.Command (m for help): n All space for primary partitions is in use.Command (m for help): m Help:  DOS (MBR)   a   toggle a bootable flag   b   edit nested BSD disklabel   c   toggle the dos compatibility flag  Generic   d   delete a partition   F   list free unpartitioned space   l   list known partition types   n   add a new partition   p   print the partition table   t   change a partition type   v   verify the partition table   i   print information about a partition  Misc   m   print this menu   u   change display/entry units   x   extra functionality (experts only)  Script   I   load disk layout from sfdisk script file   O   dump disk layout to sfdisk script file  Save &amp; Exit   w   write table to disk and exit   q   quit without saving changes  Create a new label   g   create a new empty GPT partition table   G   create a new empty SGI (IRIX) partition table   o   create a new empty DOS partition table   s   create a new empty Sun partition table………………省略部分输出信息………………</code></pre><h3 id="3-lsblk命令-–-查看系统的磁盘使用情况"><a href="#3-lsblk命令-–-查看系统的磁盘使用情况" class="headerlink" title="3.lsblk命令 – 查看系统的磁盘使用情况"></a>3.lsblk命令 – 查看系统的磁盘使用情况</h3><p>​    lsblk命令来自于英文词组”list block“的缩写，其功能是用于查看系统的磁盘使用情况。</p><p>​    <strong>语法格式：</strong>lsblk [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示所有设备</th></tr></thead><tbody><tr><td align="center">-b</td><td align="center">以字节单位显示设备大小</td></tr><tr><td align="center">-d</td><td align="center">不显示 slaves 或 holders</td></tr><tr><td align="center">-e</td><td align="center">排除设备</td></tr><tr><td align="center">-f</td><td align="center">显示文件系统信息</td></tr><tr><td align="center">-h</td><td align="center">显示帮助信息</td></tr><tr><td align="center">-i</td><td align="center">仅使用字符</td></tr><tr><td align="center">-m</td><td align="center">显示权限信息</td></tr><tr><td align="center">-l</td><td align="center">使用列表格式显示</td></tr><tr><td align="center">-n</td><td align="center">不显示标题</td></tr><tr><td align="center">-o</td><td align="center">输出列</td></tr><tr><td align="center">-P</td><td align="center">使用key=”value”格式显示</td></tr><tr><td align="center">-r</td><td align="center">使用原始格式显示</td></tr><tr><td align="center">-t</td><td align="center">显示拓扑结构信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统中所有磁盘设备的使用情况信息：</p><pre><code>[root@linuxcool ~]# lsblk -aNAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda             8:0    0   20G  0 disk ├─sda1          8:1    0    1G  0 part /boot└─sda2          8:2    0   19G  0 part   ├─rhel-root 253:0    0   17G  0 lvm  /  └─rhel-swap 253:1    0    2G  0 lvm  [SWAP]sr0            11:0    1  6.6G  0 rom  /media/cdrom</code></pre><p>​    显示系统中磁盘设备的归属及权限信息：</p><pre><code>[root@linuxcool ~]# lsblk -mNAME           SIZE OWNER GROUP MODEsda             20G root  disk  brw-rw----├─sda1           1G root  disk  brw-rw----└─sda2          19G root  disk  brw-rw----  ├─rhel-root   17G root  disk  brw-rw----  └─rhel-swap    2G root  disk  brw-rw----sr0            6.6G root  cdrom brw-rw----</code></pre><p>​    显示系统中所有SCSI类型的磁盘设备信息：</p><pre><code>[root@linuxcool ~]# lsblk -SNAME HCTL       TYPE VENDOR   MODEL             REV TRANsda  2:0:0:0    disk ATA      VMware Virtual S 0001 satasr0  3:0:0:0    rom  NECVMWar VMware SATA CD01 1.00 sata</code></pre><p>​    以列表格式显示磁盘设备信息，并且不显示标题：</p><pre><code>[root@linuxcool ~]# lsblk -nlsda         8:0    0   20G  0 disk sda1        8:1    0    1G  0 part /bootsda2        8:2    0   19G  0 part sr0        11:0    1  6.6G  0 rom  /media/cdromrhel-root 253:0    0   17G  0 lvm  /rhel-swap 253:1    0    2G  0 lvm  [SWAP]</code></pre><h3 id="4-vgextend命令-–-扩展卷组设备"><a href="#4-vgextend命令-–-扩展卷组设备" class="headerlink" title="4.vgextend命令 – 扩展卷组设备"></a>4.vgextend命令 – 扩展卷组设备</h3><p>​    vgextend命令来自于英文词组“volume group extend”的缩写，其功能是用于扩展卷组设备。LVM逻辑卷管理器技术具有灵活调整卷组与逻辑卷的特点，卷组可以在创建时规定物理卷的数量，亦可以在后期使用vgextend命令进行扩展。</p><p>​    <strong>语法格式：</strong>vgextend [参数] 卷组</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-d</th><th align="center">调试模式</th></tr></thead><tbody><tr><td align="center">-t</td><td align="center">仅测试</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    将指定的物理卷加入到卷组设备中：</p><pre><code>[root@linuxcool ~]# vgextend storage /dev/sdb Volume group &quot;storage&quot; successfully extended</code></pre><h3 id="5-hdparm命令-–-显示与设定硬盘参数"><a href="#5-hdparm命令-–-显示与设定硬盘参数" class="headerlink" title="5.hdparm命令 – 显示与设定硬盘参数"></a>5.hdparm命令 – 显示与设定硬盘参数</h3><p>​    hdparm命令来自于英文词组“hard disk parameters”的缩写，其功能是用于显示与设定硬盘参数。对于初次接手一块硬盘设备，了解相关性能属性有很好的帮助。</p><p>​    <strong>语法格式：</strong>hdparm [参数] 设备名</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">设定读取文件时，预先存入块区的分区数</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">将内存缓冲区的数据写入硬盘，并清空缓冲区</td></tr><tr><td align="center">-g</td><td align="center">显示硬盘的磁轨，磁头，磁区等参数</td></tr><tr><td align="center">-t</td><td align="center">评估硬盘读取效率</td></tr><tr><td align="center">-I</td><td align="center">直接读取硬盘所提供的硬件规格信息</td></tr><tr><td align="center">-X</td><td align="center">设定硬盘的传输模式</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示指定硬盘的相关信息：</p><pre><code>[root@linuxcool ~]# hdparm /dev/sdb/dev/sdb: multcount     = 255 (on) IO_support    =  1 (32-bit) readonly      =  0 (off) readahead     = 8192 (on) geometry      = 2610/255/63, sectors = 41943040, start = 0</code></pre><p>​    仅显示指定硬盘的柱面、磁头和扇区数信息：</p><pre><code>[root@linuxcool ~]# hdparm -g /dev/sdb/dev/sdb: geometry      = 2610/255/63, sectors = 41943040, start = 0</code></pre><p>​    评估指定硬盘的读取效率：</p><pre><code>[root@linuxcool ~]# hdparm -t /dev/sdb/dev/sdb: Timing buffered disk reads: 5386 MB in  3.00 seconds = 1795.12 MB/sec</code></pre><p>​    读取指定硬盘所提供的硬件规格信息：</p><pre><code>[root@linuxcool ~]# hdparm -X /dev/sdb/dev/sdb: setting xfermode to 0 (default PIO mode)SG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 12 00 00 00 00 24 00 00 c0 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00</code></pre><h2 id="五-文件传输"><a href="#五-文件传输" class="headerlink" title="五.文件传输"></a>五.文件传输</h2><h3 id="1-tftp命令-–-上传及下载文件"><a href="#1-tftp命令-–-上传及下载文件" class="headerlink" title="1.tftp命令 – 上传及下载文件"></a>1.tftp命令 – 上传及下载文件</h3><p>​    tftp命令来自于英文词组”Trivial File Transfer Protocol“的缩写，中文译为简单文件传输协议，其功能是基于TFTP协议进行的文件传输工作。用户可以通过文字模式将文件上传至远程服务器，亦可以从服务器下载文件到本地主机。</p><p>​    TFTP基于69/udp协议，不同于FTP文件传输协议，属于轻量级的传输服务，不具备显示文件列表、断点续传等功能。</p><p>​    <strong>语法格式：</strong>tftp [参数] 主机</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">connect</th><th align="center">连接到远程tftp服务器</th></tr></thead><tbody><tr><td align="center">mode</td><td align="center">文件传输模式</td></tr><tr><td align="center">put</td><td align="center">上传文件</td></tr><tr><td align="center">get</td><td align="center">下载文件</td></tr><tr><td align="center">quit</td><td align="center">退出</td></tr><tr><td align="center">verbose</td><td align="center">显示详细的处理信息</td></tr><tr><td align="center">trace</td><td align="center">显示包路径</td></tr><tr><td align="center">status</td><td align="center">显示当前状态信息</td></tr><tr><td align="center">binary</td><td align="center">二进制传输模式</td></tr><tr><td align="center">ascii</td><td align="center">ascii 传送模式</td></tr><tr><td align="center">rexmt</td><td align="center">设置包传输的超时时间</td></tr><tr><td align="center">timeout</td><td align="center">设置重传的超时时间</td></tr><tr><td align="center">help</td><td align="center">帮助信息</td></tr><tr><td align="center">?</td><td align="center">帮助信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    远程连接至指定服务器：</p><pre><code>[root@linuxcool ~]# tftp 192.168.10.10</code></pre><p>​    下载远程指定服务器中的文件至本地工作目录：</p><pre><code>tftp&gt; get File1.txt</code></pre><p>​    上传本地工作目录中某个文件至远程指定服务器：</p><pre><code>tftp&gt; put File2.txt</code></pre><p>​    退出登录某台远程服务器：</p><pre><code>tftp&gt; quit</code></pre><h3 id="2-curl命令-–-文件传输工具"><a href="#2-curl命令-–-文件传输工具" class="headerlink" title="2.curl命令 – 文件传输工具"></a>2.curl命令 – 文件传输工具</h3><p>​    curl命令来自于英文词组”CommandLine URL“的缩写，其功能是用于在Shell终端界面中基于URL规则进行的文件传输工作。curl是一款综合的传输工具，可以上传也可以下载，支持HTTP、HTTPS、FTP等三十余种常见协议</p><p>​    <strong>语法格式：</strong>curl [参数] 网址</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-o</th><th align="center">指定新的本地文件名</th></tr></thead><tbody><tr><td align="center">-O</td><td align="center">保留远程文件的原始名</td></tr><tr><td align="center">-u</td><td align="center">通过服务端配置的用户名和密码授权访问</td></tr><tr><td align="center">-I</td><td align="center">打印HTTP响应头信息</td></tr><tr><td align="center">-u</td><td align="center">指定登录账户密码信息</td></tr><tr><td align="center">-A</td><td align="center">设置用户代理标头信息</td></tr><tr><td align="center">-b</td><td align="center">设置用户cookie信息</td></tr><tr><td align="center">-C</td><td align="center">支持断点续传</td></tr><tr><td align="center">-s</td><td align="center">静默模式，不输出任何信息</td></tr><tr><td align="center">-T</td><td align="center">上传文件</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    获取指定网站的网页源码：</p><pre><code>[root@linuxcool ~]# curl https://www.linuxcool.com  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;/&gt;&lt;meta charset=&quot;UTF-8&quot; /&gt;………………省略部分输出信息………………</code></pre><p>​    下载指定网站中的文件：</p><pre><code>[root@linuxcool ~]# curl -O https://www.linuxprobe.com/docs/LinuxProbe.pdf  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 16.8M  100 16.8M    0     0  22.5M      0 --:--:-- --:--:-- --:--:-- 22.5M</code></pre><p>​    打印指定网站的HTTP响应头信息：</p><pre><code>[root@linuxcool ~]# curl -I https://www.linuxcool.com  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0HTTP/2 200 server: Tenginecontent-type: text/html; charset=UTF-8vary: Accept-Encodingdate: Wed, 04 May 2022 06:44:26 GMTvary: Accept-Encodingx-powered-by: PHP/7.4.11vary: Accept-Encoding, Cookiecache-control: max-age=3, must-revalidateali-swift-global-savetime: 1651646666via: cache3.l2cn1802[235,234,200-0,M], cache17.l2cn1802[236,0], kunlun10.cn257[403,414,200-0,M], kunlun2.cn257[417,0]x-cache: MISS TCP_REFRESH_MISS dirn:0:416601537x-swift-savetime: Wed, 04 May 2022 06:44:26 GMTx-swift-cachetime: 3timing-allow-origin: *eagleid: ab08f29616516466664417014e</code></pre><p>​    下载指定文件服务器中的文件（用户名：linuxcool，密码：redhat）：</p><pre><code>[root@linuxprobe ~]# curl -u linuxprobe:redhat ftp://www.linuxcool.com/LinuxProbe.pdf</code></pre><h3 id="3-fsck命令-–-检查与修复文件系统"><a href="#3-fsck命令-–-检查与修复文件系统" class="headerlink" title="3.fsck命令 – 检查与修复文件系统"></a>3.fsck命令 – 检查与修复文件系统</h3><p>​    fsck命令来自于英文词组“filesystem check”的缩写，其功能是用于检查与修复文件系统。若系统有过突然断电或磁盘异常的情况，建议使用fsck命令对文件系统进行检查与修复，以防数据丢失。</p><p>​    <strong>语法格式：</strong>fsck [参数] 文件系统</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">自动修复文件系统</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制检查</td></tr><tr><td align="center">-A</td><td align="center">依照/etc/fstab文件来检查全部文件系统</td></tr><tr><td align="center">-N</td><td align="center">不执行指令，仅列出实际执行会进行的动作</td></tr><tr><td align="center">-r</td><td align="center">采用互动模式，在执行修复时询问问题</td></tr><tr><td align="center">-R</td><td align="center">略过指定的文件系统不予检查</td></tr><tr><td align="center">-t</td><td align="center">指定要检查的文件系统类型</td></tr><tr><td align="center">-T</td><td align="center">执行fsck指令时，不显示标题信息</td></tr><tr><td align="center">-V</td><td align="center">显示指令执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    检查是否的文件系统是否有损坏：</p><pre><code>[root@linuxcool ~]# fsck /dev/sdbfsck from util-linux 2.32.1e2fsck 1.44.3 (10-July-2018)/dev/sdb: clean, 11/1310720 files, 126322/5242880 blocks</code></pre><p>​    强制检查文件系统的损坏情况：</p><pre><code>[root@linuxcool ~]# fsck -f /dev/sdbfsck from util-linux 2.32.1e2fsck 1.44.3 (10-July-2018)Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/sdb: 11/1310720 files (0.0% non-contiguous), 126322/5242880 blocks</code></pre><h3 id="4-lprm命令-–-删除打印队列中的打印任务"><a href="#4-lprm命令-–-删除打印队列中的打印任务" class="headerlink" title="4.lprm命令 – 删除打印队列中的打印任务"></a>4.lprm命令 – 删除打印队列中的打印任务</h3><p>​    lprm命令的英文全称是“Remove jobs from the print queue”，意为用于删除打印队列中的打印任务。尚未完成的打印机工作会被放在打印机贮列之中，这个命令可用来将未送到打印机的工作取消。</p><p>​    <strong>语法格式：</strong>lprm [参数] [任务编号]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-E</th><th align="center">与打印服务器连接时强制使用加密</th></tr></thead><tbody><tr><td align="center">-P</td><td align="center">指定接受打印任务的目标打印机</td></tr><tr><td align="center">-U</td><td align="center">指定可选的用户名</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    将打印机hpprint中的第102号任务移除：</p><pre><code>[root@linuxcool ~]# lprm -Phpprint 102</code></pre><p>​    将第101号任务由预设打印机中移除：</p><pre><code>[root@linuxcool ~]# lprm 101</code></pre><h3 id="5-ftpwho命令-–-显示ftp会话信息"><a href="#5-ftpwho命令-–-显示ftp会话信息" class="headerlink" title="5.ftpwho命令 – 显示ftp会话信息"></a>5.ftpwho命令 – 显示ftp会话信息</h3><p>​    ftpwho命令用于显示当前所有以FTP登入的用户会话信息。</p><p>​    执行该命令可得知当前用FTP登入系统的用户有哪些人，以及他们正在进行的操作。</p><p>​    <strong>语法格式：</strong>ftpwho [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th>-h</th><th>显示帮助信息</th></tr></thead><tbody><tr><td>-v</td><td>详细模式，输出更多信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查询当前正在登录FTP 服务器的用户：</p><pre><code>[root@linuxcool ~]# ftpwho</code></pre><p>​    在详细模式下，查询当前正在登录FTP 服务器的用户：</p><pre><code>[root@linuxcool ~]# ftpwho -v</code></pre><p>​    显示帮助信息：</p><pre><code>[root@linuxcool ~]# ftpwho -h</code></pre><h2 id="六-网络通讯"><a href="#六-网络通讯" class="headerlink" title="六.网络通讯"></a>六.网络通讯</h2><h3 id="1-ssh命令-–-安全的远程连接服务器"><a href="#1-ssh命令-–-安全的远程连接服务器" class="headerlink" title="1.ssh命令 – 安全的远程连接服务器"></a>1.ssh命令 – 安全的远程连接服务器</h3><p>​    ssh命令的功能是用于安全的远程连接服务器主机系统，作为openssh套件中的客户端连接工具，ssh命令可以让我们轻松的基于ssh加密协议进行远程主机访问，从而实现对远程服务器的管理工作。</p><p>​    <strong>语法格式:</strong> ssh [参数] 远程主机</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-1</th><th align="center">强制使用ssh协议版本1</th></tr></thead><tbody><tr><td align="center">-2</td><td align="center">强制使用ssh协议版本2</td></tr><tr><td align="center">-4</td><td align="center">强制使用IPv4地址</td></tr><tr><td align="center">-6</td><td align="center">强制使用IPv6地址</td></tr><tr><td align="center">-A</td><td align="center">开启认证代理连接转发功能</td></tr><tr><td align="center">-a</td><td align="center">关闭认证代理连接转发功能</td></tr><tr><td align="center">-b&lt;IP地址&gt;</td><td align="center">使用本机指定的地址作为对位连接的源IP地址</td></tr><tr><td align="center">-C</td><td align="center">请求压缩所有数据</td></tr><tr><td align="center">-F&lt;配置文件&gt;</td><td align="center">指定ssh指令的配置文件，默认的配置文件为“/etc/ssh/ssh_config”</td></tr><tr><td align="center">-f</td><td align="center">后台执行ssh指令</td></tr><tr><td align="center">-g</td><td align="center">允许远程主机连接本机的转发端口</td></tr><tr><td align="center">-i&lt;身份文件&gt;</td><td align="center">指定身份文件（即私钥文件）</td></tr><tr><td align="center">-l&lt;登录名&gt;</td><td align="center">指定连接远程服务器的登录用户名</td></tr><tr><td align="center">-N</td><td align="center">不执行远程指令</td></tr><tr><td align="center">-o&lt;选项&gt;</td><td align="center">指定配置选项</td></tr><tr><td align="center">-p&lt;端口&gt;</td><td align="center">指定远程服务器上的端口</td></tr><tr><td align="center">-q</td><td align="center">静默模式，所有的警告和诊断信息被禁止输出</td></tr><tr><td align="center">-X</td><td align="center">开启X11转发功能</td></tr><tr><td align="center">-x</td><td align="center">关闭X11转发功能</td></tr><tr><td align="center">-y</td><td align="center">开启信任X11转发功能</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    基于ssh协议，远程访问服务器主机系统：</p><pre><code>[root@linuxcool ~]# ssh 192.168.10.10The authenticity of host &#39;192.168.10.10 (192.168.10.10)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:ZEjdfRjQV8pVVfu0TSYvDP5UvOHuuogMQSDUgLPG3Kc.Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &#39;192.168.10.10&#39; (ECDSA) to the list of known hosts.root@192.168.10.10&#39;s password: 此处输入远程服务器管理员密码Activate the web console with: systemctl enable --now cockpit.socketLast login: Tue Dec 14 08:49:08 2022[root@linuxprobe ~]# </code></pre><p>​    使用指定的用户身份登录远程服务器主机系统：</p><pre><code>[root@linuxcool ~]# ssh -l linuxprobe 192.168.10.10linuxprobe@192.168.10.10&#39;s password: 此处输入指定用户的密码Activate the web console with: systemctl enable --now cockpit.socket[linuxprobe@linuxprobe ~]$ </code></pre><p>​    登录远程服务器主机系统后执行一条命令：</p><pre><code>[root@linuxcool ~]# ssh 192.168.10.10 &quot;free -m&quot;root@192.168.10.10&#39;s password: 此处输入远程服务器管理员密码              total        used        free      shared  buff/cache   availableMem:           1966        1359          76          21         530         407Swap:          2047           9        2038</code></pre><p>​    强制使用v1版本的ssh加密协议连接远程服务器主机：</p><pre><code>[root@linuxcool ~]# ssh -1 192.168.10.10</code></pre><h3 id="2-netstat命令-–-显示网络状态"><a href="#2-netstat命令-–-显示网络状态" class="headerlink" title="2.netstat命令 – 显示网络状态"></a>2.netstat命令 – 显示网络状态</h3><p>​    netstat命令来自于英文词组”network statistics“的缩写，其功能是用于显示各种网络相关信息，例如网络连接状态、路由表信息、接口状态、NAT、多播成员等等。</p><p>​    netstat命令不仅应用于Linux系统，而且在Windows XP、Windows 7、Windows 10及Windows 11中均已默认支持，并且可用参数也相同，有经验的运维人员可以直接上手。</p><p>​    <strong>语法格式：</strong>netstat [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示所有连线中的Socket</th></tr></thead><tbody><tr><td align="center">-p</td><td align="center">显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td align="center">-l</td><td align="center">仅列出在监听的服务状态</td></tr><tr><td align="center">-t</td><td align="center">显示TCP传输协议的连线状况</td></tr><tr><td align="center">-u</td><td align="center">显示UDP传输协议的连线状况</td></tr><tr><td align="center">-i</td><td align="center">显示网络界面信息表单</td></tr><tr><td align="center">-r</td><td align="center">显示路由表信息</td></tr><tr><td align="center">-n</td><td align="center">直接使用IP地址，不通过域名服务器</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统网络状态中的所有连接信息：</p><pre><code>[root@linuxcool ~]# netstat -aActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State      tcp        0      0 0.0.0.0:http            0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:https           0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:ms-wbt-server   0.0.0.0:*               LISTEN     </code></pre><p>​    显示系统网络状态中的UDP连接信息：</p><pre><code>[root@linuxcool ~]# netstat -nuActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State      udp        0      0 172.19.226.238:68       172.19.239.253:67       ESTABLISHED</code></pre><p>​    显示系统网络状态中的UDP连接端口号使用信息：</p><pre><code>[root@linuxcool ~]# netstat -apu Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address    Foreign Address       State    PID/Program name    udp        0      0 linuxcool:bootpc _gateway:bootps  ESTABLISHED   1024/NetworkManager udp        0      0 localhost:323           0.0.0.0:*               875/chronyd         udp6       0      0 localhost:323           [::]:*                  875/chronyd </code></pre><p>​    显示网卡当前状态信息：</p><pre><code>[root@linuxcool~]# netstat -i Kernel Interface tableIface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flgeth0             1500    31945      0      0 0         39499      0      0      0 BMRUlo              65536        0      0      0 0             0      0      0      0 LRU</code></pre><p>​    显示网络路由表状态信息：</p><pre><code>[root@linuxcool ~]# netstat -rKernel IP routing tableDestination     Gateway         Genmask         Flags   MSS Window  irtt Ifacedefault         _gateway        0.0.0.0         UG        0 0          0 eth0172.19.224.0    0.0.0.0         255.255.240.0   U         0 0          0 eth0</code></pre><p>​    找到某个服务所对应的连接信息：</p><pre><code>[root@linuxcool ~]# netstat -ap | grep sshunix  2      [ ]         STREAM     CONNECTED     89121805 203890/sshd: root [  unix  3      [ ]         STREAM     CONNECTED     27396    1754/sshd            unix  3      [ ]         STREAM     CONNECTED     89120965 203890/sshd: root [  unix  2      [ ]         STREAM     CONNECTED     89116510 203903/sshd: root@p  unix  2      [ ]         STREAM     CONNECTED     89121803 203890/sshd: root [  unix  2      [ ]         STREAM     CONNECTED     29959    1754/sshd            unix  2      [ ]         DGRAM                    89111175 203890/sshd: root [  unix  3      [ ]         STREAM     CONNECTED     89120964 203903/sshd: root@p  </code></pre><h3 id="3-dhclient命令-–-动态获取或释放IP地址"><a href="#3-dhclient命令-–-动态获取或释放IP地址" class="headerlink" title="3.dhclient命令 – 动态获取或释放IP地址"></a>3.dhclient命令 – 动态获取或释放IP地址</h3><p>​    dhclient命令来自于英文词组“DHCP client”的缩写，其功能是用于动态获取或释放IP地址。使用dhclient命令前需要将网卡模式设置成DHCP自动获取，否则静态模式的网卡是不会主动向服务器获取如IP地址等网卡信息的。</p><p>​    <strong>语法格式：</strong>dhclient 参数 [网卡]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-p</th><th align="center">指定dhcp客户端监听的端口号（默认端口号86）</th></tr></thead><tbody><tr><td align="center">-d</td><td align="center">总是以前台方式运行程序</td></tr><tr><td align="center">-q</td><td align="center">安静模式，不打印任何错误的提示信息</td></tr><tr><td align="center">-r</td><td align="center">释放ip地址</td></tr><tr><td align="center">-n</td><td align="center">不配置任何接口</td></tr><tr><td align="center">-x</td><td align="center">停止正在运行的DHCP客户端，而不释放当前租约，杀死现有的dhclient</td></tr><tr><td align="center">-s</td><td align="center">在获取ip地址之前指定DHCP服务器</td></tr><tr><td align="center">-w</td><td align="center">即使没有找到广播接口，也继续运行</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    通过指定网卡发起DHCP请求，获取网卡参数：</p><pre><code>[root@linuxcool ~]# dhclient ens160</code></pre><p>​    释放系统中已获取的网卡参数：</p><pre><code>[root@linuxcool ~]# dhclient -rKilled old client process</code></pre><p>​    向指定的服务器请求获取网卡参数：</p><pre><code>[root@linuxcool ~]# dhclient -s 192.168.10.10</code></pre><p>​    手动停止执行dhclient服务进程：</p><pre><code>[root@linuxcool ~]# dhclient -xRemoved stale PID file</code></pre><h3 id="4-ping命令-–-测试主机间网络连通性"><a href="#4-ping命令-–-测试主机间网络连通性" class="headerlink" title="4.ping命令 – 测试主机间网络连通性"></a>4.ping命令 – 测试主机间网络连通性</h3><p>​    ping命令的功能是用于测试主机间网络连通性，发送出基于ICMP传输协议的数据包，要求对方主机予以回复，若对方主机的网络功能没有问题且防火墙放行流量，则就会回复该信息，我们也就可得知对方主机系统在线并运行正常了。</p><p>​    不过值得我们注意的是Linux与Windows相比有一定差异，Windows系统下的ping命令会发送出去4个请求后自动结束该命令；而Linux系统则不会自动终止，需要用户手动按下组合键“Ctrl+c”才能结束，或是发起命令时加入-c参数限定发送个数。</p><p>​    <strong>语法格式：</strong>ping [参数] 目标主机</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-d</th><th align="center">使用Socket的SO_DEBUG功能</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">指定发送报文的次数</td></tr><tr><td align="center">-i</td><td align="center">指定收发信息的间隔时间</td></tr><tr><td align="center">-I</td><td align="center">使用指定的网络接口送出数据包</td></tr><tr><td align="center">-l</td><td align="center">设置在送出要求信息之前，先行发出的数据包</td></tr><tr><td align="center">-n</td><td align="center">只输出数值</td></tr><tr><td align="center">-p</td><td align="center">设置填满数据包的范本样式</td></tr><tr><td align="center">-q</td><td align="center">不显示指令执行过程</td></tr><tr><td align="center">-R</td><td align="center">记录路由过程</td></tr><tr><td align="center">-s</td><td align="center">设置数据包的大小</td></tr><tr><td align="center">-t</td><td align="center">设置存活数值TTL的大小</td></tr><tr><td align="center">-v</td><td align="center">详细显示指令的执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    测试与指定网站服务器之间的网络连通性（需手动按下“Ctrl+c”组合键结束命令）：</p><pre><code>[root@linuxcool ~]# ping www.linuxcool.comPING www.linuxcool.com.w.kunlunar.com (222.85.26.229) 56(84) bytes of data.64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=1 ttl=52 time=22.4 ms64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=2 ttl=52 time=22.4 ms64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=3 ttl=52 time=22.4 ms64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=4 ttl=52 time=22.4 ms^C--- www.linuxcool.com.w.kunlunar.com ping statistics ---5 packets transmitted, 5 received, 0% packet loss, time 4005msrtt min/avg/max/mdev = 22.379/22.389/22.400/0.094 ms</code></pre><p>​    测试与指定网站服务器之间的网络连通性，发送请求包限定为4次：</p><pre><code>[root@linuxcool ~]# ping -c 4 www.linuxcool.comPING www.linuxcool.com (222.85.26.234) 56(84) bytes of data.64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=1 ttl=52 time=24.7 ms64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=2 ttl=52 time=24.7 ms64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=3 ttl=52 time=24.7 ms64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=4 ttl=52 time=24.7 ms--- www.linuxcool.com.w.kunlunar.com ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 3005msrtt min/avg/max/mdev = 24.658/24.664/24.673/0.111 ms</code></pre><p>​    测试与指定主机之间的网络连通性，发送3次请求包，每次间隔0.2秒，最长等待时间为3秒：</p><pre><code>[root@linuxcool ~]# ping -c 3 -i 0.2 -W 3 192.168.10.1064 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.166 ms64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.060 ms64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.113 ms--- 192.168.10.10 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 410msrtt min/avg/max/mdev = 0.060/0.113/0.166/0.043 ms</code></pre><h3 id="5-ifconfig命令-–-显示或设置网络设备参数信息"><a href="#5-ifconfig命令-–-显示或设置网络设备参数信息" class="headerlink" title="5.ifconfig命令 – 显示或设置网络设备参数信息"></a>5.ifconfig命令 – 显示或设置网络设备参数信息</h3><p>​    ifconfig命令来自于英文词组”network interfaces configuring“的缩写，其功能是用于显示或设置网络设备参数信息。在Windows系统中与之类似的命令叫做ipconfig，同样的功能可以使用ifconfig去完成。</p><p>​    通常不建议使用ifconfig命令配置网络设备的参数信息，因为一旦服务器重启，配置过的参数会自动失效，还是编写到配置文件中更稳妥。</p><p>​    <strong>语法格式：</strong>ifconfig [参数] [网卡设备]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">add&lt;地址&gt;</th><th align="center">设置网络设备IPv6的IP地址</th></tr></thead><tbody><tr><td align="center">del&lt;地址&gt;</td><td align="center">删除网络设备IPv6的IP地址</td></tr><tr><td align="center">down</td><td align="center">关闭指定的网络设备</td></tr><tr><td align="center">up</td><td align="center">启动指定的网络设备</td></tr><tr><td align="center">IP地址</td><td align="center">指定网络设备的IP地址</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统的网络设备信息：</p><pre><code>[root@linuxcool ~]# ifconfigens160: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.10.30  netmask 255.255.255.0  broadcast 192.168.10.255        inet6 fe80::4d16:980c:e0fe:51c2  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 00:0c:29:60:cd:ee  txqueuelen 1000  (Ethernet)        RX packets 407  bytes 34581 (33.7 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 59  bytes 6324 (6.1 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0………………省略部分输出信息………………</code></pre><p>​    对指定的网卡设备依次进行关闭和启动操作：</p><pre><code>[root@linuxcool ~]# ifconfig ens160 down[root@linuxcool ~]# ifconfig ens160 up</code></pre><p>​    对指定的网卡设备执行修改IP地址操作：</p><pre><code>[root@linuxcool ~]# ifconfig ens160 192.168.10.20 netmask 255.255.255.0</code></pre><p>​    对指定的网卡设备执行修改MAC地址操作：</p><p>​    注意Linux系统中的MAC地址间隔符为冒号（：），而在Windows系统中间隔符为减号（-）。</p><pre><code>[root@linuxcool ~]# ifconfig ens160 hw ether 00:aa:bb:cc:dd:ee</code></pre><p>​    对指定的网卡设备依次进行ARP协议关闭和开启操作：</p><pre><code>[root@linuxcool ~]# ifconfig ens160 -arp[root@linuxcool ~]# ifconfig ens160 arp</code></pre><h2 id="三-mkdir命令-–-创建目录文件"><a href="#三-mkdir命令-–-创建目录文件" class="headerlink" title="三.mkdir命令 – 创建目录文件"></a>三.mkdir命令 – 创建目录文件</h2><p>​    mkdir命令来自于英文词组“make directories”的缩写，其功能是用来创建目录文件。使用简单，但需要注意若要创建的目标目录已经存在，则会提示已存在而不继续创建，不覆盖已有文件。而目录不存在，但具有嵌套的依赖关系，例如a/b/c/d/e/f，要想一次性创建则需要加入-p参数，进行递归操作。</p><p>​        <strong>语法格式 :</strong> mkdir [参数] 目录</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-p</td><td align="center">递归创建多级目录</td></tr><tr><td align="center">-m</td><td align="center">建立目录的同时设置目录的权限</td></tr><tr><td align="center">-z</td><td align="center">设置安全上下文</td></tr><tr><td align="center">-v</td><td align="center">显示目录的创建过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>在当前工作目录中，建立一个目录文件：</p><pre><code>[root@linuxcool ~]# mkdir dir1</code></pre><p>在当前工作目录中，创建一个目录文件并设置700权限，不让除所有主以外任何人读、写、执行它：</p><pre><code>[root@linuxcool ~]# mkdir -m 700 dir2</code></pre><p>在当前工作目录中，一次性创建多个目录文件：</p><pre><code>[root@linuxcool ~]# mkdir dir3 dir4 dir5</code></pre><p>在系统根目录中，一次性创建多个有嵌套关系的目录文件：</p><pre><code>[root@linuxcool ~]# mkdir -p /dir1/dir2/dir3/dir4/dir5</code></pre><h2 id="四-mv命令-–-移动或改名文件"><a href="#四-mv命令-–-移动或改名文件" class="headerlink" title="四.mv命令 – 移动或改名文件"></a>四.mv命令 – 移动或改名文件</h2><p>​    mv命令来自于英文单词move的缩写，其功能与英文含义相同，用于对文件进行剪切和重命名。</p><p>​    这是一个高频使用的文件管理命令，我们需要留意它与复制命令的区别。cp命令是用于文件的复制操作，文件个数是增加的，而mv则为剪切操作，也就是对文件进行移动（搬家）操作，文件位置发生变化，但总个数并无增加。</p><p>​    在同一个目录内对文件进行剪切的操作，实际应理解成重命名操作，例如下面的实例一所示。</p><p>​    <strong>语法格式：</strong>mv [参数] 源文件 目标文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-i</td><td align="center">若存在同名文件，则向用户询问是否覆盖</td></tr><tr><td align="center">-f</td><td align="center">覆盖已有文件时，不进行任何提示</td></tr><tr><td align="center">-b</td><td align="center">当文件存在时，覆盖前为其创建一个备份</td></tr><tr><td align="center">-u</td><td align="center">当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>在当前工作目录中，对某个文件进行剪切后粘贴（重命名）操作：</p><pre><code>[root@linuxcool ~]# mv anaconda-ks.cfg ks.cfg</code></pre><p>将某个文件移动到/etc目录中，保留文件原始名称：</p><pre><code>[root@linuxcool ~]# mv ks.cfg /etc</code></pre><p>将某个目录移动到/etc目录中，并定义新的目录名称：</p><pre><code>[root@linuxcool ~]# mv Documents /etc/docs</code></pre><p>将/home目录中所有的文件都移动到当前工作目录中，遇到已存在文件则直接覆盖：</p><pre><code>[root@linuxcool ~]# mv -f /home/* .</code></pre><h2 id="五-pwd命令-–-显示当前工作目录的路径"><a href="#五-pwd命令-–-显示当前工作目录的路径" class="headerlink" title="五.pwd命令 – 显示当前工作目录的路径"></a>五.pwd命令 – 显示当前工作目录的路径</h2><p>​    pwd命令来自于英文词组”print working directory“的缩写，其功能是用于显示当前工作目录的路径，即显示所在位置的绝对路径。</p><p>​    在实际工作中，我们经常会在不同目录之间进行切换，为了防止”迷路“，可以使用pwd命令快速查看当前所处的工作目录路径，方便开展后续工作。</p><p>​    <strong>语法格式</strong>：pwd [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th>-L</th><th>显示逻辑路径</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查看当前工作目录路径：</p><pre><code>[root@linuxcool ~]# pwd/root</code></pre><h2 id="六-cat命令-–-在终端设备上显示文件内容"><a href="#六-cat命令-–-在终端设备上显示文件内容" class="headerlink" title="六.cat命令 – 在终端设备上显示文件内容"></a>六.cat命令 – 在终端设备上显示文件内容</h2><p>​    cat命令来自于英文单词concatenate的缩写，其功能是用于查看文件内容。在Linux系统中有很多用于查看文件内容的命令，例如more、tail、head……等等，每个命令都有各自的特点。cat命令适合查看内容较少的、纯文本的文件。</p><p>​    对于内容较多的文件，使用cat命令查看后会在屏幕上快速滚屏，用户往往看不清所显示的具体内容，只好按Ctrl+c键中断命令的执行，所以对于大文件，干脆用more命令吧~</p><p>​    <strong>语法格式：</strong>cat [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">显示行数（空行也编号）</td></tr><tr><td align="center">-s</td><td align="center">显示行数（多个空行算一个编号）</td></tr><tr><td align="center">-b</td><td align="center">显示行数（空行不编号）</td></tr><tr><td align="center">-E</td><td align="center">每行结束处显示$符号</td></tr><tr><td align="center">-T</td><td align="center">将TAB字符显示为 ^I符号</td></tr><tr><td align="center">-v</td><td align="center">使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</td></tr><tr><td align="center">-e</td><td align="center">等价于”-vE”组合</td></tr><tr><td align="center">-t</td><td align="center">等价于”-vT”组合</td></tr><tr><td align="center">-A</td><td align="center">等价于 -vET组合</td></tr><tr><td align="center">–help</td><td align="center">显示帮助信息</td></tr><tr><td align="center">–version</td><td align="center">显示版本信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查看某个文件的内容：</p><pre><code>[root@linuxcool ~]# cat anaconda-ks.cfg#version=RHEL8ignoredisk --only-use=sdaautopart --type=lvm# Partition clearing information………………省略部分输出信息………………</code></pre><p>​    查看某个文件的内容，并显示行号：</p><pre><code>[root@linuxcool ~]# cat -n anaconda-ks.cfg     1    #version=RHEL8     2    ignoredisk --only-use=sda     3    autopart --type=lvm     4    # Partition clearing information     5    clearpart --none --initlabel     6    # Use graphical install………………省略部分输出信息………………</code></pre><p>​    搭配空设备文件和输出重定向操作符，将某个文件内容清空：</p><pre><code>[root@linuxcool ~]# cat /dev/null &gt; anaconda-ks.cfg [root@linuxcool ~]# cat anaconda-ks.cfg [root@linuxcool ~]# </code></pre><p>​    持续写入文件内容，直到碰到EOF符后才会结束并保存：</p><pre><code>[root@linuxcool ~]# cat &gt; anaconda-ks.cfg &lt;&lt; EOF&gt; Hello,World&gt; Linux!~&gt; EOF[root@linuxcool ~]# cat anaconda-ks.cfg Hello,WorldLinux!~</code></pre><p>​    搭配输出重定向操作符，将光盘设备制作成镜像文件：</p><pre><code>[root@linuxcool ~]# cat /dev/cdrom &gt; rhel.iso[root@linuxcool ~]# ls rhel.iso  -lh-rw-r--r--. 1 root root 6.7G May  2 00:43 rhel.iso[root@linuxcool ~]# file rhel.iso rhel.iso: DOS/MBR boot sector; partition 2 : ID=0xef, start-CHS (0x3ff,254,63), end-CHS (0x3ff,254,63), startsector 23128, 19888 sectors</code></pre><h2 id="七-echo命令-–-输出字符串或提取后的变量值"><a href="#七-echo命令-–-输出字符串或提取后的变量值" class="headerlink" title="七.echo命令 – 输出字符串或提取后的变量值"></a>七.echo命令 – 输出字符串或提取后的变量值</h2><p>​    echo是用于在终端设备上输出指定字符串或变量提取后值的命令，能够给用户一些简单的提醒信息，也可以将输出的指定字符串内容同管道符一起传递给后续命令作为标准输入信息再来进行二次处理，又或者同输出重定向符一起操作，将信息直接写入到文件中。</p><p>​    如需提取变量值，需在变量名称前加入$符号做提取，变量名称一般均为大写形式。</p><p>​    <strong>语法格式：</strong>echo [参数] 字符串/变量</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">不输出结尾的换行符</td></tr><tr><td align="center">-e “\a”</td><td align="center">发出警告音</td></tr><tr><td align="center">-e “\b”</td><td align="center">删除前面的一个字符</td></tr><tr><td align="center">-e “\c”</td><td align="center">结尾不加换行符</td></tr><tr><td align="center">-e “\f”</td><td align="center">换行，光标扔停留在原来的坐标位置</td></tr><tr><td align="center">-e “\n”</td><td align="center">换行，光标移至行首</td></tr><tr><td align="center">-e “\r”</td><td align="center">光标移至行首，但不换行</td></tr><tr><td align="center">-E</td><td align="center">禁止反斜杠转移，与-e参数功能相反</td></tr><tr><td align="center">—version</td><td align="center">查看版本信息</td></tr><tr><td align="center">–help</td><td align="center">查看帮助信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    输出指定字符串到终端设备界面（默认为电脑屏幕）：</p><pre><code>[root@linuxcool ~]# echo LinuxCoolLinuxCool</code></pre><p>​    输出某个变量值内容：</p><pre><code>[root@linuxcool ~]# echo $PATH/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/root/bin</code></pre><p>​    搭配转义符一起使用，输出纯字符串内容：</p><pre><code>[root@linuxcool ~]# echo \$PATH$PATH</code></pre><p>​    搭配输出重定向符一起使用，将字符串内容直接写入文件中：</p><pre><code>[root@linuxcool ~]# echo &quot;Hello World&quot; &gt; Document</code></pre><p>​    搭配反引号执行命令，并将执行结果输出：</p><pre><code>[root@linuxcool ~]# echo `uptime`16:16:12 up 52 min, 1 user, load average: 0.00, 0.00, 0.00</code></pre><p>​    输出带有换行符的内容：</p><pre><code>[root@linuxcool ~]# echo -e &quot;First\nSecond\nThird&quot;FirstSecondThird</code></pre><p>​    指定删除字符串中某些字符，随后将内容输出</p><pre><code>[root@linuxcool ~]# echo -e &quot;123\b456&quot; 12456</code></pre><h2 id="八-rm命令-–-删除文件或目录"><a href="#八-rm命令-–-删除文件或目录" class="headerlink" title="八.rm命令 – 删除文件或目录"></a>八.rm命令 – 删除文件或目录</h2><p>​    rm命令来自于英文单词remove的缩写，其功能是用于删除文件或目录，一次可以删除多个文件，或递归删除目录及其内的所有子文件。</p><p>​    rm也是一个很危险的命令，使用的时候要特别当心，尤其对于新手更要格外注意，如执行rm -rf /*命令则会清空系统中所有的文件，甚至无法恢复回来。所以我们在执行之前一定要再次确认下在哪个目录中，到底要删除什么文件，考虑好后再敲击回车，时刻保持清醒的头脑。</p><p>​    <strong>语法格式：</strong>rm [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制删除（不二次询问）</td></tr><tr><td align="center">-i</td><td align="center">删除前会询问用户是否操作</td></tr><tr><td align="center">-r/R</td><td align="center">递归删除</td></tr><tr><td align="center">-v</td><td align="center">显示指令的详细执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    删除某个文件，默认会进行二次确认，敲击y进行确认。</p><pre><code>[root@linuxcool ~]# rm anaconda-ks.cfg rm: remove regular file &#39;anaconda-ks.cfg&#39;? y</code></pre><p>​    删除某个文件，强制操作不需要二次确认：</p><pre><code>[root@linuxcool ~]# rm -f initial-setup-ks.cfg </code></pre><p>​    删除某个目录及其内的子文件或子目录，一并都强制删除：</p><pre><code>[root@linuxcool ~]# rm -rf Documents</code></pre><p>​    强制删除当前工作目录内的所有以.txt为后缀的文件</p><pre><code>root@linuxcool ~]# rm -f *.txt</code></pre><p>​    强制清空服务器系统内的所有文件：</p><pre><code>root@linuxcool ~]# rm -f *.txt</code></pre><h2 id="九-tail命令-–-查看文件尾部内容"><a href="#九-tail命令-–-查看文件尾部内容" class="headerlink" title="九.tail命令 – 查看文件尾部内容"></a>九.tail命令 – 查看文件尾部内容</h2><p>​    tail命令的功能是用于查看文件尾部内容，例如默认会在终端界面上显示出指定文件的末尾十行，如果指定了多个文件，则会在显示的每个文件内容前面加上文件名来加以区分。</p><p>​    高阶玩法的-f参数作用是持续显示文件的尾部最新内容，类似于机场候机厅的大屏幕，总会把最新的消息展示给用户，对阅读日志文件尤为适合，而不需要手动刷新。</p><p>​    <strong>语法格式：</strong>tail [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">输出文件尾部的N（N为整数）个字节内容</td></tr><tr><td align="center">-f</td><td align="center">持续显示文件最新追加的内容</td></tr><tr><td align="center">-F <n></n></td><td align="center">与选项“-follow=name”和“–retry”连用时功能相同</td></tr><tr><td align="center">-n <n></n></td><td align="center">输出文件的尾部N（N位数字）行内容</td></tr><tr><td align="center">–retry</td><td align="center">即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。</td></tr><tr><td align="center">–pid=&lt;进程号&gt;</td><td align="center">与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令</td></tr><tr><td align="center">–help</td><td align="center">显示指令的帮助信息</td></tr><tr><td align="center">–version</td><td align="center">显示指令的版本信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    默认显示某个文件尾部的后10行内容：</p><pre><code>[root@linuxcool ~]# tail initial-setup-ks.cfg %addon com_redhat_subscription_manager %end%addon ADDON_placeholder --disable --reserve-mb=auto%end%anacondapwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notemptypwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyokpwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty%end</code></pre><p>​    指定显示某个文件尾部的后5行内容：</p><pre><code>[root@linuxcool ~]# tail -n 5 initial-setup-ks.cfg %anacondapwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notemptypwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyokpwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty%end</code></pre><p>​    指定显示某个文件尾部的后15个字节：</p><pre><code>[root@linuxcool ~]# tail -c 30 initial-setup-ks.cfg t --nochanges --notempty%end</code></pre><p>​    持续刷新显示某个文件尾部的后10行内容：</p><pre><code>[root@linuxcool ~]# tail -f /var/log/messages………………省略输出信息………………</code></pre><h2 id="十-grep命令-–-强大的文本搜索工具"><a href="#十-grep命令-–-强大的文本搜索工具" class="headerlink" title="十.grep命令 – 强大的文本搜索工具"></a>十.grep命令 – 强大的文本搜索工具</h2><p>​    grep来自于英文词组“global search regular expression and print out the line”的缩写，意思是用于全面搜索的正则表达式，并将结果输出。人们通常会将grep命令与正则表达式搭配使用，参数作为搜索过程中的补充或对输出结果的筛选，命令模式十分灵活。</p><p>​    与之容易混淆的是egrep命令和fgrep命令。如果把grep命令当作是标准搜索命令，那么egrep则是扩展搜索命令，等价于“grep -E”命令，支持扩展的正则表达式。而fgrep则是快速搜索命令，等价于“grep -F”命令，不支持正则表达式，直接按照字符串内容进行匹配。</p><p>​    <strong>语法格式：</strong> grep [参数] 文件</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-i</th><th align="center">忽略大小写</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">只输出匹配行的数量</td></tr><tr><td align="center">-l</td><td align="center">只列出符合匹配的文件名，不列出具体的匹配行</td></tr><tr><td align="center">-n</td><td align="center">列出所有的匹配行，显示行号</td></tr><tr><td align="center">-h</td><td align="center">查询多文件时不显示文件名</td></tr><tr><td align="center">-s</td><td align="center">不显示不存在、没有匹配文本的错误信息</td></tr><tr><td align="center">-v</td><td align="center">显示不包含匹配文本的所有行</td></tr><tr><td align="center">-w</td><td align="center">匹配整词</td></tr><tr><td align="center">-x</td><td align="center">匹配整行</td></tr><tr><td align="center">-r</td><td align="center">递归搜索</td></tr><tr><td align="center">-q</td><td align="center">禁止输出任何结果，已退出状态表示搜索是否成功</td></tr><tr><td align="center">-b</td><td align="center">打印匹配行距文件头部的偏移量，以字节为单位</td></tr><tr><td align="center">-o</td><td align="center">与-b结合使用，打印匹配的词据文件头部的偏移量，以字节为单位</td></tr><tr><td align="center">-F</td><td align="center">匹配固定字符串的内容</td></tr><tr><td align="center">-E</td><td align="center">支持扩展的正则表达式</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    搜索某个文件中，包含某个关键词的内容：</p><pre><code>[root@linuxcool ~]# grep root /etc/passwdroot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin</code></pre><p>​    搜索某个文件中，以某个关键词开头的内容：</p><pre><code>[root@linuxcool ~]# grep ^root /etc/passwdroot:x:0:0:root:/root:/bin/bash</code></pre><p>​    搜索多个文件中，包含某个关键词的内容：</p><pre><code>[root@linuxcool ~]# grep linuxprobe /etc/passwd /etc/shadow/etc/passwd:linuxprobe:x:1000:1000:linuxprobe:/home/linuxprobe:/bin/bash/etc/shadow:linuxprobe:$6$9Av/41hCM17T2PrT$hoggWJ3J/j6IqEOSp62elhdOYPLhQ1qDho7hANcm5fQkPCQdib8KCWGdvxbRvDmqyOarKpWGxd8NAmp3j2Ln00::0:99999:7:::</code></pre><p>​    搜索多个文件中，包含某个关键词的内容，不显示文件名称：</p><pre><code>[root@linuxcool ~]# grep -h linuxprobe /etc/passwd /etc/shadowlinuxprobe:x:1000:1000:linuxprobe:/home/linuxprobe:/bin/bashlinuxprobe:$6$9Av/41hCM17T2PrT$hoggWJ3J/j6IqEOSp62elhdOYPLhQ1qDho7hANcm5fQkPCQdib8KCWGdvxbRvDmqyOarKpWGxd8NAmp3j2Ln00::0:99999:7:::</code></pre><p>​    输出在某个文件中，包含某个关键词行的数量：</p><pre><code>[root@linuxcool ~]# grep -c root /etc/passwd /etc/shadow/etc/passwd:2/etc/shadow:1</code></pre><p>​    搜索某个文件中，包含某个关键词位置的行号及内容：</p><pre><code>[root@linuxcool ~]# grep -n network anaconda-ks.cfg 17:network  --bootproto=static --device=ens160 --ip=192.168.10.10 --netmask=255.255.255.0 --onboot=off --ipv6=auto --activate18:network  --hostname=linuxcool.com</code></pre><p>​    搜索某个文件中，不包含某个关键词的内容：</p><pre><code>[root@linuxcool ~]# grep -v nologin /etc/passwdroot:x:0:0:root:/root:/bin/bashsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltlinuxprobe:x:1000:1000:linuxprobe:/home/linuxprobe:/bin/bash</code></pre><p>​    搜索当前工作目录中，包含某个关键词内容的文件，未找到则提示：</p><pre><code>[root@linuxcool ~]# grep -l root *anaconda-ks.cfggrep: Desktop: Is a directorygrep: Documents: Is a directorygrep: Downloads: Is a directoryinitial-setup-ks.cfggrep: Music: Is a directorygrep: Pictures: Is a directorygrep: Public: Is a directorygrep: Templates: Is a directorygrep: Videos: Is a directory</code></pre><p>​    搜索当前工作目录中，包含某个关键词内容的文件，未找到不提示：</p><pre><code>[root@linuxcool ~]# grep -sl root *anaconda-ks.cfginitial-setup-ks.cfg</code></pre><p>​    递归搜索，不仅搜索指定目录，还搜索其内子目录内是否有关键词文件：</p><pre><code>[root@linuxcool ~]# grep -srl root /etc/etc/fstab/etc/X11/xinit/Xclients/etc/X11/xinit/xinitrc/etc/libreport/events.d/collect_dnf.conf/etc/libreport/events.d/bugzilla_anaconda_event.conf/etc/libreport/forbidden_words.conf………………省略部分输出信息………………</code></pre><p>​    搜索某个文件中，精准匹配到某个关键词的内容（搜索词应与整行内容完全一样才会显示，有别于一般搜索）：</p><pre><code>[root@linuxcool ~]# grep -x cd anaconda-ks.cfg [root@linuxcool ~]# grep -x cdrom anaconda-ks.cfg cdrom</code></pre><p>​    判断某个文件中，是否包含某个关键词，通过返回状态值输出结果（0为包含，1为不包含），方便在Shell脚本中判断和调用：</p><pre><code>[root@linuxcool ~]# grep -q linuxprobe anaconda-ks.cfg [root@linuxcool ~]# echo $?0[root@linuxcool ~]# grep -q linuxcool anaconda-ks.cfg [root@linuxcool ~]# echo $?1</code></pre><p>​    搜索某个文件中，空行的数量：</p><pre><code>[root@linuxcool ~]# grep -c ^$ anaconda-ks.cfg 6</code></pre><h2 id="十一-find命令-–-根据路径和条件搜索指定文件"><a href="#十一-find命令-–-根据路径和条件搜索指定文件" class="headerlink" title="十一.find命令 – 根据路径和条件搜索指定文件"></a>十一.find命令 – 根据路径和条件搜索指定文件</h2><p>​    find命令的功能是根据给定的路径和条件查找相关文件或目录，可以使用的参数很多，并且支持正则表达式，结合管道符后能够实现更加复杂的功能，是系统管理员和普通用户日常工作必须掌握的命令之一。</p><p>​    find命令通常进行的是从根目录（/）开始的全盘搜索，有别于whereis、which、locate……等等的有条件或部分文件的搜索。对于服务器负载较高的情况，建议不要在高峰时期使用find命令的模糊搜索，会相对消耗较多的系统资源。</p><p>​    <strong>语法格式</strong>：find [路径] [参数]</p><p>​    <strong>常用参数</strong>：</p><table><thead><tr><th align="center">-name</th><th align="center">匹配名称</th></tr></thead><tbody><tr><td align="center">-perm</td><td align="center">匹配权限（mode为完全匹配，-mode为包含即可）</td></tr><tr><td align="center">-user</td><td align="center">匹配所有者</td></tr><tr><td align="center">-group</td><td align="center">匹配所有组</td></tr><tr><td align="center">-mtime -n +n</td><td align="center">匹配修改内容的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td align="center">-atime -n +n</td><td align="center">匹配访问文件的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td align="center">-ctime -n +n</td><td align="center">匹配修改文件权限的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td align="center">-nouser</td><td align="center">匹配无所有者的文件</td></tr><tr><td align="center">-nogroup</td><td align="center">匹配无所有组的文件</td></tr><tr><td align="center">-newer f1 !f2</td><td align="center">匹配比文件f1新但比f2旧的文件</td></tr><tr><td align="center">-type b/d/c/p/l/f</td><td align="center">匹配文件类型（后面的字幕字母依次表示块设备、目录、字符设备、管道、链接文件、文本文件）</td></tr><tr><td align="center">-size</td><td align="center">匹配文件的大小（+50KB为查找超过50KB的文件，而-50KB为查找小于50KB的文件）</td></tr><tr><td align="center">-prune</td><td align="center">忽略某个目录</td></tr><tr><td align="center">-exec …… {};</td><td align="center">后面可跟用于进一步处理搜索结果的命令</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    全盘搜索系统中所有以.conf结尾的文件：</p><pre><code>[root@linuxcool ~]# find / -name *.conf/run/tmpfiles.d/kmod.conf/etc/resolv.conf/etc/dnf/dnf.conf/etc/dnf/plugins/copr.conf/etc/dnf/plugins/debuginfo-install.conf/etc/dnf/plugins/product-id.conf/etc/dnf/plugins/subscription-manager.conf………………省略部分输出信息………………</code></pre><p>​    在/etc目录中搜索所有大约1M大小的文件：</p><pre><code>[root@linuxcool ~]# find /etc -size +1M/etc/selinux/targeted/policy/policy.31/etc/udev/hwdb.bin</code></pre><p>​    在/home目录中搜索所有属于指定用户的文件：</p><pre><code>[root@linuxcool ~]# find /home -user linuxprobe/home/linuxprobe/home/linuxprobe/.mozilla/home/linuxprobe/.mozilla/extensions/home/linuxprobe/.mozilla/plugins/home/linuxprobe/.bash_logout/home/linuxprobe/.bash_profile/home/linuxprobe/.bashrc</code></pre><p>​    列出当前工作目录中的所有文件、目录以及子文件信息：</p><pre><code>[root@linuxcool ~]# find .../.bash_logout./.bash_profile./.bashrc./.cshrc./.tcshrc./anaconda-ks.cfg………………省略部分输出信息………………</code></pre><p>​    在/var/log目录下搜索所有指定后缀的文件，后缀不需要大小写。</p><pre><code>[root@linuxcool ~]# find /var/log -iname &quot;*.log&quot;/var/log/audit/audit.log/var/log/rhsm/rhsmcertd.log/var/log/rhsm/rhsm.log/var/log/sssd/sssd.log/var/log/sssd/sssd_implicit_files.log/var/log/sssd/sssd_nss.log/var/log/sssd/sssd_kcm.log/var/log/tuned/tuned.log/var/log/anaconda/anaconda.log/var/log/anaconda/X.log………………省略部分输出信息………………</code></pre><p>​    在/var/log目录下搜索所有后缀不是.log的文件：</p><pre><code>[root@linuxcool ~]# find /var/log ! -name &quot;*.log&quot;/var/log/var/log/lastlog/var/log/README/var/log/private/var/log/wtmp/var/log/btmp/var/log/samba</code></pre><p>​    搜索当前工作目录中的所有近7天被修改过的文件：</p><pre><code>[root@linuxcool ~]# find . -mtime +7./.bash_logout./.bash_profile./.bashrc./.cshrc./.tcshrc………………省略部分输出信息………………</code></pre><p>​    全盘搜索系统中所有类型为目录，且权限为1777的目录文件：</p><pre><code>[root@linuxcool ~]# find / -type d -perm 1777/dev/mqueue/dev/shm/var/tmp/tmp………………省略部分输出信息………………</code></pre><p>​    全盘搜索系统中所有类型为普通文件，且可以执行的文件信息：</p><pre><code>[root@linuxcool ~]# find / -type f -perm /a=x /boot/vmlinuz-4.18.0-80.el8.x86_64/boot/vmlinuz-0-rescue-c8b04558503242459d908c6c22a2d481/etc/X11/xinit/xinitrc.d/50-systemd-user.sh/etc/X11/xinit/xinitrc.d/00-start-message-bus.sh/etc/X11/xinit/xinitrc.d/localuser.sh/etc/X11/xinit/Xclients/etc/X11/xinit/Xsession/etc/X11/xinit/xinitrc………………省略部分输出信息………………</code></pre><p>​    全盘搜索系统中所有后缀为.mp4的文件，并删除所有查找到的文件：</p><pre><code>[root@linuxcool ~]# find / -name &quot;*.mp4&quot; -exec rm -rf {} \;</code></pre><h2 id="十二-rpm命令-–-RPM软件包管理器"><a href="#十二-rpm命令-–-RPM软件包管理器" class="headerlink" title="十二.rpm命令 – RPM软件包管理器"></a>十二.rpm命令 – RPM软件包管理器</h2><p>​    rpm命令来自于英文词组”RedHat Package Manager“的缩写，中文译为红帽软件包管理器，其功能是用于在Linux系统下对软件包进行安装、卸载、查询、验证、升级等工作。</p><p>​    <strong>语法格式：</strong>rpm [参数] 软件包</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">查询所有的软件包</th></tr></thead><tbody><tr><td align="center">-b或-t</td><td align="center">设置包装套件的完成阶段，并指定套件档的文件名称；</td></tr><tr><td align="center">-c</td><td align="center">只列出组态配置文件，本参数需配合”-l”参数使用</td></tr><tr><td align="center">-d</td><td align="center">只列出文本文件，本参数需配合”-l”参数使用</td></tr><tr><td align="center">-e</td><td align="center">卸载软件包</td></tr><tr><td align="center">-f</td><td align="center">查询文件或命令属于哪个软件包</td></tr><tr><td align="center">-h</td><td align="center">安装软件包时列出标记</td></tr><tr><td align="center">-i</td><td align="center">安装软件包</td></tr><tr><td align="center">-l</td><td align="center">显示软件包的文件列表</td></tr><tr><td align="center">-p</td><td align="center">查询指定的rpm软件包</td></tr><tr><td align="center">-q</td><td align="center">查询软件包</td></tr><tr><td align="center">-R</td><td align="center">显示软件包的依赖关系</td></tr><tr><td align="center">-s</td><td align="center">显示文件状态，本参数需配合”-l”参数使用</td></tr><tr><td align="center">-U</td><td align="center">升级软件包</td></tr><tr><td align="center">-v</td><td align="center">显示命令执行过程</td></tr><tr><td align="center">-vv</td><td align="center">详细显示指令执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    正常安装软件包：</p><pre><code>[root@linuxcool ~]# rpm -ivh cockpit-185-2.el8.x86_64.rpm Verifying...                          ################################# [100%]Preparing...                          ################################# [100%]    package cockpit-185-2.el8.x86_64 is already installed</code></pre><p>显示系统已安装过的全部RPM软件包：</p><pre><code>[root@linuxcool ~]# rpm -qaqemu-kvm-block-gluster-2.12.0-63.module+el8+2833+c7d6d092.x86_64boost-atomic-1.66.0-6.el8.x86_64gnome-session-wayland-session-3.28.1-6.el8.x86_64grub2-tools-2.02-66.el8.x86_64lohit-gurmukhi-fonts-2.91.2-3.el8.noarchliberation-fonts-common-2.00.3-4.el8.noarchpolicycoreutils-python-utils-2.8-16.1.el8.noarch………………省略部分输出信息………………</code></pre><p>​    查询某个软件的安装路径：</p><pre><code>[root@linuxcool ~]# rpm -ql cockpit/usr/share/cockpit/usr/share/doc/cockpit/AUTHORS/usr/share/doc/cockpit/COPYING/usr/share/doc/cockpit/README.md/usr/share/man/man1/cockpit.1.gz/usr/share/metainfo/cockpit.appdata.xml/usr/share/pixmaps/cockpit.png</code></pre><p>​    卸载某个通过RPM软件包安装的服务：</p><pre><code>[root@linuxcool ~]# rpm -evh cockpitPreparing...                          ################################# [100%]Cleaning up / removing...   1:cockpit-185-2.el8                ################################# [100%]</code></pre><p>​    升级某个软件包：</p><pre><code>[root@linuxcool ~]# rpm -Uvh cockpit-185-2.el8.x86_64.rpm Verifying...                          ################################# [100%]Preparing...                          ################################# [100%]Updating / installing...   1:cockpit-185-2.el8                ################################# [100%]</code></pre><h5 id="与该功能相关的Linux命令："><a href="#与该功能相关的Linux命令：" class="headerlink" title="与该功能相关的Linux命令："></a>与该功能相关的Linux命令：</h5><ul><li><a href="https://www.linuxcool.com/journalctl-2" target="_blank" rel="noopener">[重]journalctl命令 – 检索systemd日志</a></li><li><a href="https://www.linuxcool.com/metareplace" target="_blank" rel="noopener">metareplace命令 – 启用或替换子镜像或RAID5元设备的组件</a></li><li><a href="https://www.linuxcool.com/testparm" target="_blank" rel="noopener">testparm命令 – 测试Samba的设置是否正确无误</a></li><li><a href="https://www.linuxcool.com/whoami" target="_blank" rel="noopener">whoami命令 – 打印当前登录用户</a></li><li><a href="https://www.linuxcool.com/cal" target="_blank" rel="noopener">cal命令 – 显示日历</a></li><li><a href="https://www.linuxcool.com/rht-vmctl" target="_blank" rel="noopener">rht-vmctl命令 – 控制VM</a></li><li><a href="https://www.linuxcool.com/tset" target="_blank" rel="noopener">tset命令 – 终端初始化</a></li><li><a href="https://www.linuxcool.com/ssh-copy-id" target="_blank" rel="noopener">ssh-copy-id命令 – 复制SSH公钥到远程主机</a></li><li><a href="https://www.linuxcool.com/strace" target="_blank" rel="noopener">strace命令 – 跟踪系统调用</a></li><li><a href="https://www.linuxcool.com/systemctl" target="_blank" rel="noopener">systemctl命令 – 管理系统服务</a></li></ul><h2 id="十三-startx命令-–-初始化X-windows系统"><a href="#十三-startx命令-–-初始化X-windows系统" class="headerlink" title="十三.startx命令 – 初始化X-windows系统"></a>十三.startx命令 – 初始化X-windows系统</h2><p>​    startx命令来自于英文词组”start X-windows“的缩写，其功能是用于启动X-Windows系统。X-Windows System也被称为X或X11，中文译为X窗口系统，主要工作就是以图形方式显示软件窗口的系统，现在的GNOME和KDE桌面环境都是以X窗口系统为基础构建成的。</p><p>​    <strong>语法格式：</strong>startx [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th>— -depth &lt;数字&gt;</th><th>指定颜色深度</th></tr></thead><tbody><tr><td>-m</td><td>当未找到启动脚本时，启动窗口管理器</td></tr><tr><td>-r</td><td>当未找到启动脚本时，装入资源文件</td></tr><tr><td>-w</td><td>强制启动</td></tr><tr><td>-x</td><td>使用startup脚本启动X-windows会话</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    以默认方式初始化启动X窗口系统：</p><pre><code>[root@linuxcool ~]# startxX.Org X Server 1.20.3X Protocol Version 11, Revision 0Build Operating System:  4.14.0-49.el7a.noaead.x86_64 Current Operating System: Linux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64………………省略部分输出信息………………</code></pre><p>​    指定以16位颜色深度启动X窗口系统：</p><pre><code>[root@linuxcool ~]# startx -- -depth 16X.Org X Server 1.20.3X Protocol Version 11, Revision 0Build Operating System:  4.14.0-49.el7a.noaead.x86_64 Current Operating System: Linux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64………………省略部分输出信息………………</code></pre><p>​    强制启动X窗口系统：</p><pre><code>[root@linuxcool ~]# startx -wX.Org X Server 1.20.3X Protocol Version 11, Revision 0Build Operating System:  4.14.0-49.el7a.noaead.x86_64 Current Operating System: Linux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64………………省略部分输出信息………………</code></pre><h2 id="十四-ps命令-–-显示进程状态"><a href="#十四-ps命令-–-显示进程状态" class="headerlink" title="十四.ps命令 – 显示进程状态"></a>十四.ps命令 – 显示进程状态</h2><p>​    ps命令来自于英文词组”process status“的缩写，其功能是用于显示当前系统的进程状态。使用ps命令可以查看到进程的所有信息，例如进程的号码、发起者、系统资源使用占比（处理器与内存）、运行状态等等。帮助我们及时的发现哪些进程出现”僵死“或”不可中断“等异常情况。</p><p>经常会与kill命令搭配使用来中断和删除不必要的服务进程，避免服务器的资源浪费。</p><p>​    <strong>语法格式：</strong>ps [参数]</p><p>​    <strong>常用参数：</strong>﻿</p><table><thead><tr><th align="center">a</th><th align="center">显示现行终端机下的所有程序，包括其他用户的程序</th></tr></thead><tbody><tr><td align="center">-A</td><td align="center">显示所有程序</td></tr><tr><td align="center">c</td><td align="center">显示每个程序真正的指令名称，而不包含路径</td></tr><tr><td align="center">-C &lt;指令名称&gt;</td><td align="center">指定执行指令的名称，并列出该指令的程序的状况</td></tr><tr><td align="center">-d</td><td align="center">显示所有程序，但不包括阶段作业管理员的程序</td></tr><tr><td align="center">e</td><td align="center">列出程序时，显示每个程序所使用的环境变量</td></tr><tr><td align="center">-f</td><td align="center">显示UID,PPIP,C与STIME栏位</td></tr><tr><td align="center">f</td><td align="center">用ASCII字符显示树状结构，表达程序间的相互关系</td></tr><tr><td align="center">g</td><td align="center">显示现行终端机下的所有程序，包括所属组的程序</td></tr><tr><td align="center">-G &lt;群组识别码&gt;</td><td align="center">列出属于该群组的程序的状况</td></tr><tr><td align="center">h</td><td align="center">不显示标题列</td></tr><tr><td align="center">-H</td><td align="center">显示树状结构，表示程序间的相互关系</td></tr><tr><td align="center">-j</td><td align="center">采用工作控制的格式显示程序状况</td></tr><tr><td align="center">-l</td><td align="center">采用详细的格式来显示程序状况</td></tr><tr><td align="center">L</td><td align="center">列出栏位的相关信息</td></tr><tr><td align="center">-m</td><td align="center">显示所有的执行绪</td></tr><tr><td align="center">n</td><td align="center">以数字来表示USER和WCHAN栏位</td></tr><tr><td align="center">-N</td><td align="center">显示所有的程序，除了执行ps指令终端机下的程序之外</td></tr><tr><td align="center">-p &lt;程序识别码&gt;</td><td align="center">指定程序识别码，并列出该程序的状况</td></tr><tr><td align="center">r</td><td align="center">只列出现行终端机正在执行中的程序</td></tr><tr><td align="center">-s &lt;阶段作业&gt;</td><td align="center">列出隶属该阶段作业的程序的状况</td></tr><tr><td align="center">s</td><td align="center">采用程序信号的格式显示程序状况</td></tr><tr><td align="center">S</td><td align="center">列出程序时，包括已中断的子程序资料</td></tr><tr><td align="center">-t &lt;终端机编号&gt;</td><td align="center">列出属于该终端机的程序的状况</td></tr><tr><td align="center">-T</td><td align="center">显示现行终端机下的所有程序</td></tr><tr><td align="center">u</td><td align="center">以用户为主的格式来显示程序状况</td></tr><tr><td align="center">-U &lt;用户识别码&gt;</td><td align="center">列出属于该用户的程序的状况</td></tr><tr><td align="center">U &lt;用户名称&gt;</td><td align="center">列出属于该用户的程序的状况</td></tr><tr><td align="center">v</td><td align="center">采用虚拟内存的格式显示程序状况</td></tr><tr><td align="center">-V或V</td><td align="center">显示版本信息</td></tr><tr><td align="center">-w或w</td><td align="center">采用宽阔的格式来显示程序状况</td></tr><tr><td align="center">x</td><td align="center">显示所有程序，不以终端机来区分</td></tr><tr><td align="center">X</td><td align="center">采用旧式的Linux i386登陆格式显示程序状况</td></tr><tr><td align="center">-y</td><td align="center">配合选项”-l”使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位</td></tr><tr><td align="center">–cols &lt;每列字符数&gt;</td><td align="center">设置每列的最大字符数</td></tr><tr><td align="center">–headers</td><td align="center">重复显示标题列</td></tr><tr><td align="center">–help</td><td align="center">在线帮助</td></tr><tr><td align="center">–info</td><td align="center">显示排错信息</td></tr><tr><td align="center">–lines &lt;显示列数&gt;</td><td align="center">设置显示画面的列数</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统中全部的进程信息，含详细信息：</p><pre><code>[root@linuxcool ~]# ps aux USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot          2  0.0  0.0      0     0 ?        S    20:05   0:00 [kthreadd]root          3  0.0  0.0      0     0 ?        I&lt;   20:05   0:00 [rcu_gp]root          4  0.0  0.0      0     0 ?        I&lt;   20:05   0:00 [rcu_par_gp]………………省略部分输出信息………………</code></pre><p>​    结合输出重定向，将当前进程信息保留备份至指定文件：</p><pre><code>[root@linuxcool ~]# ps aux &gt; backup.txt</code></pre><p>​    结合管道操作符，将当前系统运行状态中指定进程信息过滤出来：</p><pre><code>[root@linuxcool ~]# ps -ef | grep ssh………………省略输出信息………………</code></pre><p>​    结合管道操作符，将当前系统运行状态中指定用户的进程信息过滤出来：</p><pre><code>[root@linuxcool ~]# ps -u root   PID TTY          TIME CMD     1 ?        00:00:01 systemd     2 ?        00:00:00 kthreadd     3 ?        00:00:00 rcu_gp     4 ?        00:00:00 rcu_par_gp………………省略部分输出信息………………</code></pre><p>​    结合管道操作符与sort命令，依据处理器使用量（第三列）情况降序排序：</p><pre><code>[root@linuxcool ~]# ps aux | sort -rnk 3USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot       2341  0.4  8.1 4504040 164896 tty2   Sl+  20:05   0:24 /usr/bin/gnome-shellroot       4534  0.3  0.4 220064  8520 ?        Ssl  21:37   0:00 /usr/libexec/nm-dispatchergdm        1541  0.1  7.3 4211428 147400 tty1   Sl+  20:05   0:06 /usr/bin/gnome-shell………………省略部分输出信息………………</code></pre><p>​    结合管道操作符与sort命令，依据内存使用量（第四列）情况降序排序：</p><pre><code>[root@linuxcool ~]# ps aux | sort -rnk 4USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot       2341  0.4  8.1 4503976 164828 tty2   Sl+  20:05   0:27 /usr/bin/gnome-shellgdm        1541  0.1  7.3 4211428 147556 tty1   Sl+  20:05   0:08 /usr/bin/gnome-shellroot       2661  0.0  3.1 1271636 63004 tty2    Sl+  20:05   0:01 /usr/bin/gnome-software --gapplication-service………………省略部分输出信息………………</code></pre><h2 id="十五-uname命令-–-显示系统内核信息"><a href="#十五-uname命令-–-显示系统内核信息" class="headerlink" title="十五.uname命令 – 显示系统内核信息"></a>十五.uname命令 – 显示系统内核信息</h2><p>​    uname命令来自于英文词组”Unix name“的缩写，其功能是用于查看系统主机名、内核及硬件架构等信息。如果不加任何参数，默认仅显示系统内核名称，相当于-s参数。</p><p>​    <strong>语法格式：</strong>uname [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示系统所有相关信息</th></tr></thead><tbody><tr><td align="center">-m</td><td align="center">显示计算机硬件架构</td></tr><tr><td align="center">-n</td><td align="center">显示主机名称</td></tr><tr><td align="center">-r</td><td align="center">显示内核发行版本号</td></tr><tr><td align="center">-s</td><td align="center">显示内核名称</td></tr><tr><td align="center">-v</td><td align="center">显示内核版本</td></tr><tr><td align="center">-p</td><td align="center">显示主机处理器类型</td></tr><tr><td align="center">-o</td><td align="center">显示操作系统名称</td></tr><tr><td align="center">-i</td><td align="center">显示硬件平台</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统内核名称：</p><pre><code>[root@linuxcool ~]# unameLinux</code></pre><p>​    显示系统所有相关信息（含内核名称、主机名、版本号及硬件架构）：</p><pre><code>[root@linuxcool ~]# uname -aLinux linuxcool.com 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</code></pre><p>​    显示系统内核版本号：</p><pre><code>[root@linuxcool ~]# uname -r 4.18.0-80.el8.x86_64</code></pre><p>​    现在系统硬件架构：</p><pre><code>[root@linuxcool ~]# uname -ix86_64</code></pre><h2 id="十六-df命令-–-显示磁盘空间使用情况"><a href="#十六-df命令-–-显示磁盘空间使用情况" class="headerlink" title="十六.df命令 – 显示磁盘空间使用情况"></a>十六.df命令 – 显示磁盘空间使用情况</h2><p>​    df命令来自于英文词组”Disk Free“的缩写，其功能是用于显示系统上磁盘空间的使用量情况。df命令显示的磁盘使用量情况含可用、已有及使用率等信息，默认单位为Kb，建议使用-h参数进行单位换算，毕竟135M比138240Kb更利于阅读对吧~</p><p>​    <strong>语法格式：</strong> df [参数] [对象磁盘/分区]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示所有系统文件</th></tr></thead><tbody><tr><td align="center">-B &lt;块大小&gt;</td><td align="center">指定显示时的块大小</td></tr><tr><td align="center">-h</td><td align="center">以容易阅读的方式显示</td></tr><tr><td align="center">-H</td><td align="center">以1000字节为换算单位来显示</td></tr><tr><td align="center">-i</td><td align="center">显示索引字节信息</td></tr><tr><td align="center">-k</td><td align="center">指定块大小为1KB</td></tr><tr><td align="center">-l</td><td align="center">只显示本地文件系统</td></tr><tr><td align="center">-t &lt;文件系统类型&gt;</td><td align="center">只显示指定类型的文件系统</td></tr><tr><td align="center">-T</td><td align="center">输出时显示文件系统类型</td></tr><tr><td align="center">– -sync</td><td align="center">在取得磁盘使用信息前，先执行sync命令</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    带有容量单位的显示系统全部磁盘使用量情况：</p><pre><code>[root@linuxcool ~]# df -hFilesystem             Size  Used Avail Use% Mounted ondevtmpfs               969M     0  969M   0% /devtmpfs                  984M     0  984M   0% /dev/shmtmpfs                  984M  9.6M  974M   1% /runtmpfs                  984M     0  984M   0% /sys/fs/cgroup/dev/mapper/rhel-root   17G  3.9G   14G  23% //dev/sr0               6.7G  6.7G     0 100% /media/cdrom/dev/sda1             1014M  152M  863M  15% /boottmpfs                  197M   16K  197M   1% /run/user/42tmpfs                  197M  3.5M  194M   2% /run/user/0</code></pre><p>​    带有容量单位的显示指定磁盘分区使用量情况：</p><pre><code>[root@linuxcool ~]# df -h /bootFilesystem      Size  Used Avail Use% Mounted on/dev/sda1      1014M  152M  863M  15% /boot</code></pre><p>​    显示系统中所有文件系统格式为xfs的磁盘分区使用量情况：</p><pre><code>[root@linuxcool ~]# df -t xfsFilesystem            1K-blocks    Used Available Use% Mounted on/dev/mapper/rhel-root  17811456 4041320  13770136  23% //dev/sda1               1038336  155556    882780  15% /boot</code></pre><h2 id="十七-fdisk命令-–-管理磁盘分区"><a href="#十七-fdisk命令-–-管理磁盘分区" class="headerlink" title="十七.fdisk命令 – 管理磁盘分区"></a>十七.fdisk命令 – 管理磁盘分区</h2><p>​    fdisk命令来自于英文词组“Partition table manipulator for Linux”的缩写，其功能是用于管理磁盘的分区信息。如果一套几百平米的房子内部没有墙壁，虽然看起来会很敞亮，但是各种声音、气味、物品会随意充斥在整个房子内，让人极不舒适，因此需要用墙壁按照功能进行划分，例如卧室、厕所、厨房、阳台等等。</p><p>​    fdisk命令可以用于对磁盘进行分区操作，用户可以根据实际情况进行合理划分，这样后期挂载和使用时会方便很多。</p><p>​    <strong>语法格式：</strong>fdisk [参数] [设备]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-b</th><th align="center">指定每个分区的大小</th></tr></thead><tbody><tr><td align="center">-l</td><td align="center">列出指定的外围设备的分区表状况</td></tr><tr><td align="center">-s</td><td align="center">将指定的分区大小输出到标准输出上，单位为区块</td></tr><tr><td align="center">-u</td><td align="center">搭配”-l”参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址</td></tr><tr><td align="center">-v</td><td align="center">显示版本信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查看当前系统的分区情况：</p><pre><code>[root@linuxcool ~]# fdisk -lDisk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x5f1d8ee5Device     Boot   Start      End  Sectors Size Id Type/dev/sda1  *       2048  2099199  2097152   1G 83 Linux/dev/sda2       2099200 41943039 39843840  19G 8e Linux LVM………………省略部分输出信息………………</code></pre><p>​    管理指定硬盘的分区（过程省略，以《Linux就该这么学》第6章节为准）：</p><pre><code>[root@linuxcool ~]# fdisk /dev/sdaWelcome to fdisk (util-linux 2.32.1).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.Command (m for help): n All space for primary partitions is in use.Command (m for help): m Help:  DOS (MBR)   a   toggle a bootable flag   b   edit nested BSD disklabel   c   toggle the dos compatibility flag  Generic   d   delete a partition   F   list free unpartitioned space   l   list known partition types   n   add a new partition   p   print the partition table   t   change a partition type   v   verify the partition table   i   print information about a partition  Misc   m   print this menu   u   change display/entry units   x   extra functionality (experts only)  Script   I   load disk layout from sfdisk script file   O   dump disk layout to sfdisk script file  Save &amp; Exit   w   write table to disk and exit   q   quit without saving changes  Create a new label   g   create a new empty GPT partition table   G   create a new empty SGI (IRIX) partition table   o   create a new empty DOS partition table   s   create a new empty Sun partition table………………省略部分输出信息………………</code></pre><h2 id="十八-lsblk命令-–-查看系统的磁盘使用情况"><a href="#十八-lsblk命令-–-查看系统的磁盘使用情况" class="headerlink" title="十八.lsblk命令 – 查看系统的磁盘使用情况"></a>十八.lsblk命令 – 查看系统的磁盘使用情况</h2><p>​    lsblk命令来自于英文词组”list block“的缩写，其功能是用于查看系统的磁盘使用情况。</p><p>​    <strong>语法格式：</strong>lsblk [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示所有设备</th></tr></thead><tbody><tr><td align="center">-b</td><td align="center">以字节单位显示设备大小</td></tr><tr><td align="center">-d</td><td align="center">不显示 slaves 或 holders</td></tr><tr><td align="center">-e</td><td align="center">排除设备</td></tr><tr><td align="center">-f</td><td align="center">显示文件系统信息</td></tr><tr><td align="center">-h</td><td align="center">显示帮助信息</td></tr><tr><td align="center">-i</td><td align="center">仅使用字符</td></tr><tr><td align="center">-m</td><td align="center">显示权限信息</td></tr><tr><td align="center">-l</td><td align="center">使用列表格式显示</td></tr><tr><td align="center">-n</td><td align="center">不显示标题</td></tr><tr><td align="center">-o</td><td align="center">输出列</td></tr><tr><td align="center">-P</td><td align="center">使用key=”value”格式显示</td></tr><tr><td align="center">-r</td><td align="center">使用原始格式显示</td></tr><tr><td align="center">-t</td><td align="center">显示拓扑结构信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统中所有磁盘设备的使用情况信息：</p><pre><code>[root@linuxcool ~]# lsblk -aNAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda             8:0    0   20G  0 disk ├─sda1          8:1    0    1G  0 part /boot└─sda2          8:2    0   19G  0 part   ├─rhel-root 253:0    0   17G  0 lvm  /  └─rhel-swap 253:1    0    2G  0 lvm  [SWAP]sr0            11:0    1  6.6G  0 rom  /media/cdrom</code></pre><p>​    显示系统中磁盘设备的归属及权限信息：</p><pre><code>[root@linuxcool ~]# lsblk -mNAME           SIZE OWNER GROUP MODEsda             20G root  disk  brw-rw----├─sda1           1G root  disk  brw-rw----└─sda2          19G root  disk  brw-rw----  ├─rhel-root   17G root  disk  brw-rw----  └─rhel-swap    2G root  disk  brw-rw----sr0            6.6G root  cdrom brw-rw----</code></pre><p>​    显示系统中所有SCSI类型的磁盘设备信息：</p><pre><code>[root@linuxcool ~]# lsblk -SNAME HCTL       TYPE VENDOR   MODEL             REV TRANsda  2:0:0:0    disk ATA      VMware Virtual S 0001 satasr0  3:0:0:0    rom  NECVMWar VMware SATA CD01 1.00 sata</code></pre><p>​    以列表格式显示磁盘设备信息，并且不显示标题：</p><pre><code>[root@linuxcool ~]# lsblk -nlsda         8:0    0   20G  0 disk sda1        8:1    0    1G  0 part /bootsda2        8:2    0   19G  0 part sr0        11:0    1  6.6G  0 rom  /media/cdromrhel-root 253:0    0   17G  0 lvm  /rhel-swap 253:1    0    2G  0 lvm  [SWAP]</code></pre><h2 id="十九-vgextend命令-–-扩展卷组设备"><a href="#十九-vgextend命令-–-扩展卷组设备" class="headerlink" title="十九.vgextend命令 – 扩展卷组设备"></a>十九.vgextend命令 – 扩展卷组设备</h2><p>​    vgextend命令来自于英文词组“volume group extend”的缩写，其功能是用于扩展卷组设备。LVM逻辑卷管理器技术具有灵活调整卷组与逻辑卷的特点，卷组可以在创建时规定物理卷的数量，亦可以在后期使用vgextend命令进行扩展。</p><p>​    <strong>语法格式：</strong>vgextend [参数] 卷组</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-d</th><th align="center">调试模式</th></tr></thead><tbody><tr><td align="center">-t</td><td align="center">仅测试</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    将指定的物理卷加入到卷组设备中：</p><pre><code>[root@linuxcool ~]# vgextend storage /dev/sdb Volume group &quot;storage&quot; successfully extended</code></pre><h2 id="二十-hdparm命令-–-显示与设定硬盘参数"><a href="#二十-hdparm命令-–-显示与设定硬盘参数" class="headerlink" title="二十.hdparm命令 – 显示与设定硬盘参数"></a>二十.hdparm命令 – 显示与设定硬盘参数</h2><p>​    hdparm命令来自于英文词组“hard disk parameters”的缩写，其功能是用于显示与设定硬盘参数。对于初次接手一块硬盘设备，了解相关性能属性有很好的帮助。</p><p>​    <strong>语法格式：</strong>hdparm [参数] 设备名</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">设定读取文件时，预先存入块区的分区数</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">将内存缓冲区的数据写入硬盘，并清空缓冲区</td></tr><tr><td align="center">-g</td><td align="center">显示硬盘的磁轨，磁头，磁区等参数</td></tr><tr><td align="center">-t</td><td align="center">评估硬盘读取效率</td></tr><tr><td align="center">-I</td><td align="center">直接读取硬盘所提供的硬件规格信息</td></tr><tr><td align="center">-X</td><td align="center">设定硬盘的传输模式</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示指定硬盘的相关信息：</p><pre><code>[root@linuxcool ~]# hdparm /dev/sdb/dev/sdb: multcount     = 255 (on) IO_support    =  1 (32-bit) readonly      =  0 (off) readahead     = 8192 (on) geometry      = 2610/255/63, sectors = 41943040, start = 0</code></pre><p>​    仅显示指定硬盘的柱面、磁头和扇区数信息：</p><pre><code>[root@linuxcool ~]# hdparm -g /dev/sdb/dev/sdb: geometry      = 2610/255/63, sectors = 41943040, start = 0</code></pre><p>​    评估指定硬盘的读取效率：</p><pre><code>[root@linuxcool ~]# hdparm -t /dev/sdb/dev/sdb: Timing buffered disk reads: 5386 MB in  3.00 seconds = 1795.12 MB/sec</code></pre><p>​    读取指定硬盘所提供的硬件规格信息：</p><pre><code>[root@linuxcool ~]# hdparm -X /dev/sdb/dev/sdb: setting xfermode to 0 (default PIO mode)SG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 12 00 00 00 00 24 00 00 c0 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00</code></pre><h2 id="二十一-tftp命令-–-上传及下载文件"><a href="#二十一-tftp命令-–-上传及下载文件" class="headerlink" title="二十一.tftp命令 – 上传及下载文件"></a>二十一.tftp命令 – 上传及下载文件</h2><p>​    tftp命令来自于英文词组”Trivial File Transfer Protocol“的缩写，中文译为简单文件传输协议，其功能是基于TFTP协议进行的文件传输工作。用户可以通过文字模式将文件上传至远程服务器，亦可以从服务器下载文件到本地主机。</p><p>​    TFTP基于69/udp协议，不同于FTP文件传输协议，属于轻量级的传输服务，不具备显示文件列表、断点续传等功能。</p><p>​    <strong>语法格式：</strong>tftp [参数] 主机</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">connect</th><th align="center">连接到远程tftp服务器</th></tr></thead><tbody><tr><td align="center">mode</td><td align="center">文件传输模式</td></tr><tr><td align="center">put</td><td align="center">上传文件</td></tr><tr><td align="center">get</td><td align="center">下载文件</td></tr><tr><td align="center">quit</td><td align="center">退出</td></tr><tr><td align="center">verbose</td><td align="center">显示详细的处理信息</td></tr><tr><td align="center">trace</td><td align="center">显示包路径</td></tr><tr><td align="center">status</td><td align="center">显示当前状态信息</td></tr><tr><td align="center">binary</td><td align="center">二进制传输模式</td></tr><tr><td align="center">ascii</td><td align="center">ascii 传送模式</td></tr><tr><td align="center">rexmt</td><td align="center">设置包传输的超时时间</td></tr><tr><td align="center">timeout</td><td align="center">设置重传的超时时间</td></tr><tr><td align="center">help</td><td align="center">帮助信息</td></tr><tr><td align="center">?</td><td align="center">帮助信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    远程连接至指定服务器：</p><pre><code>[root@linuxcool ~]# tftp 192.168.10.10</code></pre><p>​    下载远程指定服务器中的文件至本地工作目录：</p><pre><code>tftp&gt; get File1.txt</code></pre><p>​    上传本地工作目录中某个文件至远程指定服务器：</p><pre><code>tftp&gt; put File2.txt</code></pre><p>​    退出登录某台远程服务器：</p><pre><code>tftp&gt; quit</code></pre><h2 id="二十二-curl命令-–-文件传输工具"><a href="#二十二-curl命令-–-文件传输工具" class="headerlink" title="二十二.curl命令 – 文件传输工具"></a>二十二.curl命令 – 文件传输工具</h2><p>​    curl命令来自于英文词组”CommandLine URL“的缩写，其功能是用于在Shell终端界面中基于URL规则进行的文件传输工作。curl是一款综合的传输工具，可以上传也可以下载，支持HTTP、HTTPS、FTP等三十余种常见协议</p><p>​    <strong>语法格式：</strong>curl [参数] 网址</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-o</th><th align="center">指定新的本地文件名</th></tr></thead><tbody><tr><td align="center">-O</td><td align="center">保留远程文件的原始名</td></tr><tr><td align="center">-u</td><td align="center">通过服务端配置的用户名和密码授权访问</td></tr><tr><td align="center">-I</td><td align="center">打印HTTP响应头信息</td></tr><tr><td align="center">-u</td><td align="center">指定登录账户密码信息</td></tr><tr><td align="center">-A</td><td align="center">设置用户代理标头信息</td></tr><tr><td align="center">-b</td><td align="center">设置用户cookie信息</td></tr><tr><td align="center">-C</td><td align="center">支持断点续传</td></tr><tr><td align="center">-s</td><td align="center">静默模式，不输出任何信息</td></tr><tr><td align="center">-T</td><td align="center">上传文件</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    获取指定网站的网页源码：</p><pre><code>[root@linuxcool ~]# curl https://www.linuxcool.com  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;/&gt;&lt;meta charset=&quot;UTF-8&quot; /&gt;………………省略部分输出信息………………</code></pre><p>​    下载指定网站中的文件：</p><pre><code>[root@linuxcool ~]# curl -O https://www.linuxprobe.com/docs/LinuxProbe.pdf  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 16.8M  100 16.8M    0     0  22.5M      0 --:--:-- --:--:-- --:--:-- 22.5M</code></pre><p>​    打印指定网站的HTTP响应头信息：</p><pre><code>[root@linuxcool ~]# curl -I https://www.linuxcool.com  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0HTTP/2 200 server: Tenginecontent-type: text/html; charset=UTF-8vary: Accept-Encodingdate: Wed, 04 May 2022 06:44:26 GMTvary: Accept-Encodingx-powered-by: PHP/7.4.11vary: Accept-Encoding, Cookiecache-control: max-age=3, must-revalidateali-swift-global-savetime: 1651646666via: cache3.l2cn1802[235,234,200-0,M], cache17.l2cn1802[236,0], kunlun10.cn257[403,414,200-0,M], kunlun2.cn257[417,0]x-cache: MISS TCP_REFRESH_MISS dirn:0:416601537x-swift-savetime: Wed, 04 May 2022 06:44:26 GMTx-swift-cachetime: 3timing-allow-origin: *eagleid: ab08f29616516466664417014e</code></pre><p>​    下载指定文件服务器中的文件（用户名：linuxcool，密码：redhat）：</p><pre><code>[root@linuxprobe ~]# curl -u linuxprobe:redhat ftp://www.linuxcool.com/LinuxProbe.pdf</code></pre><h2 id="二十三-fsck命令-–-检查与修复文件系统"><a href="#二十三-fsck命令-–-检查与修复文件系统" class="headerlink" title="二十三.fsck命令 – 检查与修复文件系统"></a>二十三.fsck命令 – 检查与修复文件系统</h2><p>​    fsck命令来自于英文词组“filesystem check”的缩写，其功能是用于检查与修复文件系统。若系统有过突然断电或磁盘异常的情况，建议使用fsck命令对文件系统进行检查与修复，以防数据丢失。</p><p>​    <strong>语法格式：</strong>fsck [参数] 文件系统</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">自动修复文件系统</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制检查</td></tr><tr><td align="center">-A</td><td align="center">依照/etc/fstab文件来检查全部文件系统</td></tr><tr><td align="center">-N</td><td align="center">不执行指令，仅列出实际执行会进行的动作</td></tr><tr><td align="center">-r</td><td align="center">采用互动模式，在执行修复时询问问题</td></tr><tr><td align="center">-R</td><td align="center">略过指定的文件系统不予检查</td></tr><tr><td align="center">-t</td><td align="center">指定要检查的文件系统类型</td></tr><tr><td align="center">-T</td><td align="center">执行fsck指令时，不显示标题信息</td></tr><tr><td align="center">-V</td><td align="center">显示指令执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    检查是否的文件系统是否有损坏：</p><pre><code>[root@linuxcool ~]# fsck /dev/sdbfsck from util-linux 2.32.1e2fsck 1.44.3 (10-July-2018)/dev/sdb: clean, 11/1310720 files, 126322/5242880 blocks</code></pre><p>​    强制检查文件系统的损坏情况：</p><pre><code>[root@linuxcool ~]# fsck -f /dev/sdbfsck from util-linux 2.32.1e2fsck 1.44.3 (10-July-2018)Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/sdb: 11/1310720 files (0.0% non-contiguous), 126322/5242880 blocks</code></pre><h2 id="二十四-lprm命令-–-删除打印队列中的打印任务"><a href="#二十四-lprm命令-–-删除打印队列中的打印任务" class="headerlink" title="二十四.lprm命令 – 删除打印队列中的打印任务"></a>二十四.lprm命令 – 删除打印队列中的打印任务</h2><p>​    lprm命令的英文全称是“Remove jobs from the print queue”，意为用于删除打印队列中的打印任务。尚未完成的打印机工作会被放在打印机贮列之中，这个命令可用来将未送到打印机的工作取消。</p><p>​    <strong>语法格式：</strong>lprm [参数] [任务编号]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-E</th><th align="center">与打印服务器连接时强制使用加密</th></tr></thead><tbody><tr><td align="center">-P</td><td align="center">指定接受打印任务的目标打印机</td></tr><tr><td align="center">-U</td><td align="center">指定可选的用户名</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    将打印机hpprint中的第102号任务移除：</p><pre><code>[root@linuxcool ~]# lprm -Phpprint 102</code></pre><p>​    将第101号任务由预设打印机中移除：</p><pre><code>[root@linuxcool ~]# lprm 101</code></pre><h2 id="二十五-ftpwho命令-–-显示ftp会话信息"><a href="#二十五-ftpwho命令-–-显示ftp会话信息" class="headerlink" title="二十五.ftpwho命令 – 显示ftp会话信息"></a>二十五.ftpwho命令 – 显示ftp会话信息</h2><p>​    ftpwho命令用于显示当前所有以FTP登入的用户会话信息。</p><p>​    执行该命令可得知当前用FTP登入系统的用户有哪些人，以及他们正在进行的操作。</p><p>​    <strong>语法格式：</strong>ftpwho [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th>-h</th><th>显示帮助信息</th></tr></thead><tbody><tr><td>-v</td><td>详细模式，输出更多信息</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    查询当前正在登录FTP 服务器的用户：</p><pre><code>[root@linuxcool ~]# ftpwho</code></pre><p>​    在详细模式下，查询当前正在登录FTP 服务器的用户：</p><pre><code>[root@linuxcool ~]# ftpwho -v</code></pre><p>​    显示帮助信息：</p><pre><code>[root@linuxcool ~]# ftpwho -h</code></pre><h2 id="二十六-ssh命令-–-安全的远程连接服务器"><a href="#二十六-ssh命令-–-安全的远程连接服务器" class="headerlink" title="二十六.ssh命令 – 安全的远程连接服务器"></a>二十六.ssh命令 – 安全的远程连接服务器</h2><p>​    ssh命令的功能是用于安全的远程连接服务器主机系统，作为openssh套件中的客户端连接工具，ssh命令可以让我们轻松的基于ssh加密协议进行远程主机访问，从而实现对远程服务器的管理工作。</p><p>​    <strong>语法格式:</strong> ssh [参数] 远程主机</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-1</th><th align="center">强制使用ssh协议版本1</th></tr></thead><tbody><tr><td align="center">-2</td><td align="center">强制使用ssh协议版本2</td></tr><tr><td align="center">-4</td><td align="center">强制使用IPv4地址</td></tr><tr><td align="center">-6</td><td align="center">强制使用IPv6地址</td></tr><tr><td align="center">-A</td><td align="center">开启认证代理连接转发功能</td></tr><tr><td align="center">-a</td><td align="center">关闭认证代理连接转发功能</td></tr><tr><td align="center">-b&lt;IP地址&gt;</td><td align="center">使用本机指定的地址作为对位连接的源IP地址</td></tr><tr><td align="center">-C</td><td align="center">请求压缩所有数据</td></tr><tr><td align="center">-F&lt;配置文件&gt;</td><td align="center">指定ssh指令的配置文件，默认的配置文件为“/etc/ssh/ssh_config”</td></tr><tr><td align="center">-f</td><td align="center">后台执行ssh指令</td></tr><tr><td align="center">-g</td><td align="center">允许远程主机连接本机的转发端口</td></tr><tr><td align="center">-i&lt;身份文件&gt;</td><td align="center">指定身份文件（即私钥文件）</td></tr><tr><td align="center">-l&lt;登录名&gt;</td><td align="center">指定连接远程服务器的登录用户名</td></tr><tr><td align="center">-N</td><td align="center">不执行远程指令</td></tr><tr><td align="center">-o&lt;选项&gt;</td><td align="center">指定配置选项</td></tr><tr><td align="center">-p&lt;端口&gt;</td><td align="center">指定远程服务器上的端口</td></tr><tr><td align="center">-q</td><td align="center">静默模式，所有的警告和诊断信息被禁止输出</td></tr><tr><td align="center">-X</td><td align="center">开启X11转发功能</td></tr><tr><td align="center">-x</td><td align="center">关闭X11转发功能</td></tr><tr><td align="center">-y</td><td align="center">开启信任X11转发功能</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    基于ssh协议，远程访问服务器主机系统：</p><pre><code>[root@linuxcool ~]# ssh 192.168.10.10The authenticity of host &#39;192.168.10.10 (192.168.10.10)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:ZEjdfRjQV8pVVfu0TSYvDP5UvOHuuogMQSDUgLPG3Kc.Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &#39;192.168.10.10&#39; (ECDSA) to the list of known hosts.root@192.168.10.10&#39;s password: 此处输入远程服务器管理员密码Activate the web console with: systemctl enable --now cockpit.socketLast login: Tue Dec 14 08:49:08 2022[root@linuxprobe ~]# </code></pre><p>​    使用指定的用户身份登录远程服务器主机系统：</p><pre><code>[root@linuxcool ~]# ssh -l linuxprobe 192.168.10.10linuxprobe@192.168.10.10&#39;s password: 此处输入指定用户的密码Activate the web console with: systemctl enable --now cockpit.socket[linuxprobe@linuxprobe ~]$ </code></pre><p>​    登录远程服务器主机系统后执行一条命令：</p><pre><code>[root@linuxcool ~]# ssh 192.168.10.10 &quot;free -m&quot;root@192.168.10.10&#39;s password: 此处输入远程服务器管理员密码              total        used        free      shared  buff/cache   availableMem:           1966        1359          76          21         530         407Swap:          2047           9        2038</code></pre><p>​    强制使用v1版本的ssh加密协议连接远程服务器主机：</p><pre><code>[root@linuxcool ~]# ssh -1 192.168.10.10</code></pre><h2 id="二十七-netstat命令-–-显示网络状态"><a href="#二十七-netstat命令-–-显示网络状态" class="headerlink" title="二十七.netstat命令 – 显示网络状态"></a>二十七.netstat命令 – 显示网络状态</h2><p>​    netstat命令来自于英文词组”network statistics“的缩写，其功能是用于显示各种网络相关信息，例如网络连接状态、路由表信息、接口状态、NAT、多播成员等等。</p><p>​    netstat命令不仅应用于Linux系统，而且在Windows XP、Windows 7、Windows 10及Windows 11中均已默认支持，并且可用参数也相同，有经验的运维人员可以直接上手。</p><p>​    <strong>语法格式：</strong>netstat [参数]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-a</th><th align="center">显示所有连线中的Socket</th></tr></thead><tbody><tr><td align="center">-p</td><td align="center">显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td align="center">-l</td><td align="center">仅列出在监听的服务状态</td></tr><tr><td align="center">-t</td><td align="center">显示TCP传输协议的连线状况</td></tr><tr><td align="center">-u</td><td align="center">显示UDP传输协议的连线状况</td></tr><tr><td align="center">-i</td><td align="center">显示网络界面信息表单</td></tr><tr><td align="center">-r</td><td align="center">显示路由表信息</td></tr><tr><td align="center">-n</td><td align="center">直接使用IP地址，不通过域名服务器</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统网络状态中的所有连接信息：</p><pre><code>[root@linuxcool ~]# netstat -aActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State      tcp        0      0 0.0.0.0:http            0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:https           0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:ms-wbt-server   0.0.0.0:*               LISTEN     </code></pre><p>​    显示系统网络状态中的UDP连接信息：</p><pre><code>[root@linuxcool ~]# netstat -nuActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State      udp        0      0 172.19.226.238:68       172.19.239.253:67       ESTABLISHED</code></pre><p>​    显示系统网络状态中的UDP连接端口号使用信息：</p><pre><code>[root@linuxcool ~]# netstat -apu Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address    Foreign Address       State    PID/Program name    udp        0      0 linuxcool:bootpc _gateway:bootps  ESTABLISHED   1024/NetworkManager udp        0      0 localhost:323           0.0.0.0:*               875/chronyd         udp6       0      0 localhost:323           [::]:*                  875/chronyd </code></pre><p>​    显示网卡当前状态信息：</p><pre><code>[root@linuxcool~]# netstat -i Kernel Interface tableIface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flgeth0             1500    31945      0      0 0         39499      0      0      0 BMRUlo              65536        0      0      0 0             0      0      0      0 LRU</code></pre><p>​    显示网络路由表状态信息：</p><pre><code>[root@linuxcool ~]# netstat -rKernel IP routing tableDestination     Gateway         Genmask         Flags   MSS Window  irtt Ifacedefault         _gateway        0.0.0.0         UG        0 0          0 eth0172.19.224.0    0.0.0.0         255.255.240.0   U         0 0          0 eth0</code></pre><p>​    找到某个服务所对应的连接信息：</p><pre><code>[root@linuxcool ~]# netstat -ap | grep sshunix  2      [ ]         STREAM     CONNECTED     89121805 203890/sshd: root [  unix  3      [ ]         STREAM     CONNECTED     27396    1754/sshd            unix  3      [ ]         STREAM     CONNECTED     89120965 203890/sshd: root [  unix  2      [ ]         STREAM     CONNECTED     89116510 203903/sshd: root@p  unix  2      [ ]         STREAM     CONNECTED     89121803 203890/sshd: root [  unix  2      [ ]         STREAM     CONNECTED     29959    1754/sshd            unix  2      [ ]         DGRAM                    89111175 203890/sshd: root [  unix  3      [ ]         STREAM     CONNECTED     89120964 203903/sshd: root@p  </code></pre><h2 id="二十八-dhclient命令-–-动态获取或释放IP地址"><a href="#二十八-dhclient命令-–-动态获取或释放IP地址" class="headerlink" title="二十八.dhclient命令 – 动态获取或释放IP地址"></a>二十八.dhclient命令 – 动态获取或释放IP地址</h2><p>​    dhclient命令来自于英文词组“DHCP client”的缩写，其功能是用于动态获取或释放IP地址。使用dhclient命令前需要将网卡模式设置成DHCP自动获取，否则静态模式的网卡是不会主动向服务器获取如IP地址等网卡信息的。</p><p>​    <strong>语法格式：</strong>dhclient 参数 [网卡]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-p</th><th align="center">指定dhcp客户端监听的端口号（默认端口号86）</th></tr></thead><tbody><tr><td align="center">-d</td><td align="center">总是以前台方式运行程序</td></tr><tr><td align="center">-q</td><td align="center">安静模式，不打印任何错误的提示信息</td></tr><tr><td align="center">-r</td><td align="center">释放ip地址</td></tr><tr><td align="center">-n</td><td align="center">不配置任何接口</td></tr><tr><td align="center">-x</td><td align="center">停止正在运行的DHCP客户端，而不释放当前租约，杀死现有的dhclient</td></tr><tr><td align="center">-s</td><td align="center">在获取ip地址之前指定DHCP服务器</td></tr><tr><td align="center">-w</td><td align="center">即使没有找到广播接口，也继续运行</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    通过指定网卡发起DHCP请求，获取网卡参数：</p><pre><code>[root@linuxcool ~]# dhclient ens160</code></pre><p>​    释放系统中已获取的网卡参数：</p><pre><code>[root@linuxcool ~]# dhclient -rKilled old client process</code></pre><p>​    向指定的服务器请求获取网卡参数：</p><pre><code>[root@linuxcool ~]# dhclient -s 192.168.10.10</code></pre><p>​    手动停止执行dhclient服务进程：</p><pre><code>[root@linuxcool ~]# dhclient -xRemoved stale PID file</code></pre><h2 id="二十九-ping命令-–-测试主机间网络连通性"><a href="#二十九-ping命令-–-测试主机间网络连通性" class="headerlink" title="二十九.ping命令 – 测试主机间网络连通性"></a>二十九.ping命令 – 测试主机间网络连通性</h2><p>​    ping命令的功能是用于测试主机间网络连通性，发送出基于ICMP传输协议的数据包，要求对方主机予以回复，若对方主机的网络功能没有问题且防火墙放行流量，则就会回复该信息，我们也就可得知对方主机系统在线并运行正常了。</p><p>​    不过值得我们注意的是Linux与Windows相比有一定差异，Windows系统下的ping命令会发送出去4个请求后自动结束该命令；而Linux系统则不会自动终止，需要用户手动按下组合键“Ctrl+c”才能结束，或是发起命令时加入-c参数限定发送个数。</p><p>​    <strong>语法格式：</strong>ping [参数] 目标主机</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">-d</th><th align="center">使用Socket的SO_DEBUG功能</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">指定发送报文的次数</td></tr><tr><td align="center">-i</td><td align="center">指定收发信息的间隔时间</td></tr><tr><td align="center">-I</td><td align="center">使用指定的网络接口送出数据包</td></tr><tr><td align="center">-l</td><td align="center">设置在送出要求信息之前，先行发出的数据包</td></tr><tr><td align="center">-n</td><td align="center">只输出数值</td></tr><tr><td align="center">-p</td><td align="center">设置填满数据包的范本样式</td></tr><tr><td align="center">-q</td><td align="center">不显示指令执行过程</td></tr><tr><td align="center">-R</td><td align="center">记录路由过程</td></tr><tr><td align="center">-s</td><td align="center">设置数据包的大小</td></tr><tr><td align="center">-t</td><td align="center">设置存活数值TTL的大小</td></tr><tr><td align="center">-v</td><td align="center">详细显示指令的执行过程</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    测试与指定网站服务器之间的网络连通性（需手动按下“Ctrl+c”组合键结束命令）：</p><pre><code>[root@linuxcool ~]# ping www.linuxcool.comPING www.linuxcool.com.w.kunlunar.com (222.85.26.229) 56(84) bytes of data.64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=1 ttl=52 time=22.4 ms64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=2 ttl=52 time=22.4 ms64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=3 ttl=52 time=22.4 ms64 bytes from www.linuxcool.com (222.85.26.229): icmp_seq=4 ttl=52 time=22.4 ms^C--- www.linuxcool.com.w.kunlunar.com ping statistics ---5 packets transmitted, 5 received, 0% packet loss, time 4005msrtt min/avg/max/mdev = 22.379/22.389/22.400/0.094 ms</code></pre><p>​    测试与指定网站服务器之间的网络连通性，发送请求包限定为4次：</p><pre><code>[root@linuxcool ~]# ping -c 4 www.linuxcool.comPING www.linuxcool.com (222.85.26.234) 56(84) bytes of data.64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=1 ttl=52 time=24.7 ms64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=2 ttl=52 time=24.7 ms64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=3 ttl=52 time=24.7 ms64 bytes from www.linuxcool.com (222.85.26.234): icmp_seq=4 ttl=52 time=24.7 ms--- www.linuxcool.com.w.kunlunar.com ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 3005msrtt min/avg/max/mdev = 24.658/24.664/24.673/0.111 ms</code></pre><p>​    测试与指定主机之间的网络连通性，发送3次请求包，每次间隔0.2秒，最长等待时间为3秒：</p><pre><code>[root@linuxcool ~]# ping -c 3 -i 0.2 -W 3 192.168.10.1064 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.166 ms64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.060 ms64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.113 ms--- 192.168.10.10 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 410msrtt min/avg/max/mdev = 0.060/0.113/0.166/0.043 ms</code></pre><h2 id="三十-ifconfig命令-–-显示或设置网络设备参数信息"><a href="#三十-ifconfig命令-–-显示或设置网络设备参数信息" class="headerlink" title="三十.ifconfig命令 – 显示或设置网络设备参数信息"></a>三十.ifconfig命令 – 显示或设置网络设备参数信息</h2><p>​    ifconfig命令来自于英文词组”network interfaces configuring“的缩写，其功能是用于显示或设置网络设备参数信息。在Windows系统中与之类似的命令叫做ipconfig，同样的功能可以使用ifconfig去完成。</p><p>​    通常不建议使用ifconfig命令配置网络设备的参数信息，因为一旦服务器重启，配置过的参数会自动失效，还是编写到配置文件中更稳妥。</p><p>​    <strong>语法格式：</strong>ifconfig [参数] [网卡设备]</p><p>​    <strong>常用参数：</strong></p><table><thead><tr><th align="center">add&lt;地址&gt;</th><th align="center">设置网络设备IPv6的IP地址</th></tr></thead><tbody><tr><td align="center">del&lt;地址&gt;</td><td align="center">删除网络设备IPv6的IP地址</td></tr><tr><td align="center">down</td><td align="center">关闭指定的网络设备</td></tr><tr><td align="center">up</td><td align="center">启动指定的网络设备</td></tr><tr><td align="center">IP地址</td><td align="center">指定网络设备的IP地址</td></tr></tbody></table><p>​    <strong>参考实例</strong></p><p>​    显示系统的网络设备信息：</p><pre><code>[root@linuxcool ~]# ifconfigens160: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.10.30  netmask 255.255.255.0  broadcast 192.168.10.255        inet6 fe80::4d16:980c:e0fe:51c2  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 00:0c:29:60:cd:ee  txqueuelen 1000  (Ethernet)        RX packets 407  bytes 34581 (33.7 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 59  bytes 6324 (6.1 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0………………省略部分输出信息………………</code></pre><p>​    对指定的网卡设备依次进行关闭和启动操作：</p><pre><code>[root@linuxcool ~]# ifconfig ens160 down[root@linuxcool ~]# ifconfig ens160 up</code></pre><p>​    对指定的网卡设备执行修改IP地址操作：</p><pre><code>[root@linuxcool ~]# ifconfig ens160 192.168.10.20 netmask 255.255.255.0</code></pre><p>​    对指定的网卡设备执行修改MAC地址操作：</p><p>​    注意Linux系统中的MAC地址间隔符为冒号（：），而在Windows系统中间隔符为减号（-）。</p><pre><code>[root@linuxcool ~]# ifconfig ens160 hw ether 00:aa:bb:cc:dd:ee</code></pre><p>​    对指定的网卡设备依次进行ARP协议关闭和开启操作：</p><pre><code>[root@linuxcool ~]# ifconfig ens160 -arp[root@linuxcool ~]# ifconfig ens160 arp</code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb数据库 </title>
      <link href="/mongodb.html"/>
      <url>/mongodb.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、mongodb"><a href="#一、mongodb" class="headerlink" title="一、mongodb"></a>一、mongodb</h1><h2 id="1-介绍和安装"><a href="#1-介绍和安装" class="headerlink" title="1 介绍和安装"></a>1 介绍和安装</h2><h3 id="1-1-nosql的介绍"><a href="#1-1-nosql的介绍" class="headerlink" title="1.1 nosql的介绍"></a>1.1 nosql的介绍</h3><ul><li>“NoSQL”⼀词最早于1998年被⽤于⼀个轻量级的关系数据库的名字</li><li>随着web2.0的快速发展， NoSQL概念在2009年被提了出来</li><li>NoSQL在2010年⻛⽣⽔起， 现在国内外众多⼤⼩⽹站， 如facebook、 google、 淘宝、 京东、 百度等， 都在使⽤nosql开发⾼性能的产品</li><li>对于⼀名程序员来讲， 使⽤nosql已经成为⼀条必备技能</li><li>NoSQL最常⻅的解释是“non-relational”， “Not Only SQL”也被很多⼈接受， 指的是⾮关系型的数据库</li></ul><h3 id="1-2-关系型和非关系型的介绍"><a href="#1-2-关系型和非关系型的介绍" class="headerlink" title="1.2 关系型和非关系型的介绍"></a>1.2 关系型和非关系型的介绍</h3><p>对于关系型数据库，存储数据的时候需要提前建表建库，随着数据的复杂度越来越高，所建的表的数量也越来越多；但是非关系型却不需要</p><h3 id="1-3-mongodb的势"><a href="#1-3-mongodb的势" class="headerlink" title="1.3 mongodb的势"></a>1.3 mongodb的势</h3><ul><li>易扩展： NoSQL数据库种类繁多， 但是有个共同的特点都是去掉关系数据库的关系型特性。 数据之间⽆关系， 这样就⾮常容易扩展</li><li>⼤数据量， ⾼性能： NoSQL数据库都具有⾮常⾼的读写性能， 尤其在⼤数据量下， 同样表现优秀。 这得益于它的⽆关系性， 数据库的结构简单</li><li>灵活的数据模型： NoSQL⽆需事先为要存储的数据建⽴字段， 随时可以存储⾃定义的数据格式。 ⽽在关系数据库⾥， 增删字段是⼀件⾮常麻烦的事情。 如果是⾮常⼤数据量的表， 增加字段简直就是⼀个噩梦</li></ul><h3 id="1-4-mongodb的安装"><a href="#1-4-mongodb的安装" class="headerlink" title="1.4 mongodb的安装"></a>1.4 mongodb的安装</h3><h4 id="1-命令安装"><a href="#1-命令安装" class="headerlink" title="1 命令安装"></a>1 命令安装</h4><pre><code>sudo apt-get install -y mongodb-org     -y:意思是对安装过程中有yes/no的时候，全部yeshttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</code></pre><h4 id="1-5-mongodb的启动"><a href="#1-5-mongodb的启动" class="headerlink" title="1.5 mongodb的启动"></a>1.5 mongodb的启动</h4><h4 id="1-服务端mongodb的启动"><a href="#1-服务端mongodb的启动" class="headerlink" title="1 服务端mongodb的启动"></a>1 服务端mongodb的启动</h4><ul><li>查看帮助：mongod –help</li><li>启动：sudo service mongod start</li><li>停止：sudo service mongod stop</li><li>重启：sudo service mongod restart</li><li>查看是否启动成功：ps -ef|grep mongod</li><li>配置文件的位置：/etc/mongod.conf，</li><li>默认端口：<strong>27017</strong></li><li>日志的位置：/var/log/mongodb/mongod.log</li></ul><h4 id="2-客户端mongo"><a href="#2-客户端mongo" class="headerlink" title="2 客户端mongo"></a>2 客户端mongo</h4><ul><li>启动本地客户端:mongo</li><li>查看帮助：mongo –help</li><li>退出：exit或者ctrl+c</li></ul><h4 id="3-服务端mongodb无法启动的解决方法"><a href="#3-服务端mongodb无法启动的解决方法" class="headerlink" title="3 服务端mongodb无法启动的解决方法"></a>3 服务端mongodb无法启动的解决方法</h4><pre><code>sudo mongod --config /etc/mongod.conf &amp;</code></pre><h4 id="4-mongodb的官方文档"><a href="#4-mongodb的官方文档" class="headerlink" title="4 mongodb的官方文档"></a>4 mongodb的官方文档</h4><p>位置：<a href="https://docs.mongodb.com/manual/introduction/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/introduction/</a></p><h2 id="2-入门使用"><a href="#2-入门使用" class="headerlink" title="2 入门使用"></a>2 入门使用</h2><h3 id="2-1-数据库的命令"><a href="#2-1-数据库的命令" class="headerlink" title="2.1 数据库的命令"></a>2.1 数据库的命令</h3><ul><li>查看当前的数据库：db</li><li>查看所有的数据库：show dbs /show databases</li><li>切换数据库：use db_name</li><li>删除当前的数据库：db.dropDatabase()</li></ul><h3 id="2-2-集合的命令"><a href="#2-2-集合的命令" class="headerlink" title="2.2 集合的命令"></a>2.2 集合的命令</h3><ul><li>不手动创建集合： 向不存在的集合中第一次加入数据时， 集合会被创建出来</li><li>手动创建结合：<ul><li>db.createCollection(name,options)</li><li>db.createCollection(“stu”)</li><li>db.createCollection(“sub”, { capped : true, size : 10 } )</li><li>参数capped： 默认值为false表示不设置上限,值为true表示设置上限</li><li>参数size： 当capped值为true时， 需要指定此参数， 表示上限⼤⼩,当⽂档达到上限时， 会将之前的数据覆盖， 单位为字节</li></ul></li><li>查看集合：show collections</li><li>删除集合：db.集合名称.drop()</li></ul><h3 id="2-3-常见的数据类型"><a href="#2-3-常见的数据类型" class="headerlink" title="2.3 常见的数据类型"></a>2.3 常见的数据类型</h3><h4 id="1-常见类型"><a href="#1-常见类型" class="headerlink" title="1 常见类型"></a>1 常见类型</h4><ul><li>Object ID： ⽂档ID</li><li>String： 字符串， 最常见， 必须是有效的UTF-8</li><li>Boolean： 存储⼀个布尔值， true或false</li><li>Integer： 整数可以是32位或64位， 这取决于服务器</li><li>Double： 存储浮点值</li><li>Arrays： 数组或列表， 多个值存储到⼀个键</li><li>Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档</li><li>Null： 存储Null值</li><li>Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数</li><li>Date： 存储当前⽇期或时间的UNIX时间格式</li></ul><h4 id="2-注意点"><a href="#2-注意点" class="headerlink" title="2 注意点"></a>2 注意点</h4><ul><li><p>创建日期语句如下 ：参数的格式为YYYY-MM-DD new Date(‘2017-12-20’)</p></li><li><p>每个文档都有一个属性， 为_id， 保证每个文档的唯一性</p><p>可以⾃⼰去设置_id插⼊⽂档，如果没有提供， 那么MongoDB为每个文档提供了一个独特的_id， 类型为objectID</p></li><li><p>objectID是一个12字节的十六进制数,每个字节两位，一共是24 位的字符串： 前4个字节为当前时间戳 接下来3个字节的机器ID 接下来的2个字节中MongoDB的服务进程id 最后3个字节是简单的增量值</p></li></ul><h3 id="2-4-mongodb的增删改查"><a href="#2-4-mongodb的增删改查" class="headerlink" title="2.4 mongodb的增删改查"></a>2.4 mongodb的增删改查</h3><p>知识点：</p><ul><li>掌握mongodb的插入和保存</li><li>掌握mongodb的更新操作</li><li>掌握mongodb的查询操作</li><li>掌握mongodb的更新操作</li><li>掌握mongodb的删除操作</li></ul><h4 id="1-插入"><a href="#1-插入" class="headerlink" title="1 插入"></a>1 插入</h4><ul><li><p>db.集合名称.insert(document)</p><p>插入的是字典形式</p><pre><code>  db.stu.insert({name:&#39;gj&#39;,gender:1})  db.stu.insert({_id:&quot;20170101&quot;,name:&#39;gj&#39;,gender:1})</code></pre><p>插入文档时， 如果不指定_id参数， MongoDB会为文档分配一个唯 一的ObjectId</p></li></ul><h4 id="2-保存"><a href="#2-保存" class="headerlink" title="2 保存"></a>2 保存</h4><p>命令：<code>db.集合名称.save(document)</code> 如果_id已经存在则修改， 如id不存在则添加</p><p>比较实用</p><h4 id="3-简单查询"><a href="#3-简单查询" class="headerlink" title="3 简单查询"></a>3 简单查询</h4><p>命令：<code>db.集合名称.find()</code></p><h4 id="4-mongodb的更新"><a href="#4-mongodb的更新" class="headerlink" title="4 mongodb的更新"></a>4 mongodb的更新</h4><p>命令：<code>db.集合名称.update(&lt;query&gt; ,&lt;update&gt;,{multi: &lt;boolean&gt;})</code></p><ul><li>参数query:查询条件</li><li>参数update:更新操作符</li><li>参数multi:可选， 默认是false，表示只更新找到的第一条记录， 值为true表示把满足条件的全部更新</li></ul><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hr'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token string">'11'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   更新一条，把满足条件的全部替换成<span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token string">'11'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hr'</span><span class="token punctuation">}</span>没了db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hr'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hys'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    更新一条，只改hys，不改其他内容db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token punctuation">:</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>multi<span class="token punctuation">:</span>true<span class="token punctuation">}</span><span class="token punctuation">)</span>   更新全部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：”multi update only works with $ operators”</p><h4 id="5-mongodb的删除"><a href="#5-mongodb的删除" class="headerlink" title="5 mongodb的删除"></a>5 mongodb的删除</h4><p>命令：<code>db.集合名称.remove(&lt;query&gt;,{justOne: &lt;boolean&gt;})</code></p><ul><li>参数query:必选，删除全部</li><li>参数justOne:可选， 如果设为true或1， 则只删除一条， 默认false， 表示删除多条</li></ul><h3 id="2-5-mongodb的高级查询"><a href="#2-5-mongodb的高级查询" class="headerlink" title="2.5 mongodb的高级查询"></a>2.5 mongodb的高级查询</h3><p>知识点：</p><ul><li><p>掌握mongodb的数据查询操作</p></li><li><p>掌握比较运算符的使用</p></li><li><p>掌握逻辑运算符的使用</p></li><li><p>掌握范围运算符的使用</p></li><li><p>了解正则的使用</p></li><li><p>掌握skip和limit的使用</p></li><li><p>掌握投影方法的使用</p></li><li><p>掌握排序方法的使用</p></li><li><p>了解去重方法的使用</p></li></ul><h4 id="1-数据查询"><a href="#1-数据查询" class="headerlink" title="1 数据查询"></a>1 数据查询</h4><ul><li><p>方法find()： 查询</p><p><code>db.集合名称.find({条件文档})</code></p></li><li><p>方法findOne()：查询，只返回第一个</p><p><code>db.集合名称.findOne({条件文档})</code></p></li><li><p>方法pretty()： 将结果格式化</p><p><code>db.集合名称.find({条件文档}).pretty()</code></p></li></ul><h4 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2 比较运算符"></a>2 比较运算符</h4><p>可以使用以下数据进行练习</p><p>insert可以插入一个列表，把以下的字典都放到列表里即可</p><pre class="line-numbers language-mongodb"><code class="language-mongodb">db.stu.insert([{},{},{}])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"郭靖"</span><span class="token punctuation">,</span> <span class="token property">"hometown"</span> <span class="token operator">:</span> <span class="token string">"蒙古"</span><span class="token punctuation">,</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"⻩蓉"</span><span class="token punctuation">,</span> <span class="token property">"hometown"</span> <span class="token operator">:</span> <span class="token string">"桃花岛"</span><span class="token punctuation">,</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"华筝"</span><span class="token punctuation">,</span> <span class="token property">"hometown"</span> <span class="token operator">:</span> <span class="token string">"蒙古"</span><span class="token punctuation">,</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"⻩药师"</span><span class="token punctuation">,</span> <span class="token property">"hometown"</span> <span class="token operator">:</span> <span class="token string">"桃花岛"</span><span class="token punctuation">,</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"段誉"</span><span class="token punctuation">,</span> <span class="token property">"hometown"</span> <span class="token operator">:</span> <span class="token string">"⼤理"</span><span class="token punctuation">,</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"段王爷"</span><span class="token punctuation">,</span> <span class="token property">"hometown"</span> <span class="token operator">:</span> <span class="token string">"⼤理"</span><span class="token punctuation">,</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"洪七公"</span><span class="token punctuation">,</span> <span class="token property">"hometown"</span> <span class="token operator">:</span> <span class="token string">"华⼭"</span><span class="token punctuation">,</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token property">"gender"</span> <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>等于： 默认是等于判断， 没有运算符</p></li><li><p>小于：<code>$lt （less than）</code></p></li><li><p>小于等于：<code>$lte （less than equal）</code></p><ul><li>db.stu.find({age:{$lte:20},hometown:’蒙古’})</li></ul></li><li><p>大于：<code>$gt （greater than）</code></p></li><li><p>大于等于：<code>$gte</code></p></li><li><p>不等于：<code>$ne</code></p><p>例如：</p><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"郭靖"</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"蒙古"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> true <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"黄蓉"</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"桃花岛"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> false <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"华筝"</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"蒙古"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> false <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"药师"</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"桃花岛"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> true <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"段誉"</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"大理"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> true <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"段王爷"</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"大理"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> true <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"洪七公"</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"华山"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> true <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>i不加列表的话，只能插入一条数据</p><pre><code>  查询年龄大于18的所有学生  db.stu.find({age:{$gte:18}})</code></pre></li></ul><h4 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3 逻辑运算符"></a>3 逻辑运算符</h4><p>逻辑运算符主要指与、或逻辑</p><ul><li><p>and：在json中写多个条件即可</p><p>并的关系，同在一个大括号下，不需要每个再加大括号</p><pre><code>  查询年龄大于或等于18， 并且性别为true的学生  db.stu.find({age:{$gte:18},gender:true})</code></pre></li><li><p>or:使用$or， 值为<strong>数组</strong>， 数组中每个元素为json</p><p>条件放到列表里，列表里的每一个都放到大括号里，与and相反，变复杂了</p><pre class="line-numbers language-python"><code class="language-python">  查询年龄⼤于<span class="token number">18</span>， 或性别为false的学⽣  db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span>$<span class="token operator">or</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token punctuation">{</span>$gt<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span>false<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  查询年龄大于<span class="token number">18</span>或性别为男， 并且姓名是郭靖  db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span>$<span class="token operator">or</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token punctuation">{</span>$gte<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span>true<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'gj'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-范围运算符"><a href="#4-范围运算符" class="headerlink" title="4 范围运算符"></a>4 范围运算符</h4><p>使额头<code>$in 在范围内</code>， <code>$nin 不在范围内</code>  判断数据是否在某个数组内</p><pre><code> 查询年龄为18、 28的学⽣ db.stu.find({age:{$in:[18,28,38]}})</code></pre><h4 id="5-支持正则表达式（了解）"><a href="#5-支持正则表达式（了解）" class="headerlink" title="5 支持正则表达式（了解）"></a>5 支持正则表达式（了解）</h4><p>使用//或$regex编写正则表达式</p><pre class="line-numbers language-python"><code class="language-python">查询sku以abc开头的数据db<span class="token punctuation">.</span>products<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span>sku<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">^</span>abc<span class="token operator">/</span><span class="token punctuation">}</span><span class="token punctuation">)</span>查询sku以<span class="token number">789</span>结尾的数据db<span class="token punctuation">.</span>products<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span>sku<span class="token punctuation">:</span><span class="token punctuation">{</span>$regex<span class="token punctuation">:</span><span class="token string">'789$'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"sku"</span> <span class="token punctuation">:</span> <span class="token string">"abc123"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> <span class="token punctuation">:</span> <span class="token string">"Single line description."</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"sku"</span> <span class="token punctuation">:</span> <span class="token string">"abc789"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> <span class="token punctuation">:</span> <span class="token string">"First line\nSecond line"</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"sku"</span> <span class="token punctuation">:</span> <span class="token string">"xyz456"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> <span class="token punctuation">:</span> <span class="token string">"Many spaces before     line"</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"sku"</span> <span class="token punctuation">:</span> <span class="token string">"xyz789"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> <span class="token punctuation">:</span> <span class="token string">"Multiple\nline description"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-skip和limit（了解）"><a href="#6-skip和limit（了解）" class="headerlink" title="6 skip和limit（了解）"></a>6 skip和limit（了解）</h4><ul><li><p>法limit()： 读取指定数量的文档</p><pre><code>  db.集合名称.find().limit(NUMBER)  查询2条学生信息  db.stu.find().limit(2)</code></pre></li><li><p>法skip()： 跳过指定数量的文档</p><pre><code>  db.集合名称.find().skip(NUMBER)  db.stu.find().skip(2)</code></pre></li><li><p>同时使用</p><pre><code>  db.stu.find().limit(4).skip(5)  或   db.stu.find().skip(5).limit(4)  效率 比较高，先跳页，再选页</code></pre><p>注意：先使用skip在使用limit的效率要高于前者</p></li></ul><h4 id="7-自定义查询-（了解）"><a href="#7-自定义查询-（了解）" class="headerlink" title="7 自定义查询*（了解）"></a>7 自定义查询*（了解）</h4><p>由于mongo的shell是一个js的执行环境 使⽤$where后⾯写⼀个函数， 返回满⾜条件的数据</p><pre><code> 查询年龄⼤于30的学⽣ db.stu.find({     $where:function() {         return this.age&gt;30;} })</code></pre><h4 id="8-投影"><a href="#8-投影" class="headerlink" title="8 投影"></a>8 投影</h4><p>在查询到的返回结果中， 只选择必要的字段</p><p>命令：<code>db.集合名称.find({},{字段名称:1,...})</code></p><blockquote><p>第一个大括号里面放的是条件，比如年龄大于18，后面的大括号，放的是要显示的字段</p></blockquote><p>参数为字段与值， 值为1表示显示， 值为0不显 特别注意： 对于_id列默认是显示的， 如果不显示需要明确设置为0</p><p><code>db.stu.find({},{_id:0,name:1,gender:1})</code></p><h4 id="9-排序"><a href="#9-排序" class="headerlink" title="9 排序"></a>9 排序</h4><p>⽅法sort()， ⽤于对 集进行排序</p><p>命令：<code>db.集合名称.find().sort({字段:1,...})</code></p><p>参数1为升序排列 参数-1为降序排列</p><pre><code> 根据性别降序， 再根据年龄升序 db.stu.find().sort({gender:-1,age:1})</code></pre><h4 id="10-统计个数"><a href="#10-统计个数" class="headerlink" title="10 统计个数"></a>10 统计个数</h4><p>count()统计结果集中文档条数</p><p>命令：<code>db.集合名称.find({条件}).count()</code> 命令：<code>db.集合名称.count({条件})</code></p><pre><code> db.stu.find({gender:true}).count() db.stu.count({age:{$gt:20},gender:true}) db.stu.find().count({age:{$gte:20}})  这是错误的，这种避免写</code></pre><h4 id="11-消除重复（用的不多）"><a href="#11-消除重复（用的不多）" class="headerlink" title="11 消除重复（用的不多）"></a>11 消除重复（用的不多）</h4><p><code>distinct()</code>对数据进行去重</p><p>命令：<code>db.集合名称.distinct(&#39;去重字段&#39;,{条件})</code></p><pre><code>db.stu.distinct(&#39;hometown&#39;,{age:{$gt:18}}) 年龄大于18的hometown有哪些，返回一个数组（列表）</code></pre><h2 id="3-聚合操作"><a href="#3-聚合操作" class="headerlink" title="3 聚合操作"></a>3 聚合操作</h2><h3 id="3-1-聚合是什么"><a href="#3-1-聚合是什么" class="headerlink" title="3.1 聚合是什么"></a>3.1 聚合是什么</h3><p>聚合(aggregate)是基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果。</p><p>语法：<code>db.集合名称.aggregate({管道:{表达式}})</code></p><h3 id="3-2-常用管道和表达式"><a href="#3-2-常用管道和表达式" class="headerlink" title="3.2 常用管道和表达式"></a>3.2 常用管道和表达式</h3><h4 id="1-常用管道命令"><a href="#1-常用管道命令" class="headerlink" title="1 常用管道命令"></a>1 常用管道命令</h4><p>在mongodb中，文档处理完毕后， 通过管道进入下一次处理 常用管道命令如下：</p><ul><li><code>$group</code>： 将集合中的文档分组， 可用于统计结果</li><li><code>$match</code>： 过滤数据， 只输出符合条件的文档</li><li><code>$project</code>： 修改输入文档的结构， 如重命名、 增加、 删除字段、 创建计算结果</li><li><code>$sort</code>： 将输入文档排序后输出</li><li><code>$limit</code>： 限制聚合管道返回的文档数</li><li><code>$skip</code>： 跳过指定数量的文档， 并返回余下的文档</li></ul><h4 id="2-常用表达式"><a href="#2-常用表达式" class="headerlink" title="2 常用表达式"></a>2 常用表达式</h4><p>表达式：输出 语法：<code>表达式:&#39;$列名&#39;</code> 常用表达式:</p><ul><li><code>$sum</code>： 计算总和， $sum:1 表示以⼀倍计数</li><li><code>$avg</code>： 计算平均值</li><li><code>$min</code>： 获取最小值</li><li><code>$max</code>： 获取最大值</li><li><code>$push</code>： 在结果文档中插入值到⼀个数组中</li></ul><h3 id="3-3-管道命令之-group"><a href="#3-3-管道命令之-group" class="headerlink" title="3.3 管道命令之$group"></a>3.3 管道命令之<code>$group</code></h3><p><strong>字段名前加要$，  语法前也加</strong> </p><h4 id="3-1-按照某个字段进行分组"><a href="#3-1-按照某个字段进行分组" class="headerlink" title="3.1 按照某个字段进行分组"></a>3.1 按照某个字段进行分组</h4><p><code>$group</code>是所有聚合命令中用的最多的一个命令，用来将集合中的文档分组，可用于统计结果</p><p>使用示例如下</p><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>    <span class="token punctuation">{</span>$group<span class="token punctuation">:</span>        <span class="token punctuation">{</span>            _id<span class="token punctuation">:</span><span class="token string">"$gender"</span><span class="token punctuation">,</span>            counter<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token string">"$gender"</span><span class="token punctuation">,</span>counter<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># _id 格式必须这样写，表示按什么字段分组，counter是自定义的</span><span class="token comment" spellcheck="true"># gender前必须加$,如果不加，相当于没有按这个字段分组，而是全部</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中注意点：</p><ul><li><code>db.db_name.aggregate</code>是语法，所有的管道命令都需要写在其中</li><li><code>_id</code> 表示分组的依据，按照哪个字段进行分组，需要使用<code>$gender</code>表示选择这个字段进行分组</li><li><code>$sum:1</code> 表示把每条数据作为1进行统计，统计的是该分组下面数据的条数</li></ul><h4 id="3-2-group-by-null"><a href="#3-2-group-by-null" class="headerlink" title="3.2 group by null"></a>3.2 group by null</h4><p>当我们需要统计整个文档的时候，<code>$group</code> 的另一种用途就是把整个文档分为一组进行统计</p><p>使用实例如下：</p><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>    <span class="token punctuation">{</span>$group<span class="token punctuation">:</span>        <span class="token punctuation">{</span>            _id<span class="token punctuation">:</span>null<span class="token punctuation">,</span>            counter<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span>null<span class="token punctuation">,</span>counter<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将上面的写成了一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中注意点：</p><ul><li><code>_id:null</code> 表示不指定分组的字段，即统计<strong>整个文档</strong>，此时获取的<code>counter</code>表示整个文档的个数</li></ul><h4 id="3-3-数据透视"><a href="#3-3-数据透视" class="headerlink" title="3.3 数据透视"></a>3.3 数据透视</h4><blockquote><p>前面用的group都是对有数值的处理，比如求和，最大，最小，这里的数据透视是对分组后，包含的其他字段的文字</p></blockquote><p>正常情况在统计的不同性别的数据的时候，需要知道所有的name，需要逐条观察，如果通过某种方式把所有的name放到一起，那么此时就可以理解为数据透视</p><p>使用示例如下：</p><ol><li><p>统计不同性别的学生</p><pre class="line-numbers language-python"><code class="language-python"> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>     <span class="token punctuation">{</span>$group<span class="token punctuation">:</span>         <span class="token punctuation">{</span>             _id<span class="token punctuation">:</span>null<span class="token punctuation">,</span>             name<span class="token punctuation">:</span><span class="token punctuation">{</span>$push<span class="token punctuation">:</span><span class="token string">"$name"</span><span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>   ```python   db.stu.aggregate({$group:{_id:&quot;$gender&quot;,name:{$push:&quot;$name&quot;},hometown:{$push:&quot;$hometown&quot;}}})   # 按性别进行分组，被分成两组，一组为男，一组为女，name为符合条件的姓名字段和home段</code></pre><ol start="2"><li><p>使用<code>$$ROOT</code>可以将整个文档放入数组中</p><pre><code> db.stu.aggregate(     {$group:         {             _id:null,             name:{$push:&quot;$$ROOT&quot;}         }     } )</code></pre></li></ol><h4 id="3-4-多字段统计"><a href="#3-4-多字段统计" class="headerlink" title="3.4 多字段统计"></a>3.4 多字段统计</h4><blockquote><p>前面是一个字段的统计，多个字段怎么统计呢？</p><p>多字段分组，可以达到去重的效果</p></blockquote><p>对于如下数据，需要统计出每个country/province下的userid的数量（同一个userid只统计一次）</p><pre><code>{ &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;a&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;b&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;a&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;c&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;bj&quot;, &quot;userid&quot; : &quot;da&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;bj&quot;, &quot;userid&quot; : &quot;fa&quot; }</code></pre><p>参考答案</p><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>tv3<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>  <span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token punctuation">{</span>country<span class="token punctuation">:</span><span class="token string">'$country'</span><span class="token punctuation">,</span>province<span class="token punctuation">:</span><span class="token string">'$province'</span><span class="token punctuation">,</span>userid<span class="token punctuation">:</span><span class="token string">'$userid'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token punctuation">{</span>country<span class="token punctuation">:</span><span class="token string">'$_id.country'</span><span class="token punctuation">,</span>province<span class="token punctuation">:</span><span class="token string">'$_id.province'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>count<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 1、_id:对应一个字典,共有五个字典，以下是第一个管道的结果</span><span class="token operator">></span> db<span class="token punctuation">.</span>country<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token punctuation">{</span>country<span class="token punctuation">:</span><span class="token string">"$country"</span><span class="token punctuation">,</span>china<span class="token punctuation">:</span><span class="token string">"$china"</span><span class="token punctuation">,</span>province<span class="token punctuation">:</span><span class="token string">"$province"</span><span class="token punctuation">,</span>userid<span class="token punctuation">:</span><span class="token string">"$userid"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"country"</span> <span class="token punctuation">:</span> <span class="token string">"china"</span><span class="token punctuation">,</span> <span class="token string">"province"</span> <span class="token punctuation">:</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"userid"</span> <span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"country"</span> <span class="token punctuation">:</span> <span class="token string">"china"</span><span class="token punctuation">,</span> <span class="token string">"province"</span> <span class="token punctuation">:</span> <span class="token string">"bj"</span><span class="token punctuation">,</span> <span class="token string">"userid"</span> <span class="token punctuation">:</span> <span class="token string">"fa"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"country"</span> <span class="token punctuation">:</span> <span class="token string">"china"</span><span class="token punctuation">,</span> <span class="token string">"province"</span> <span class="token punctuation">:</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"userid"</span> <span class="token punctuation">:</span> <span class="token string">"b"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"country"</span> <span class="token punctuation">:</span> <span class="token string">"china"</span><span class="token punctuation">,</span> <span class="token string">"province"</span> <span class="token punctuation">:</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"userid"</span> <span class="token punctuation">:</span> <span class="token string">"c"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"country"</span> <span class="token punctuation">:</span> <span class="token string">"china"</span><span class="token punctuation">,</span> <span class="token string">"province"</span> <span class="token punctuation">:</span> <span class="token string">"bj"</span><span class="token punctuation">,</span> <span class="token string">"userid"</span> <span class="token punctuation">:</span> <span class="token string">"da"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">></span> <span class="token comment" spellcheck="true"># 2、第二个管道，是以第一个管道的结果做为输入，所以，country这个字段，用的是第一个管道的_id，对第二个管道的结果数量求和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-管道命令之-match"><a href="#3-4-管道命令之-match" class="headerlink" title="3.4 管道命令之$match"></a>3.4 管道命令之<code>$match</code></h3><p><code>$match</code>用于进行数据的过滤，是在能够在聚合操作中使用的命令，和<code>find</code>区别在于<code>$match</code> 操作可以把结果交给下一个管道处理，而<code>find</code>不行</p><p>使用示例如下：</p><ol><li><p>查询年龄大于20的学生</p><pre><code> db.stu.aggregate(     {$match:{age:{$gt:20}}     )</code></pre></li><li><p>查询年龄大于20的男女学生的人数</p><pre class="line-numbers language-python"><code class="language-python"> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>     <span class="token punctuation">{</span>$match<span class="token punctuation">:</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token punctuation">{</span>$gt<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span>，     <span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token string">"$gender"</span><span class="token punctuation">,</span>counter<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 年龄大于40岁的，按性别分组后的人数</span><span class="token operator">></span> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>    <span class="token punctuation">{</span>$match<span class="token punctuation">:</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token punctuation">{</span>$gte<span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span><span class="token string">"$gender"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>count<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>结果<span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"gender"</span> <span class="token punctuation">:</span> true <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-5-管道命令之-project"><a href="#3-5-管道命令之-project" class="headerlink" title="3.5 管道命令之$project"></a>3.5 管道命令之<code>$project</code></h3><p><code>$project</code>用于修改文档的输入输出结构，例如重命名，增加，删除字段</p><p>使用示例如下：</p><ol><li><p>查询学生的年龄、姓名，仅输出年龄姓名</p><pre><code> db.stu.aggregate(     {$project:{_id:0,name:1,age:1}}     )</code></pre></li><li><p>查询男女生人生，输出人数</p><pre><code> db.stu.aggregate(     {$group:{_id:&quot;$gender&quot;,counter:{$sum:1}}}，     {$project:{_id:0,counter:1}}     )</code></pre></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">></span> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token punctuation">{</span>hometown<span class="token punctuation">:</span><span class="token string">"$hometown"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>count<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$project<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>hometown<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 如果想让hometown显示出来，就用第一个管道的—id里的hometown</span><span class="token operator">></span> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token punctuation">{</span>hometown<span class="token punctuation">:</span><span class="token string">"$hometown"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>count<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$project<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>hometown<span class="token punctuation">:</span><span class="token string">"$_id.hometown"</span><span class="token punctuation">,</span>count<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"华⼭"</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"⼤理"</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"桃花岛"</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hometown"</span> <span class="token punctuation">:</span> <span class="token string">"蒙古"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 动手练习</p><p>对于如下数据：统计出每个country/province下的userid的数量（同一个userid只统计一次），结果中的字段为{country:”<strong>“，province:”</strong>“，counter:”*”}</p><pre><code>{ &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;a&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;b&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;a&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;sh&quot;, &quot;userid&quot; : &quot;c&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;bj&quot;, &quot;userid&quot; : &quot;da&quot; }  {  &quot;country&quot; : &quot;china&quot;, &quot;province&quot; : &quot;bj&quot;, &quot;userid&quot; : &quot;fa&quot; }</code></pre><p>参考答案</p><pre><code>db.tv3.aggregate(  {$group:{_id:{country:&#39;$country&#39;,province:&#39;$province&#39;,userid:&#39;$userid&#39;}}},  {$group:{_id:{country:&#39;$_id.country&#39;,province:&#39;$_id.province&#39;},count:{$sum:1}}},  {$project:{_id:0,country:&#39;$_id.country&#39;,province:&#39;$_id.province&#39;,counter:&#39;$count&#39;}}  )</code></pre><h3 id="3-6-管道命令之-sort"><a href="#3-6-管道命令之-sort" class="headerlink" title="3.6 管道命令之$sort"></a>3.6 管道命令之<code>$sort</code></h3><p><code>$sort</code>用于将输入的文档排序后输出</p><p>使用示例如下：</p><ol><li><p>查询学生信息，按照年龄升序</p><pre><code> db.stu.aggregate({$sort:{age:1}})</code></pre></li><li><p>查询男女人数，按照人数降序</p><pre><code> db.stu.aggregate(     {$group:{_id:&quot;$gender&quot;,counter:{$sum:1}}},     {$sort:{counter:-1}} )</code></pre></li></ol><h3 id="3-7-管道命令之-skip-和-limit"><a href="#3-7-管道命令之-skip-和-limit" class="headerlink" title="3.7 管道命令之$skip 和 $limit"></a>3.7 管道命令之<code>$skip</code> 和 <code>$limit</code></h3><ul><li><code>$limit</code>限制返回数据的条数</li><li><code>$skip</code> 跳过指定的文档数，并返回剩下的文档数</li><li>同时使用时先使用skip在使用limit</li></ul><p>使用示例如下：</p><ol><li><p>查询2条学生信息</p><pre class="line-numbers language-python"><code class="language-python"> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>     <span class="token punctuation">{</span>$limit<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查询从第三条开始的学生信息</p><pre class="line-numbers language-python"><code class="language-python"> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>     <span class="token punctuation">{</span>$skip<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>统计男女生人数，按照人数升序，返回第二条数据</p><pre class="line-numbers language-python"><code class="language-python"> db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>     <span class="token punctuation">{</span>$group<span class="token punctuation">:</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token string">"$gender"</span><span class="token punctuation">,</span>counter<span class="token punctuation">:</span><span class="token punctuation">{</span>$sum<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 按时性别计数</span>     <span class="token punctuation">{</span>$sort<span class="token punctuation">:</span><span class="token punctuation">{</span>counter<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 对数量排序</span>     <span class="token punctuation">{</span>$skip<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true"># 跳一行    </span>     <span class="token punctuation">{</span>$limit<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true"># 显示一行</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-索引备份"><a href="#4-索引备份" class="headerlink" title="4 索引备份"></a>4 索引备份</h2><h3 id="1-mongodb的索引"><a href="#1-mongodb的索引" class="headerlink" title="1. mongodb的索引"></a>1. mongodb的索引</h3><p>知识点</p><ul><li>掌握mongodb索引的创建，删除操作</li><li>掌握mongodb查看索引的方法</li><li>掌握mongodb创建联合索引的方法</li><li>掌握mongodb创建唯一索引的方法</li></ul><h4 id="1-1-为什么mongdb需要创建索引"><a href="#1-1-为什么mongdb需要创建索引" class="headerlink" title="1.1 为什么mongdb需要创建索引"></a>1.1 为什么mongdb需要创建索引</h4><ul><li>加快查询速度</li><li>进行数据的去重</li></ul><h4 id="1-2-创建简单的索引方法"><a href="#1-2-创建简单的索引方法" class="headerlink" title="1.2 创建简单的索引方法"></a>1.2 创建简单的索引方法</h4><ul><li>语法：<ul><li><code>db.集合.ensureIndex({属性:1})</code>，1表示升序， -1表示降序</li><li><code>db.集合.createIndex({属性:1})</code></li><li>上面两个命令效果等价</li></ul></li><li>具体操作：db.db_name.ensureIndex({name:1})</li></ul><h4 id="1-3-创建索引前后查询速度对比"><a href="#1-3-创建索引前后查询速度对比" class="headerlink" title="1.3 创建索引前后查询速度对比"></a>1.3 创建索引前后查询速度对比</h4><p>测试：插入10万条数据到数据库中 插入数据：</p><pre><code>for(i=0;i&lt;100000;i++){db.t255.insert({name:&#39;test&#39;+i,age:i})}</code></pre><p>创建索引前：</p><pre><code>db.t1.find({name:&#39;test10000&#39;})db.t1.find({name:&#39;test10000&#39;}).explain(&#39;executionStats&#39;)</code></pre><p>创建索引后：</p><pre><code>db.t255.ensureIndex({name:1})db.t1.find({name:&#39;test10000&#39;}).explain(&#39;executionStats&#39;)</code></pre><p>前后速度对比</p><p>默认情况下_id是集合的索引</p><p>查看方式：<code>db.collection_name.getIndexes()</code></p><p>添加索引前：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1、插入内容</span>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"nInserted"</span> <span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># 2、显示内容</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5ae0232f625b9ddd91a0e7ae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#3、查看索引</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true"># 4/默认关键字的索引是_id</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加name为索引后:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>ensureIndex<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"createdCollectionAutomatically"</span> <span class="token punctuation">:</span> false<span class="token punctuation">,</span>    <span class="token string">"numIndexesBefore"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"numIndexesAfter"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">"ok"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true"># 又多了一个索引值，name</span>            <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"name_1"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-创建唯一索引"><a href="#1-5-创建唯一索引" class="headerlink" title="1.5 创建唯一索引"></a>1.5 创建唯一索引</h4><p>在默认情况下mongdb的索引字段的值是可以相同的,仅仅能够提高查询速度</p><p>添加唯一索引的语法：</p><pre class="line-numbers language-json"><code class="language-json">db.collection_name.ensureIndex(<span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"unique"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用普通索引的效果如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>蒙        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"name_1"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    ??? <span class="token comment" spellcheck="true">#对name使用普通索引后，再插入索引值相同的hello，                                            是可以成功的</span>WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"nInserted"</span> <span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5ae0232f625b9ddd91a0e7ae"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5ae02421625b9ddd91a0e7af"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5ae02432625b9ddd91a0e7b0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加age为唯一索引之后：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>unique<span class="token punctuation">:</span>true<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"createdCollectionAutomatically"</span> <span class="token punctuation">:</span> false<span class="token punctuation">,</span>    <span class="token string">"numIndexesBefore"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">"numIndexesAfter"</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token string">"ok"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"name_1"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"unique"</span> <span class="token punctuation">:</span> true<span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"age_1"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      ????设置成唯一后，再插入相同的数值就报错WriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"nInserted"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"writeError"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"code"</span> <span class="token punctuation">:</span> <span class="token number">11000</span><span class="token punctuation">,</span>        <span class="token string">"errmsg"</span> <span class="token punctuation">:</span> <span class="token string">"E11000 duplicate key error collection: test2000.test2000 index: age_1 dup key: { : 20.0 }"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-删除索引"><a href="#1-6-删除索引" class="headerlink" title="1.6 删除索引"></a>1.6 删除索引</h4><p>语法：<code>db.t1.dropIndex({&#39;索引名称&#39;:1})</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"name_1"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"unique"</span> <span class="token punctuation">:</span> true<span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"age_1"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>dropIndex<span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"nIndexesWas"</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ok"</span> <span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>dropIndex<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"nIndexesWas"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ok"</span> <span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-建立复合索引"><a href="#1-6-建立复合索引" class="headerlink" title="1.6 建立复合索引"></a>1.6 建立复合索引</h4><p>在进行数据去重的时候，可能用一个字段来保证数据的唯一性，这个时候可以考虑建立复合索引来实现。</p><p>例如：抓全贴吧信息，如果把帖子的名字作为唯一索引对数据进行去重是不可取的，因为可能有很多帖子名字相同</p><p>建立复合索引的语法：<code>db.collection_name.ensureIndex({字段1:1,字段2:1})</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"createdCollectionAutomatically"</span> <span class="token punctuation">:</span> false<span class="token punctuation">,</span>    <span class="token string">"numIndexesBefore"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"numIndexesAfter"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">"ok"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">></span> db<span class="token punctuation">.</span>test2000<span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"_id_"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"v"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"name_1_age_1"</span><span class="token punctuation">,</span>        <span class="token string">"ns"</span> <span class="token punctuation">:</span> <span class="token string">"test2000.test2000"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-7-建立索引注意点"><a href="#1-7-建立索引注意点" class="headerlink" title="1.7 建立索引注意点"></a>1.7 建立索引注意点</h4><ul><li><p>根据需要选择是否需要建立唯一索引</p></li><li><p>索引字段是升序还是降序在单个索引的情况下不影响查询效率，但是带复合索引的条件下会有影响</p><blockquote><p>例如：在进行查询的时候如果字段1需要升序的方式排序输出，字段2需要降序的方式排序输出，那么此时复合索引的建立需要把字段1设置为1，字段2设置为-1</p></blockquote></li></ul><h3 id="2-mongodb的备份和恢复"><a href="#2-mongodb的备份和恢复" class="headerlink" title="2. mongodb的备份和恢复"></a>2. mongodb的备份和恢复</h3><p>知识点</p><ul><li>掌握mongdb的备份和恢复命令</li></ul><h4 id="2-1-备份"><a href="#2-1-备份" class="headerlink" title="2.1 备份"></a>2.1 备份</h4><p>备份的语法：</p><pre><code>mongodump -h dbhost -d dbname -o dbdirectory</code></pre><ul><li><code>-h</code>： 服务器地址， 也可以指定端⼝号</li><li><code>-d</code>： 需要备份的数据库名称</li><li><code>-o</code>： 备份的数据存放位置， 此⽬录中存放着备份出来的数据</li></ul><p>示例：<code>mongodump -h 192.168.196.128:27017 -d test1 -o ~/Desktop/test1bak</code></p><h4 id="2-2-恢复"><a href="#2-2-恢复" class="headerlink" title="2.2 恢复"></a>2.2 恢复</h4><p>恢复语法：<code>mongorestore -h dbhost -d dbname --dir dbdirectory</code></p><ul><li><code>-h</code>： 服务器地址</li><li><code>-d</code>： 需要恢复的数据库实例</li><li><code>--dir</code>： 备份数据所在位置</li></ul><p>示例：<code>mongorestore -h 192.168.196.128:27017 -d test2 --dir ~/Desktop/test1bak/test1</code></p><h2 id="5-python交互"><a href="#5-python交互" class="headerlink" title="5 python交互"></a>5 python交互</h2><h3 id="1-mongdb和python交互的模块"><a href="#1-mongdb和python交互的模块" class="headerlink" title="1. mongdb和python交互的模块"></a>1. mongdb和python交互的模块</h3><p><code>pymongo</code> 提供了mongdb和python交互的所有方法 安装方式: <code>pip install pymongo</code></p><h3 id="2-使用pymongo"><a href="#2-使用pymongo" class="headerlink" title="2. 使用pymongo"></a>2. 使用pymongo</h3><ol><li><p>导入pymongo并选择要操作的集合 数据库和集合乜有会自动创建</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span> collection <span class="token operator">=</span> client<span class="token punctuation">[</span>db名<span class="token punctuation">]</span><span class="token punctuation">[</span>集合名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>添加一条数据</p><pre class="line-numbers language-python"><code class="language-python">ret <span class="token operator">=</span> collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test10010"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加多条数据</p><pre class="line-numbers language-python"><code class="language-python"> item_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test1000{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#insert_many接收一个列表，列表中为所有需要插入的字典</span> t <span class="token operator">=</span> collection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>item_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查找一条数据</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#find_one查找并且返回一个结果,接收一个字典形式的条件</span> t <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test10005"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查找全部数据</p><p>结果是一个Cursor游标对象，是一个可迭代对象，可以类似读文件的指针，但是只能够进行一次读取</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#find返回所有满足条件的结果，如果条件为空，则返回数据库的所有</span> t <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test10005"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#结果是一个Cursor游标对象，是一个可迭代对象，可以类似读文件的指针，</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#此时t中没有内容</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新一条数据 注意使用<code>$set</code>命令</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#update_one更新一条数据</span> collection<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test10005"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"$set"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"new_test10005"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#与update的方法一样 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新全部数据</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># update_one更新全部数据</span> collection<span class="token punctuation">.</span>update_many<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test10005"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"$set"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"new_test10005"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除一条数据</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#delete_one删除一条数据</span> collection<span class="token punctuation">.</span>delete_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test10010"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除全部数据</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#delete_may删除所有满足条件的数据</span> collection<span class="token punctuation">.</span>delete_many<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"test10010"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="6-mongodb与redis的区别"><a href="#6-mongodb与redis的区别" class="headerlink" title="6 mongodb与redis的区别"></a>6 mongodb与redis的区别</h2><table><thead><tr><th></th><th>mongodb</th><th>redis</th></tr></thead><tbody><tr><td></td><td>MongoDB却是一个“存储数据”的系统，增删改查可以添加很多条件，就像SQL数据库一样灵活</td><td>Redis主要把数据存储在内存中，其“缓存”的性质远大于其“数据存储“的性质，其中数据的增删改查也只是像变量操作一样简单</td></tr><tr><td>性能</td><td>依赖内存，TPS较高</td><td>依赖内存，TPS非常高</td></tr><tr><td>可操作性</td><td>丰富的数据表达、索引；最类似于关系数据库，支持丰富的查询语言</td><td>数据丰富，较少的IO</td></tr><tr><td>应用场景</td><td>海量数据的访问效率提升</td><td>较小数据量的性能及运算</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 非关系型数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析 </title>
      <link href="/shu-ju-fen-xi-san-jian-ke.html"/>
      <url>/shu-ju-fen-xi-san-jian-ke.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-Jupyter-notebook"><a href="#一-Jupyter-notebook" class="headerlink" title="一 Jupyter notebook"></a>一 Jupyter notebook</h1><h2 id="1-本机打开"><a href="#1-本机打开" class="headerlink" title="1 本机打开"></a>1 本机打开</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 进入虚拟环境</span>workon ml<span class="token comment" spellcheck="true"># 输入命令</span>jupyter notebook<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>新建notebook文档</p><ul><li>notebook的文档格式是</li></ul><blockquote><p>卸载jupyter</p><ul><li>pip uninstall -y jupyter</li><li>pip uninstall -y jupyter_core</li><li>pip uninstall -y jupyter-client</li><li>pip uninstall -y jupyter-console</li><li>pip uninstall -y notebook</li><li>pip uninstall -y qtconsole</li><li>pip uninstall -y nbconvert</li><li>pip uninstall -y nbformat</li></ul></blockquote><blockquote><p>如何修改默认浏览器的位置？</p><p>打开文件C:\Users\Administrator.jupyter\jupyter_notebook_config.py</p><p>72行</p><pre><code>webbrowser.register(&#39;chrome&#39;,None,webbrowser.GenericBrowser(u&#39;C:/Users/Administrator/AppData/Local/Google/Chrome/Application/chrome.exe&#39;))c.NotebookApp.browser = &#39;chrome&#39;</code></pre></blockquote><h2 id="2-cell"><a href="#2-cell" class="headerlink" title="2 cell"></a>2 cell</h2><h3 id="2-1cell操作"><a href="#2-1cell操作" class="headerlink" title="2.1cell操作"></a>2.1cell操作</h3><p><strong>cell</strong>：一对In Out会话被视作一个代码单元，称为cell</p><p>Jupyter支持两种模式：</p><ul><li>编辑模式（Enter）<ul><li>命令模式下<code>回车Enter</code>或<code>鼠标双击</code>cell进入编辑模式</li><li>可以<strong>操作cell内文本</strong>或代码，剪切／复制／粘贴移动等操作</li></ul></li><li>命令模式（Esc）<ul><li>按<code>Esc</code>退出编辑，进入命令模式</li><li>可以<strong>操作cell单元本身</strong>进行剪切／复制／粘贴／移动等操作</li></ul></li></ul><h3 id="2-2-cell快捷键"><a href="#2-2-cell快捷键" class="headerlink" title="2.2 cell快捷键"></a>2.2 cell快捷键</h3><ul><li><p>两种模式通用快捷键</p><ul><li><strong>Shift+Enter，执行本单元代码，并跳转到下一单元</strong></li><li><strong>Ctrl+Enter，执行本单元代码，留在本单元</strong></li></ul></li><li><p>命令模式</p><p>：按ESC进入</p><ul><li><code>Y</code>，cell切换到Code模式</li><li><code>M</code>，cell切换到Markdown模式</li><li><code>A</code>，在当前cell的上面添加cell</li><li><code>B</code>，在当前cell的下面添加cell</li><li><code>双击D</code>：删除当前cell</li><li><code>Z</code>，回退</li><li><code>L</code>，为当前cell加上行号 &lt;!–</li><li><code>Ctrl+Shift+P</code>，对话框输入命令直接运行</li><li>快速跳转到首个cell，<code>Crtl+Home</code></li><li>快速跳转到最后一个cell，<code>Crtl+End</code> –&gt;</li></ul></li><li><p>编辑模式</p><p>：按Enter进入</p><ul><li>多光标操作：<code>Ctrl键点击鼠标</code>（Mac:CMD+点击鼠标）</li><li>回退：<code>Ctrl+Z</code>（Mac:CMD+Z）</li><li>重做：<code>Ctrl+Y</code>（Mac:CMD+Y)</li><li>补全代码：变量、方法后跟<code>Tab键</code></li><li>为一行或多行代码添加/取消注释：<code>Ctrl+/</code>（Mac:CMD+/）</li><li>屏蔽自动输出信息：可在最后一条语句之后加一个分号</li></ul></li></ul><h1 id="二-Matplotlib"><a href="#二-Matplotlib" class="headerlink" title="二 Matplotlib"></a>二 Matplotlib</h1><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'simhei'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 正常显示中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span> <span class="token comment" spellcheck="true">#用来正常显示负号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-绘图架构"><a href="#1-绘图架构" class="headerlink" title="1 绘图架构"></a>1 绘图架构</h2><h3 id="1-1-Matplotlib框架构成"><a href="#1-1-Matplotlib框架构成" class="headerlink" title="1.1 Matplotlib框架构成"></a>1.1 Matplotlib框架构成</h3><p>matplotlib框架分为三层，这三层构成了一个栈，上层可以调用下层。 </p><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C471.png" alt></p><h4 id="1-后端层"><a href="#1-后端层" class="headerlink" title="1 后端层"></a>1 后端层</h4><p>matplotlib的底层，实现了大量的抽象接口类，这些API用来在底层实现图形元素的一个个类</p><ul><li>FigureCanvas对象实现了绘图区域这一概念</li><li>Renderer对象在FigureCanvas上绘图</li></ul><h4 id="2-美工层"><a href="#2-美工层" class="headerlink" title="2 美工层"></a>2 美工层</h4><p>图形中所有能看到的元素都属于Artist对象，即标题、轴标签、刻度等组成图形的所有元素都是Artist对象的实例</p><ul><li>Figure:指整个图形(包括所有的元素,比如标题、线等)</li><li>Axes(<strong>坐标系</strong>):数据的绘图区域</li><li>Axis(<strong>坐标轴</strong>)：坐标系中的一条轴，包含大小限制、刻度和刻度标签</li></ul><p>特点为：</p><ul><li>一个figure(图)可以包含多个axes(坐标系)，但是一个axes只能属于一个figure。</li><li>一个axes(坐标系)可以包含多个axis(坐标轴)，包含两个即为2d坐标系，3个即为3d坐标系</li></ul><h4 id="3-脚本层"><a href="#3-脚本层" class="headerlink" title="3 脚本层"></a>3 脚本层</h4><p>主要用于可视化编程，pyplot模块可以提供给我们一个与matplotlib打交道的接口。可以只通过调用pyplot模块的函数从而操作整个程序包，来绘制图形。</p><ul><li>操作或者改动Figure对象，例如创建Figure对象</li><li>大部分工作是处理样本文件的图形与坐标的生成</li></ul><h2 id="2-折线图"><a href="#2-折线图" class="headerlink" title="2 折线图"></a>2 折线图</h2><h3 id="2-1-折线图绘制"><a href="#2-1-折线图绘制" class="headerlink" title="2.1 折线图绘制"></a>2.1 折线图绘制</h3><h4 id="1-matplotlib-pyplot模块"><a href="#1-matplotlib-pyplot模块" class="headerlink" title="1 matplotlib.pyplot模块"></a>1 matplotlib.pyplot模块</h4><p>matplotlib.pytplot包含了一系列类似于matlab的画图函数。 它的函数<strong>作用于当前图形(figure)的当前坐标系(axes)</strong>。</p><pre><code>import matplotlib.pyplot as plt</code></pre><h4 id="2-折线图绘制与显示"><a href="#2-折线图绘制与显示" class="headerlink" title="2 折线图绘制与显示"></a>2 折线图绘制与显示</h4><p>展现上海一周的天气,比如从星期一到星期日的天气温度如下</p><pre><code>plt.figure(figsize=(10, 10))plt.plot([1, 2, 3, 4, 5, 6 ,7], [17,17,18,15,11,11,13])plt.show()</code></pre><h4 id="3-修改图形大小与图片保存"><a href="#3-修改图形大小与图片保存" class="headerlink" title="3 修改图形大小与图片保存"></a>3 修改图形大小与图片保存</h4><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token punctuation">)</span>    figsize<span class="token punctuation">:</span>指定图的长宽    dpi<span class="token punctuation">:</span>图像的清晰度    返回fig对象plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>path<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-温度变化显示"><a href="#2-2-温度变化显示" class="headerlink" title="2.2 温度变化显示"></a>2.2 温度变化显示</h3><p>需求：画出某城市11点到12点1小时内每分钟的温度变化折线图，温度范围在15度~18度</p><h4 id="1-构造数据、显示"><a href="#1-构造数据、显示" class="headerlink" title="1 构造数据、显示"></a>1 构造数据、显示</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 画出温度变化图</span><span class="token comment" spellcheck="true"># 创建一个figure</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 准备x, y坐标的数据</span>x <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 画折线图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C473.%E4%B8%8A%E6%B5%B72.png" alt></p><h4 id="2-自定义x-y刻度以及中文显示"><a href="#2-自定义x-y刻度以及中文显示" class="headerlink" title="2 自定义x,y刻度以及中文显示"></a>2 自定义x,y刻度以及中文显示</h4><ul><li><p>plt.xticks(x, **kwargs)</p><p>x:要显示的刻度值</p></li><li><p>plt.yticks(y, **kwargs)</p><p>y:要显示的刻度值</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 增加以下两行代码</span><span class="token comment" spellcheck="true"># 构造中文列表的字符串</span>x_ch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点{}分"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_ticks <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改x,y坐标的刻度</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_ch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   $$$$ 因为是替换成了中文，所以要把原来的写在前面plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C474.%E4%B8%8A%E6%B5%B73.png" alt></p><h4 id="3-增加标题、x轴y轴描述信息"><a href="#3-增加标题、x轴y轴描述信息" class="headerlink" title="3 增加标题、x轴y轴描述信息"></a>3 增加标题、x轴y轴描述信息</h4><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"中午11点0分到12点之间的温度变化图示"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C475.%E4%B8%8A%E6%B5%B74.png" alt></p><h4 id="4-再添加一个城市的温度变化"><a href="#4-再添加一个城市的温度变化" class="headerlink" title="4 再添加一个城市的温度变化"></a>4 再添加一个城市的温度变化</h4><p>收集到北京当天温度变化情况，温度在1度到3度。怎么去添加另一个在同一坐标系当中的不同图形，<strong>其实很简单只需要再次plot即可</strong>，但是需要区分线条，如下显示</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生成北京的温度</span>y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 画折线图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用plot可以多次画多个折线</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加图形注释</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"best"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除图上的图例</span>plt<span class="token punctuation">.</span>legend_<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定一个图形风格</strong></p><table><thead><tr><th>颜色字符</th><th>风格字符</th></tr></thead><tbody><tr><td>r 红色</td><td>- 实线</td></tr><tr><td>g 绿色</td><td>- - 虚线</td></tr><tr><td>b 蓝色</td><td>-. 点划线</td></tr><tr><td>w 白色</td><td>: 点虚线</td></tr><tr><td>c 青色</td><td>‘ ‘ 留空、空格</td></tr><tr><td>m 洋红</td><td></td></tr><tr><td>y 黄色</td><td></td></tr><tr><td>k 黑色</td><td></td></tr></tbody></table><h4 id="5-添加图例"><a href="#5-添加图例" class="headerlink" title="5 添加图例"></a>5 添加图例</h4><pre><code>plt.legend(loc=&quot;best&quot;)</code></pre><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C476.legend.png" alt></p><p>整体代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> randomplt<span class="token punctuation">.</span>rc<span class="token punctuation">(</span><span class="token string">'font'</span><span class="token punctuation">,</span> family<span class="token operator">=</span><span class="token string">'SimHei'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 准备数值，生成图表</span>x <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y_shanghai<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y_beijing<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 自定义x,y轴刻度</span>y_ticks <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>x_ticks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点{}分"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4 增加网格线</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 添加x，y，标题轴的描述</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"一小时内温度变化曲线"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6 添加图例</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"best"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-多个坐标系显示"><a href="#2-3-多个坐标系显示" class="headerlink" title="2.3 多个坐标系显示"></a>2.3 多个坐标系显示</h3><p>完整代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 1 创建一行两列画布</span>fig<span class="token punctuation">,</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 生成数据</span>x <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span>y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 3 将数据添加到图表</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y_shanghai<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>  $$$ 表示把数据加入到第一张图表里axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y_beijing<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.1 修改y轴坐标</span>y_ticks <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.2 修改x轴坐标</span>x_ch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11时{}分"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 这里比较麻烦，先改数字型的格式，</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 再改对应的格式化</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 添加x,y的描述</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"北京温度表"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"上海温度表"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6 添加图例</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7 添加风格线</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 展示数据</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过subplots函数实现(旧的版本中有subplot，使用起来不方便)，推荐subplots函数</p><ul><li>matplotlib.pyplot.subplots(nrows=1, ncols=1, **fig_kw) 创建一个带有多个坐标系的图</li></ul><p>如果我们想要将上海和北京的天气图显示在同一个图的不同坐标系当中，效果如下： </p><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C477.subplots.png" alt></p><ul><li><p>sharex, sharey：</p><p>设置为 True 或者 ‘all’ 时，所有子图共享 x 轴或者 y 轴，<br>设置为 False or ‘none’ 时，所有子图的 x，y 轴均为独立，<br>设置为 ‘row’ 时，每一行的子图会共享 x 或者 y 轴，<br>设置为 ‘col’ 时，每一列的子图会共享 x 或者 y 轴。</p></li></ul><blockquote><p><strong>plt.subplots_adjust(top=1)</strong></p><p>设置图形的比例，纵向</p></blockquote><h2 id="3-散点图"><a href="#3-散点图" class="headerlink" title="3 散点图"></a>3 散点图</h2><p>实例代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># import matplotlib.pyplot as plt</span><span class="token comment" spellcheck="true"># 1 准备数据</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">225.98</span><span class="token punctuation">,</span><span class="token number">247.07</span><span class="token punctuation">,</span><span class="token number">253.14</span><span class="token punctuation">,</span><span class="token number">457.85</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">196.63</span><span class="token punctuation">,</span><span class="token number">203.88</span><span class="token punctuation">,</span><span class="token number">210.75</span><span class="token punctuation">,</span><span class="token number">373.74</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 2 创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 绘制图表</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4 图表展示</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C478.png" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 带颜色的散点图，并且有颜色条</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token string">"Recommended Mean"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token string">"Rating Mean"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>c <span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token string">"Count"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cbar <span class="token operator">=</span> plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>cbar<span class="token punctuation">.</span>set_label<span class="token punctuation">(</span><span class="token string">'Count'</span><span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"推荐平均值"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"评分平均值"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">3.3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0.55</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token string">"低分不推荐象限"</span><span class="token punctuation">,</span>ha<span class="token operator">=</span><span class="token string">"left"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token string">"Rating Mean"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">3.3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token string">"Recommended Mean"</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token punctuation">.</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/946.png" alt></p><h2 id="4-柱形图"><a href="#4-柱形图" class="headerlink" title="4 柱形图"></a>4 柱形图</h2><h3 id="4-1-常见图形种类及意义"><a href="#4-1-常见图形种类及意义" class="headerlink" title="4.1 常见图形种类及意义"></a>4.1 常见图形种类及意义</h3><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C479.%E5%9B%BE%E5%BD%A2%E7%A7%8D%E7%B1%BB.png" alt></p><ul><li><p>折线图:以折线的上升或下降来表示统计数量的增减变化的统计图</p><p><strong>特点:能够显示数据的变化趋势，反映事物的变化情况。(变化)</strong></p><p>plt.plot</p></li><li><p>直方图:由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据范围，纵轴表示分布情况。</p><p><strong>特点:绘制,连续性的数据展示一组或者多组数据的分布状况(统计)</strong></p><p>plt.hist</p></li><li><p>柱状图:排列在工作表的列或行中的数据可以绘制到柱状图中。</p><p><strong>特点:绘制连离散的数据,能够一眼看出各个数据的大小,比较数据之间的差别。(统计)</strong></p><p>plt.bar</p></li><li><p>散点图:用两组数据构成多个坐标点，考察坐标点的分布,判断两变量之间是否存在某种关联或总结坐标点的分布模式。</p><p><strong>特点:判断变量之间是否存在数量关联趋势,展示离群点(分布规律)</strong></p><p>plt.scatter</p></li></ul><h3 id="4-2-电影票柱形图"><a href="#4-2-电影票柱形图" class="headerlink" title="4.2 电影票柱形图"></a>4.2 电影票柱形图</h3><h4 id="1-需求"><a href="#1-需求" class="headerlink" title="1 需求"></a>1 需求</h4><p>每部电影的票房收入对比？</p><p>1、画出每部电影的票房收入对比，效果如下：</p><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C480.%E7%94%B5%E5%BD%B1%E7%A5%A8%E6%88%BF%E6%9D%A1%E5%BD%A2%E5%9B%BE.png" alt></p><h4 id="2-绘制"><a href="#2-绘制" class="headerlink" title="2 绘制"></a>2 绘制</h4><ul><li>matplotlib.pyplot.bar(x, y,width, align=’center’, **kwargs)</li></ul><p>绘制柱状图</p><pre class="line-numbers language-python"><code class="language-python">Parameters<span class="token punctuation">:</span>    x <span class="token punctuation">:</span> sequence of scalars<span class="token punctuation">.</span>width <span class="token punctuation">:</span> scalar <span class="token operator">or</span> array<span class="token operator">-</span>like<span class="token punctuation">,</span> optional柱状图的宽度align <span class="token punctuation">:</span> <span class="token punctuation">{</span>‘center’<span class="token punctuation">,</span> ‘edge’<span class="token punctuation">}</span><span class="token punctuation">,</span> optional<span class="token punctuation">,</span> default<span class="token punctuation">:</span> ‘center’Alignment of the bars to the x coordinates<span class="token punctuation">:</span>‘center’<span class="token punctuation">:</span> Center the base on the x positions<span class="token punctuation">.</span>‘edge’<span class="token punctuation">:</span> Align the left edges of the bars <span class="token keyword">with</span> the x positions<span class="token punctuation">.</span>每个柱状图的位置对齐方式<span class="token operator">**</span>kwargs <span class="token punctuation">:</span>color<span class="token punctuation">:</span>选择柱状图的颜色Returns<span class="token punctuation">:</span>    `<span class="token punctuation">.</span>BarContainer`Container <span class="token keyword">with</span> all the bars <span class="token operator">and</span> optionally errorbars<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 完成简单的条形图展现不同的电影票房之间的对比</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 准备电影的名字以及电影的票房数据</span>movie_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'雷神3：诸神黄昏'</span><span class="token punctuation">,</span><span class="token string">'正义联盟'</span><span class="token punctuation">,</span><span class="token string">'东方快车谋杀案'</span><span class="token punctuation">,</span><span class="token string">'寻梦环游记'</span><span class="token punctuation">,</span><span class="token string">'全球风暴'</span><span class="token punctuation">,</span><span class="token string">'降魔传'</span><span class="token punctuation">,</span><span class="token string">'追捕'</span><span class="token punctuation">,</span><span class="token string">'七十七天'</span><span class="token punctuation">,</span><span class="token string">'密战'</span><span class="token punctuation">,</span><span class="token string">'狂兽'</span><span class="token punctuation">,</span><span class="token string">'其它'</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">73853</span><span class="token punctuation">,</span><span class="token number">57767</span><span class="token punctuation">,</span><span class="token number">22354</span><span class="token punctuation">,</span><span class="token number">15969</span><span class="token punctuation">,</span><span class="token number">14839</span><span class="token punctuation">,</span><span class="token number">8725</span><span class="token punctuation">,</span><span class="token number">8716</span><span class="token punctuation">,</span><span class="token number">8318</span><span class="token punctuation">,</span><span class="token number">7916</span><span class="token punctuation">,</span><span class="token number">6764</span><span class="token punctuation">,</span><span class="token number">52222</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 放进横坐标的数字列表</span>x <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>movie_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画出条形图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改刻度名称</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">,</span> movie_name<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-比较相同天数的票房"><a href="#3-比较相同天数的票房" class="headerlink" title="3 比较相同天数的票房"></a>3 比较相同天数的票房</h4><p>3.1数据如下</p><pre><code>movie_name = [&#39;雷神3：诸神黄昏&#39;,&#39;正义联盟&#39;,&#39;寻梦环游记&#39;]first_day = [10587.6,10062.5,1275.7]first_weekend=[36224.9,34479.6,11830]数据来源: https://piaofang.maoyan.com/?ver=normal</code></pre><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C481.%E9%A6%96%E6%97%A5%E9%A6%96%E5%91%A8%E7%A5%A8%E6%88%BF%E5%AF%B9%E6%AF%94.png" alt></p><p>3.2 分析</p><ul><li>添加首日首周两部分的柱状图</li><li>x轴中文坐标位置调整</li></ul><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 三部电影的首日和首周票房对比</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>movie_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'雷神3：诸神黄昏'</span><span class="token punctuation">,</span><span class="token string">'正义联盟'</span><span class="token punctuation">,</span><span class="token string">'寻梦环游记'</span><span class="token punctuation">]</span>first_day <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10587.6</span><span class="token punctuation">,</span><span class="token number">10062.5</span><span class="token punctuation">,</span><span class="token number">1275.7</span><span class="token punctuation">]</span>first_weekend<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">36224.9</span><span class="token punctuation">,</span><span class="token number">34479.6</span><span class="token punctuation">,</span><span class="token number">11830</span><span class="token punctuation">]</span>x <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>movie_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画出柱状图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> first_day<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"首日票房"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 首周柱状图显示的位置在首日的位置右边  </span>$$$ 再添加一个柱形图，x的起始位置变了，向右移动左边柱形图的宽度，这样两个柱形图就挨着了plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">0.2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token punctuation">,</span> first_weekend<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"首周票房"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示X轴中文，固定在首日和首周的中间位置</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">0.1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token punctuation">,</span> movie_name<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-直方图"><a href="#5-直方图" class="headerlink" title="5 直方图"></a>5 直方图</h2><h3 id="5-1-直方图-Histogram-介绍"><a href="#5-1-直方图-Histogram-介绍" class="headerlink" title="5.1 直方图(Histogram)介绍"></a>5.1 直方图(Histogram)介绍</h3><p>直方图，形状类似柱状图却有着与柱状图完全不同的含义。直方图牵涉统计学的概念，首先要对数据进行分组，然后统计每个分组内数据元的数量。 在坐标系中，横轴标出每个组的端点，纵轴表示频数，每个矩形的高代表对应的频数，称这样的统计图为频数分布直方图。</p><h3 id="相关概念："><a href="#相关概念：" class="headerlink" title="相关概念："></a>相关概念：</h3><ul><li>组数：在统计数据时，我们把数据按照不同的范围分成几个组，分成的组的个数称为组数</li><li>组距：每一组两个端点的差</li></ul><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C482.%E7%9B%B4%E6%96%B9%E5%9B%BE.png" alt="直方图"></p><h3 id="5-2-电影时长分布绘制"><a href="#5-2-电影时长分布绘制" class="headerlink" title="5.2 电影时长分布绘制"></a>5.2 电影时长分布绘制</h3><p>现有250部电影的时长,希望统计出这些电影时长的分布状态(比如时长为100分钟到120分钟电影的数量,出现的频率)等信息,你应该如何呈现这些数据?</p><p>数据：</p><pre><code>time =[131,  98, 125, 131, 124, 139, 131, 117, 128, 108, 135, 138, 131, 102, 107, 114, 119, 128, 121, 142, 127, 130, 124, 101, 110, 116, 117, 110, 128, 128, 115,  99, 136, 126, 134,  95, 138, 117, 111,78, 132, 124, 113, 150, 110, 117,  86,  95, 144, 105, 126, 130,126, 130, 126, 116, 123, 106, 112, 138, 123,  86, 101,  99, 136,123, 117, 119, 105, 137, 123, 128, 125, 104, 109, 134, 125, 127,105, 120, 107, 129, 116, 108, 132, 103, 136, 118, 102, 120, 114,105, 115, 132, 145, 119, 121, 112, 139, 125, 138, 109, 132, 134,156, 106, 117, 127, 144, 139, 139, 119, 140,  83, 110, 102,123,107, 143, 115, 136, 118, 139, 123, 112, 118, 125, 109, 119, 133,112, 114, 122, 109, 106, 123, 116, 131, 127, 115, 118, 112, 135,115, 146, 137, 116, 103, 144,  83, 123, 111, 110, 111, 100, 154,136, 100, 118, 119, 133, 134, 106, 129, 126, 110, 111, 109, 141,120, 117, 106, 149, 122, 122, 110, 118, 127, 121, 114, 125, 126,114, 140, 103, 130, 141, 117, 106, 114, 121, 114, 133, 137,  92,121, 112, 146,  97, 137, 105,  98, 117, 112,  81,  97, 139, 113,134, 106, 144, 110, 137, 137, 111, 104, 117, 100, 111, 101, 110,105, 129, 137, 112, 120, 113, 133, 112,  83,  94, 146, 133, 101,131, 116, 111,  84, 137, 115, 122, 106, 144, 109, 123, 116, 111,111, 133, 150]</code></pre><p>效果：</p><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C483.%E7%94%B5%E5%BD%B1%E6%97%B6%E9%95%BF%E5%88%86%E5%B8%83.png" alt="电影时长分布"></p><h4 id="1-matplotlib-pyplot-hist-x-bins-None-normed-None-kwargs"><a href="#1-matplotlib-pyplot-hist-x-bins-None-normed-None-kwargs" class="headerlink" title="1 matplotlib.pyplot.hist(x, bins=None, normed=None, **kwargs)"></a>1 matplotlib.pyplot.hist(x, bins=None, normed=None, **kwargs)</h4><p>直方图绘制</p><pre class="line-numbers language-python"><code class="language-python">Parameters<span class="token punctuation">:</span>    x <span class="token punctuation">:</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">)</span> array <span class="token operator">or</span> sequence of <span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">)</span> arraysbins <span class="token punctuation">:</span> integer <span class="token operator">or</span> sequence <span class="token operator">or</span> ‘auto’<span class="token punctuation">,</span> optional组距normed <span class="token punctuation">:</span> bool<span class="token punctuation">,</span> optional以频率显示或者以頻数显示<span class="token punctuation">,</span>默认頻数<span class="token punctuation">,</span>值<span class="token number">1</span>为频率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2 分析"></a>2 分析</h4><ul><li>设置组距 </li><li>设置组数（通常对于数据较少的情况，分为5~12组，数据较多，更换图形显示方式）<ul><li>通常设置组数会有相应公式：组数 = 极差/组距= (max-min)/bins</li></ul></li></ul><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 展现不同电影的时长分布状态</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 准备时长数据</span>time <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">,</span>  <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span>  <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span>  <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span>  <span class="token number">86</span><span class="token punctuation">,</span>  <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span>  <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span>  <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span>  <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span><span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span>  <span class="token number">92</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span>  <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span>  <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span>  <span class="token number">81</span><span class="token punctuation">,</span>  <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span>  <span class="token number">83</span><span class="token punctuation">,</span>  <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span>  <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义一个间隔大小</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 得出组数</span>bins <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">-</span> min<span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画出直方图</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>time<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> normed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 指定刻度的范围，以及步长</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>min<span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"电影时长大小"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"电影的数据量"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:%5Cpython%5C%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87%5C484.%E7%94%B5%E5%BD%B1%E6%97%B6%E9%95%BF%E5%88%86%E5%B8%83%E6%97%A0%E7%BD%91%E6%A0%BC.png" alt="电影时长分布无网格"></p><h4 id="3-增加网格显示"><a href="#3-增加网格显示" class="headerlink" title="3 增加网格显示"></a>3 增加网格显示</h4><p>为了更好将图形对应到</p><pre><code>plt.grid(True, linestyle=&#39;--&#39;, alpha=0.5)</code></pre><h3 id="5-3-直方图的场景"><a href="#5-3-直方图的场景" class="headerlink" title="5.3 直方图的场景"></a>5.3 直方图的场景</h3><ul><li>用于表示分布情况</li><li>通过直方图还可以观察和估计哪些数据比较集中，异常或者孤立的数据分布在何处</li></ul><p>例如：用户年龄分布，商品价格分布</p><h3 id="5-4-直方图与其他图表的对比"><a href="#5-4-直方图与其他图表的对比" class="headerlink" title="5.4 直方图与其他图表的对比"></a>5.4 直方图与其他图表的对比</h3><ul><li>柱状图是以矩形的长度表示每一组的频数或数量，其宽度(表示类别)则是固定的，<strong>利于较小的数据集分析</strong>。</li><li>直方图是以矩形的长度表示每一组的频数或数量，宽度则表示各组的组距，因此其高度与宽度均有意义，利于<strong>展示大量数据集的统计结果</strong>。</li><li>由于分组数据具有连续性，<strong>直方图的各矩形通常是连续排列，而柱状图则是分开排列</strong>。</li></ul><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h2><h3 id="6-1-竖直线、水平线"><a href="#6-1-竖直线、水平线" class="headerlink" title="6.1 竖直线、水平线"></a>6.1 竖直线、水平线</h3><p>axvline:画垂直于x轴的线</p><p>axcline：画垂直于y轴的线</p><p>帕累托图</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">percentage_accumulation</span><span class="token punctuation">(</span>series<span class="token punctuation">,</span>per<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> series<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>round<span class="token punctuation">(</span>series<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span>per<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>series<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>percentage<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    percentage<span class="token punctuation">.</span>append<span class="token punctuation">(</span>percentage_accumulation<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"Positive Feedback Count"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制帕累托图    </span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>percentage<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"评论点赞数累计百分比"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">53</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"g"</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0.79</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"g"</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/908.png" alt></p><h3 id="6-2-seaborn"><a href="#6-2-seaborn" class="headerlink" title="6.2 seaborn"></a>6.2 seaborn</h3><h4 id="1-kdeplot-核密度估计"><a href="#1-kdeplot-核密度估计" class="headerlink" title="1 kdeplot 核密度估计"></a>1 kdeplot 核密度估计</h4><h3 id="非参数估计方法"><a href="#非参数估计方法" class="headerlink" title="非参数估计方法"></a>非参数估计方法</h3><p>由于核密度估计方法不利用有关数据分布的先验知识，对数据分布不附加任何假定，是一种从数据样本本身出发研究数据分布特征的方法，因而，在统计学理论和应用领域均受到高度的重视。</p><p>在密度函数估计中有一种方法是被广泛应用的——<strong>直方图</strong>。如下图中的第一和第二幅图（名为Histogram和Histogram, bins shifted）。直方图的特点是简单易懂，但缺点在于以下三个方面：密度函数是不平滑的；密度函数受子区间（即每个直方体）<strong>宽度影响很大</strong>，同样的原始数据如果取不同的子区间范围，那么展示的结果可能是完全不同的。如下图中的前两个图，第二个图只是在第一个图的基础上，划分区间增加了0.75，但展现出的密度函数却看起来差异很大；直方图最多<strong>只能展示2维数据</strong>，如果维度更多则无法有效展示。 </p><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/935.png" alt></p><p>虽然采用不同的核函数都可以获得一致性的结论（整体趋势和密度分布规律性基本一致），但核密度函数也不是完美的。除了核算法的选择外，带宽（bandwidth）也会影响密度估计，过大或过小的带宽值都会影响估计结果。如上图中的最后三个图，名为Gaussian Kernel Density,bandwidth=0.75、Gaussian Kernel Density,bandwidth=0.25、Gaussian Kernel Density,bandwidth=0.55. </p><p><strong>总而言之，核密度就是用来估计密度的，如果你有一系列空间点数据，那么核密度估计往往是比较好的可视化方法</strong> </p><p>核密度函数的原理比较简单，在我们知道某一事物的概率分布的情况下，如果<strong>某一个数在观察中出现了</strong>，我们可以认为这个数的<strong>概率密度很大</strong>，和这个数比较近的数的概率密度也会比较大，而那些离这个数远的数的概率密度会比较小。 </p><p>基于这种想法，针对观察中的第一个数，我们可以用K去拟合我们想象中的那个远小近大概率密度。对每一个观察数拟合出的多个概率密度分布函数，取平均。如果某些数是比较重要的，则可以取加权平均。<strong>需要说明的一点是，核密度的估计并不是找到真正的分布函数。</strong></p><p>Note: 核密度估计其实就是通过核函数（如高斯）将每个数据点的<strong>数据+带宽</strong>当作核函数的参数，得到N个核函数，再线性叠加就形成了核密度的估计函数，归一化后就是核密度概率密度函数了。</p><p>KDE的概率密度函数公式得到后 </p><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/936.png" alt></p><blockquote><p>看到这个公式明白了，为什么x轴是小数时，y轴上的值会大于1，因为带宽为小数，而带宽又作分母，所以值会大于1</p><p>核密度函数，峰值就是出现次数最多的。</p></blockquote><h2 id="7-词云"><a href="#7-词云" class="headerlink" title="7 词云"></a>7 词云</h2><p>WordCloud 词云图，显示主要的关键词（高频词）这种方式，非常方便 </p><ul><li>from wordclound import WordClound</li></ul><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/948.png" alt></p><p>了解了各项参数后，我们就可以自定义想要的词云图了。比如更换一下背景颜色和整体风格，就可以通过修改以下几项参数实现： </p><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/949.png" alt></p><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/950.png" alt></p><p>接下来，我们提升一点难度，通过设置 StopWords 去掉没有实际意义的「ONE」字符，然后将词云图绘制在我们自定义的一张图片上。</p><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/951.png" alt></p><p>代码实现如下：</p><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/952.png" alt></p><p>这里，首先通过 open() 方法读取文本文件，Image.open() 方法读取了背景图片，np.array 方法将图片转换为矩阵。</p><p>接着设置了词云自带的英文 StopWords 停止词，用来分割筛除文本中不需要的词汇，比如：a、an、the 这些。</p><p>然后，在 WordCloud 方法中，设置词云的具体参数。generate_from_text() 方法生成该词云，recolor() 则是根据图片色彩绘制词云文字颜色。最终的词云绘制效果如下：</p><p><img src="E:/python/%E8%AF%BE%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%AF%BE%E4%BB%B6%E5%9B%BE%E7%89%87/953.png" alt></p><p>原文链接：<a href="https://blog.csdn.net/crhacq798/article/details/86569755" target="_blank" rel="noopener">https://blog.csdn.net/crhacq798/article/details/86569755</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础 </title>
      <link href="/1-1python-ji-chu.html"/>
      <url>/1-1python-ji-chu.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-python-介绍"><a href="#1-python-介绍" class="headerlink" title="1 python 介绍"></a>1 python 介绍</h4><h5 id="1-1-计算机的组成"><a href="#1-1-计算机的组成" class="headerlink" title="1.1 计算机的组成"></a>1.1 计算机的组成</h5><p>​    1、 硬件</p><p>​    2、 软件</p><h5 id="1-2-python语言简介"><a href="#1-2-python语言简介" class="headerlink" title="1.2 python语言简介"></a>1.2 python语言简介</h5><h5 id="1-3-windows下开发环境的搭建"><a href="#1-3-windows下开发环境的搭建" class="headerlink" title="1.3 windows下开发环境的搭建"></a>1.3 windows下开发环境的搭建</h5><p>​    1、安装python解释器</p><p>​    2、安装文本编辑器</p><p>​    3、集成开发环境 pycharm</p><h4 id="2-pycharm软件的使用"><a href="#2-pycharm软件的使用" class="headerlink" title="2 pycharm软件的使用"></a>2 pycharm软件的使用</h4><h5 id="2-1-软件的使用"><a href="#2-1-软件的使用" class="headerlink" title="2.1 软件的使用"></a>2.1 软件的使用</h5><p>​    1、菜单栏</p><p>​    2、项目结构区</p><p>​    3、代码区</p><p>​    4、运行结果信息区</p><h5 id="2-2-软件使用技巧"><a href="#2-2-软件使用技巧" class="headerlink" title="2.2 软件使用技巧"></a>2.2 软件使用技巧</h5><p>​    1、修改字体大小</p><p>​    2、debug调试</p><p>​    3、多文件管理</p><p>​    4、多项目管理</p><h5 id="2-3-快捷方式"><a href="#2-3-快捷方式" class="headerlink" title="2.3 快捷方式"></a>2.3 快捷方式</h5><ul><li>编辑（Editing）</li></ul><pre class="line-numbers language-python"><code class="language-python">Ctrl <span class="token operator">+</span> Shift <span class="token operator">+</span> Enter： 语句完成Ctrl <span class="token operator">+</span> Shift  <span class="token operator">+</span>end：  移到全部代码最后的话end：  移到单行最后Ctrl <span class="token operator">+</span> y： 删除一行Ctrl <span class="token operator">+</span> D 复制选定的区域或行Ctrl <span class="token operator">+</span> Delete 删除到字符结束Ctrl <span class="token operator">+</span> Backspace 删除到字符开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行</li></ul><pre class="line-numbers language-python"><code class="language-python">Shift <span class="token operator">+</span> F10 运行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-python基础语法"><a href="#3-python基础语法" class="headerlink" title="3 python基础语法"></a>3 python基础语法</h4><h5 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h5><p>​    1、单行注释</p><p>​    2、多行注释</p><h5 id="3-2-提示性信息"><a href="#3-2-提示性信息" class="headerlink" title="3.2 提示性信息"></a>3.2 提示性信息</h5><p>​    1、红色波浪线—语法检查</p><p>​    2、灰色波浪线—规范</p><p>​    3、绿色波浪线—单词拼写</p><h5 id="3-3-运算符"><a href="#3-3-运算符" class="headerlink" title="3.3 运算符"></a>3.3 运算符</h5><p>​    1、//    整除</p><p>​    2、%   余数</p><p>​    3、**  次方</p><p>浮点型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%f"</span> <span class="token operator">%</span> <span class="token number">5.7777777</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># f前面什么也不写，默认保留小数点后6位</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%f"</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># f 前面写的.几就保留几位小数</span><span class="token comment" spellcheck="true"># 返回值</span><span class="token number">5.777778</span><span class="token number">5.000000</span><span class="token number">5.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-变量"><a href="#3-4-变量" class="headerlink" title="3.4 变量"></a>3.4 变量</h5><p>​    1、变量命名规则</p><p>​    2、运算</p><p>​        a、赋值运算</p><p>​            加等、减等、乘等</p><p>​        注：算除法时，4/2，结果是2.0，而不是2</p><p>整数如何补占位符：02即两位数，如果输入的数字为一位数，自动补0，如果超过占位数，不变。2前面要写0，才能用0补位，若是省略，则是空格补位。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token operator">%</span> <span class="token number">5.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回值：5  只取整数，而不是四舍五入</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> <span class="token number">5.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回值：05  返回一个占位2位的整数，用0占位</span><span class="token comment" spellcheck="true"># 尝试用#占位，返回也是空占位</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%12d"</span> <span class="token operator">%</span> <span class="token number">5.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回值：            5 返回一个占位12位的数字，因为12前什么也没有，所以用空字符占位</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%2d"</span> <span class="token operator">%</span> <span class="token number">5.7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回值：05   只返回整数部分，小数部分略去</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        b、字符串运行</p><p>​    3、如何查看关键字</p><p>​        help(“keywords”)</p><p>​    1、数值型</p><p>​        整数（int）、小数（float）、逻辑值（bool）</p><p>​    2、非数值型</p><p>​        str    list    tuple    set</p><p>格式化占位符：例子：（占位的可以是列表、数字、字符串等任何类型）</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"用户名："</span><span class="token punctuation">)</span>b <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token string">"用户名:{},密码:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>%与format的区别：</p><p>1、%占位符，不能传递列表、字典等</p><p>2、format可以指定参数位置，以下实例</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token string">"{name}今年{age}岁,{name}成绩特别好"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"王二"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回值</span>王二今年<span class="token number">18</span>岁<span class="token punctuation">,</span>王二成绩特别好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-分支语句"><a href="#4-分支语句" class="headerlink" title="4 分支语句"></a>4 分支语句</h4><h5 id="4-1-if-简单版"><a href="#4-1-if-简单版" class="headerlink" title="4.1 if 简单版"></a>4.1 if 简单版</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果年龄大于等于18岁，即成年，输出"已经成年，可以上网"。</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经成年，可以上网'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回值</span>已经成年，可以上网<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-if-…-else"><a href="#4-2-if-…-else" class="headerlink" title="4.2 if … else"></a>4.2 if … else</h5><p>作用：条件成立执行if下面的代码；条件不成立执行else下面的代码</p><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},已经成年，可以上网'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},未成年，请自行回家写作业'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># age=20  返回    您的年龄是20,已经成年，可以上网</span><span class="token comment" spellcheck="true"># age=16  返回    您的年龄是16,未成年，请自行回家写作业</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-3-多重判断"><a href="#4-3-多重判断" class="headerlink" title="4.3 多重判断"></a>4.3 多重判断</h5><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；</p><p>如果年龄在18-60岁之间为合法年龄；大于60岁为法定退休年龄。</p><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},童工一枚'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age<span class="token operator">>=</span><span class="token number">18</span> <span class="token operator">and</span> age<span class="token operator">&lt;=</span><span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},合法工龄'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},可以退休'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-4-if嵌套"><a href="#4-4-if嵌套" class="headerlink" title="4.4 if嵌套"></a>4.4 if嵌套</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""1.如果有钱，则可以上车2.上车后，如果有空座，可以坐下上车后，如果没有空座，则站着等空座位如果没钱，不能上车"""</span><span class="token comment" spellcheck="true"># 假设用money = 1表示有钱, money = 0表示没有钱;</span><span class="token comment" spellcheck="true"># seat = 1表示有空座，seat = 0表示没有空座</span>money<span class="token operator">=</span><span class="token number">1</span>seat<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">if</span> money <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'土豪，不差钱，顺利上车'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> seat <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有空座，可以坐下'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有空座，站等'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没钱，不能上车，追着公交跑'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-三元运算符"><a href="#4-5-三元运算符" class="headerlink" title="4.5 三元运算符"></a>4.5 三元运算符</h5><p>语法：(条件成立执行的表达式) if (条件) else (条件不成立执行的表达式)</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>c <span class="token operator">=</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-循环语句"><a href="#5-循环语句" class="headerlink" title="5 循环语句"></a>5 循环语句</h4><h5 id="5-1-while-结构"><a href="#5-1-while-结构" class="headerlink" title="5.1 while 结构"></a>5.1 while 结构</h5><ul><li>例题1：计算1-100累加和</li></ul><blockquote><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，</p><p>即前两个数字的相加结果+下一个数字(前一个数字+1)。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">i<span class="token operator">=</span><span class="token number">1</span>result<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回 5050</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例题2：计算1-100偶数累加和</li></ul><blockquote><p>分析：1-100的偶数和，即2 + 4 + 6 + 8….，得到偶数的方法如下：</p><ul><li><p>偶数即是和2取余结果为0的数字，</p><p>可以加入条件语句判断是否为偶数，为偶数则累加</p></li><li><p>初始值为0 / 2 ,计数器每次累加2</p></li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法一：条件判断和2取余数为0则累加计算</span>i <span class="token operator">=</span> <span class="token number">1</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i    i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回  2550</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法二：计数器控制增量为2</span>i <span class="token operator">=</span> <span class="token number">0</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i    i<span class="token operator">+=</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回  2550</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-break-continue"><a href="#5-2-break-continue" class="headerlink" title="5.2 break/continue"></a>5.2 break/continue</h5><p>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里</p><p>“吃苹果”的动作是不是重复执行？</p><p>1、break </p><blockquote><p>如果吃的过程中，吃完第三个吃饱了，则不需要</p><p>再吃第4个和第五个苹果，即是吃苹果的动作停止，</p><p>这里就是break控制循环流程，即终止此循环。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">i<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'吃饱了不吃了'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'吃了第{i}个苹果'</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 返回</span>吃了第<span class="token number">1</span>个苹果吃了第<span class="token number">2</span>个苹果吃了第<span class="token number">3</span>个苹果吃饱了不吃了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、continue 结束本轮循环</p><blockquote><p>如果吃的过程中，吃到第三个吃出一个大虫子…,</p><p>是不是这个苹果就不吃了，开始吃第四个苹<br>果，这里就是continue控制循环流程，</p><p>即退出当前一次循环继而执行下一次循环代码。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'大虫子，第{i}个不吃了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这句一定要加上，否则陷入死循环，因为如果不加的话</span>        <span class="token comment" spellcheck="true"># 此时i=3,执行continue后，会跳到第二行，i=3，还是</span>        <span class="token comment" spellcheck="true"># 会进入到if判断语句中，加上后，i=4,就可以跳过if语句</span>        i <span class="token operator">+=</span> <span class="token number">1</span>          <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'吃了第{i}个苹果'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 返回</span>吃了第<span class="token number">1</span>个苹果吃了第<span class="token number">2</span>个苹果大虫子，第<span class="token number">3</span>个不吃了吃了第<span class="token number">4</span>个苹果吃了第<span class="token number">5</span>个苹果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-3-while-嵌套"><a href="#5-3-while-嵌套" class="headerlink" title="5.3 while 嵌套"></a>5.3 while 嵌套</h5><p>实例：九九乘法表</p><pre><code>1*1=1    1*2=2    2*2=4    1*3=3    2*3=6    3*3=9    1*4=4    2*4=8    3*4=12    4*4=16    1*5=5    2*5=10    3*5=15    4*5=20    5*5=25    1*6=6    2*6=12    3*6=18    4*6=24    5*6=30    6*6=36    1*7=7    2*7=14    3*7=21    4*7=28    5*7=35    6*7=42    7*7=49    1*8=8    2*8=16    3*8=24    4*8=32    5*8=40    6*8=48    7*8=56    8*8=64    1*9=9    2*9=18    3*9=27    4*9=36    5*9=45    6*9=54    7*9=63    8*9=72    9*9=81</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#重复打印9行表达式</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#打印一行里面的表达式 a * b = a*b</span>    i<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{i}*{j}={j*i}'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-4-for-循环"><a href="#5-4-for-循环" class="headerlink" title="5.4 for 循环"></a>5.4 for 循环</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-函数基础使用"><a href="#6-函数基础使用" class="headerlink" title="6 函数基础使用"></a>6 函数基础使用</h4><h5 id="6-1-定义与调用"><a href="#6-1-定义与调用" class="headerlink" title="6.1 定义与调用"></a>6.1 定义与调用</h5><h5 id="6-2-文档注释"><a href="#6-2-文档注释" class="headerlink" title="6.2 文档注释"></a>6.2 文档注释</h5><p>例子：鼠标放到调用函数上，按住ctrl 键就可以看到中文注释</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""用于测试"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-3-作用域"><a href="#6-3-作用域" class="headerlink" title="6.3 作用域"></a>6.3 作用域</h5><p>​    1、全局作用域</p><p>​        定义：所处的域为global作用域，变量放到一个全局命名空间中，实质上就是放到全局作用域的字典中</p><p>例子:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token number">30</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 返回结果为10 / 10   即函数内用golbal后，将函数内的同名变量变成了全局变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2、local作用域</p><p>​        定义：所处的域为local作用域，变量放到一个局部命名空间中，实质上就是放到局部作用域的字典中</p><p>​    3、inclosing作用域</p><p>​        定义：有两层嵌套的函数，全局作用域与局部作用域中间那层是inclosing作用域</p><h5 id="6-4-函数的定义—返回值"><a href="#6-4-函数的定义—返回值" class="headerlink" title="6.4 函数的定义—返回值"></a>6.4 函数的定义—返回值</h5><p>用return来接收运行结果，再用变量接收调用的函数。</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>bx <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-面向对象基础"><a href="#7-面向对象基础" class="headerlink" title="7 面向对象基础"></a>7 面向对象基础</h4><h5 id="7-1-类的定义与调用"><a href="#7-1-类的定义与调用" class="headerlink" title="7.1 类的定义与调用"></a>7.1 类的定义与调用</h5><p>​    1、成员变量</p><p>​    2、成员方法 </p><p>​        1）init方法</p><p>​        2）str方法</p><p>例子：str方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我是好人"</span>a <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回：我是好人   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3、封装</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Card</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>card_id <span class="token operator">=</span> None        self<span class="token punctuation">.</span>__pwd <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__pwd    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__pwd <span class="token operator">=</span> pwdc <span class="token operator">=</span> Card<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#返回：123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4、成员方法调用成员变量</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Card</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小花"</span>        self<span class="token punctuation">.</span>__pwd <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">catch</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s抓住了老鼠"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>c <span class="token operator">=</span> Card<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>catch<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#返回：小花抓住了老鼠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-2-创建对象"><a href="#7-2-创建对象" class="headerlink" title="7.2 创建对象"></a>7.2 创建对象</h5><h5 id="7-3-封装"><a href="#7-3-封装" class="headerlink" title="7.3 封装"></a>7.3 封装</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name    <span class="token keyword">def</span> <span class="token function">set_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> nameu1 <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>u1<span class="token punctuation">.</span>set_name<span class="token punctuation">(</span><span class="token string">"baby"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#  这个属性是返回类的所有属性。</span><span class="token comment" spellcheck="true">#返回值</span>baby<span class="token punctuation">{</span><span class="token string">'_User__name'</span><span class="token punctuation">:</span> <span class="token string">'baby'</span><span class="token punctuation">}</span>$$$$ 这里如果用self<span class="token punctuation">.</span>_name 则u1<span class="token punctuation">.</span>_name就可以得到它的属性值，带两个__，则是真的私有<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"qi"</span>        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token string">"17"</span>c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>_Cat__age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment" spellcheck="true">#私有变量也是可以改的，只是不能直接改，需要加类名，所以用其他函数转曲了一下。</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回值</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'qi'</span><span class="token punctuation">,</span> <span class="token string">'_Cat__age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：__name属于私有属性，是一种伪私有，因为只是访问的路径变了。</p><p>实质，__name在pycharm里的名称为     _User  _name  ,如果类外按这个变量去修改，是可以修改的。</p><h4 id="8-面向对象高级"><a href="#8-面向对象高级" class="headerlink" title="8 面向对象高级"></a><strong>8 面向对象高级</strong></h4><h5 id="8-1-类变量"><a href="#8-1-类变量" class="headerlink" title="8.1 类变量"></a>8.1 类变量</h5><p>​    1、定义与调用</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Card</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"七月"</span>    <span class="token keyword">def</span> <span class="token function">catch</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s抓住了老鼠"</span> <span class="token operator">%</span> Card<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Card<span class="token punctuation">.</span>name<span class="token punctuation">)</span>c <span class="token operator">=</span> Card<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>catch<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#返回：七月  /七月抓住了老鼠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-2-类方法"><a href="#8-2-类方法" class="headerlink" title="8.2 类方法"></a>8.2 类方法</h5><p>​    定义写法 @classmethod<br>​              def 方法名（cls,形参）：自动补充cls</p><p>​        <strong>类方法中不可调用实例，实例可以调用类方法</strong></p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Card</span><span class="token punctuation">:</span>    name<span class="token operator">=</span><span class="token string">"七月"</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">text</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s抓住了老鼠"</span> <span class="token operator">%</span> Card<span class="token punctuation">.</span>name<span class="token punctuation">)</span>Card<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-3-静态方法（了解）"><a href="#8-3-静态方法（了解）" class="headerlink" title="8.3 静态方法（了解）"></a>8.3 静态方法（了解）</h5><p>​    def 方法名（）    括号内不补充</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我今天很开心"</span><span class="token punctuation">)</span>Chinese<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#返回值：我今天很开心</span><span class="token comment" spellcheck="true"># 静态方法不需要传参</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-4-魔法方法"><a href="#8-4-魔法方法" class="headerlink" title="8.4 魔法方法"></a>8.4 魔法方法</h5><p>当把（<strong>name</strong>）放到函数里，从另一个文件中import这个函数，结果返回的是这个<strong>文件名</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#返回的是__main__    是一个魔法方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    </p><h5 id="8-5-继承"><a href="#8-5-继承" class="headerlink" title="8.5 继承"></a>8.5 继承</h5><p>​    <strong>1、定义</strong></p><p>​    <strong>2、继承关系结构图</strong></p><p>​        类名  .<code>__mro__</code>  查看继承关系链</p><p>​    <strong>3、重写</strong></p><p>​        1）定义：在子类中可以定义与父类相同名称的方法，此时子类的方法对父类构成了重写。</p><p>​        2）如果子类重写了父类的方法，使用子类对象调用被重写的方法时，执行子类中重写后的方法。</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"动物吃东西"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼"</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">#返回值：猫吃鱼</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        3）重写关系中调用父类的被覆盖的方法</p><ul><li>super().方法名()<code>不用写self</code></li></ul><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"动物吃东西"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼"</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果：猫吃鱼   动物吃东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>父类名.方法名 <code>Animal.eat()</code></li></ul><p><strong>4、多继承</strong></p><p>​        class Child(Father,Mother)</p><p>​        如果方法名重复，优先谁在前，调用谁</p><p>​        父类名.方法名（self）</p><p>例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爸爸擅长唱歌"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不喜欢跳舞"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Mother</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不擅长唱歌"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"妈妈喜欢跳舞"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Father<span class="token punctuation">,</span>Mother<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Mother<span class="token punctuation">.</span>sing<span class="token punctuation">(</span>self<span class="token punctuation">)</span>c <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sing<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#返回结果：不擅长唱歌</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-6-多态"><a href="#8-6-多态" class="headerlink" title="8.6 多态"></a>8.6 多态</h5><p>​    定义：一个<strong>对象</strong>具有多种形态，在不同的使用环境中以不同的形态展示其功能，多态发生有不同关系的基础上。</p><p>​    发生在继承的基础上。</p><p>例子：man就是一个多态</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">teach</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"教授知识"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">drive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开车"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Man</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">,</span>Driver<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">teach</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"教授python知识"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开小轿车"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>driver<span class="token punctuation">)</span><span class="token punctuation">:</span>           driver<span class="token punctuation">.</span>drive<span class="token punctuation">(</span><span class="token punctuation">)</span>man <span class="token operator">=</span> Man<span class="token punctuation">(</span><span class="token punctuation">)</span>d <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>play<span class="token punctuation">(</span>man<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类，形参，通常传的是一个变量，这里传的是一个对象，并且这个对象还有继承关系。</p><h5 id="8-7-鸭子类型"><a href="#8-7-鸭子类型" class="headerlink" title="8.7 鸭子类型"></a>8.7 鸭子类型</h5>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 安装 CentOS 8.1 完整教程 </title>
      <link href="/vmware-an-zhuang-centos-8-1-wan-zheng-jiao-cheng.html"/>
      <url>/vmware-an-zhuang-centos-8-1-wan-zheng-jiao-cheng.html</url>
      
        <content type="html"><![CDATA[<p>我使用的<font color="red" size="3">VMware</font>版本：<font color="red" size="3">VMware 15 Pro</font></p><p>镜像：<font color="red" size="3">CentOS 8.1</font></p><p><strong>电脑配置需求：</strong></p><ul><li><font color="red" size="3">2 GB</font> 及以上的<font color="red" size="3">RAM</font>（官方推荐至少<font color="red" size="3">4G</font>）</li><li><font color="red" size="3">2 GHz </font>或以上的 <font color="red" size="3">CPU</font></li><li><font color="red" size="3">64 </font>位 <font color="red" size="3">x86</font> 架构</li><li><font color="red" size="3">20 GB </font>及以上硬盘空间</li></ul><p><strong>关于CentOS 8.1</strong></p><ul><li>基于Linux 4.18</li><li>提供 PHP 7.2、Python 3.6、Ansible 2.8、VIM 8.0 和 Squid 4</li><li>使用网络管理器（nmcli 和 nmtui）进行网络配置，移除了网络脚本<br>通过 BaseOS 和应用流(AppStream)仓库发布.</li><li>AppStream 是对传统rpm格式的全新扩展，为一个组件同时提供多个主要版本</li><li>YUM 包管理器基于 DNF 技术，提供模块化内容支持，增强了性能，并且提供了设计良好的API用于与其他工具集成</li><li>RHEL 8提供了版本控制工具: Git 2.18, Mercurial 4.8,和 Subversion 1.10.</li></ul><blockquote><p>内核实时修补；称为 FRR 的新路由协议堆栈（支持多种 IPv4 和 IPv6 路由协议）；伯克利数据包筛选器（eBPF）的扩展版本，可帮助系统管理员解决复杂的网络问题；支持在使用设备时对 LUKS2 中的块设备进行重新加密；此外，还提供了一种用于为容器生成 SELinux 策略的新工具 udica.</p></blockquote><p><font color="red" size="3">CentOS 8</font>系列增加了许多新特性，<font color="red" size="3">CentOS 8.1</font>相当于它的第二个发行版本，我这里就不列出了，具体可以看官方文档：</p><p><a href="https://wiki.centos.org/zh/Manuals/ReleaseNotes/CentOS8.1905#A.2BbpBO43gB-" target="_blank" rel="noopener">CentOS 官网文档手册</a></p><p><a href="https://www.cnblogs.com/RXDXB/p/11660287.html" target="_blank" rel="noopener">Centos8与Centos7区别参照redhat）</a></p><h1 id="一、准备过程"><a href="#一、准备过程" class="headerlink" title="一、准备过程"></a>一、准备过程</h1><p>目前比较流行的两款虚拟机软件 <font color="red" size="3">VMware</font> 、<font color="red" size="3">VirtualBox</font>，<font color="red" size="3">VirtualBox</font>安装<font color="red" size="3">CentOS 8</font>系列目前还有很多<font color="red" size="3">Bug</font>，推荐使用<font color="red" size="3">VMware</font>。</p><p>1.安装<font color="red" size="3">VMware</font></p><p>如果你还没有安装虚拟机，进入<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" title="VMware" target="_blank" rel="noopener">VMware官网</a>下载相应版本安装即可：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/01.png" alt></p><p>官网下载过程可能有点慢，这里安装过程我就不赘述了。</p><p>2.下载<font color="red" size="3">CentOS 8.1</font>镜像资源</p><p>进入<a href="http://mirrors.huaweicloud.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso" title="CentOS" target="_blank" rel="noopener">CentOS官网</a>下载<font color="red" size="3">CentOS 8.1</font>镜像，我这里给的是在华为云的，下载速度还是可以。</p><h1 id="二、创建虚拟机"><a href="#二、创建虚拟机" class="headerlink" title="二、创建虚拟机"></a>二、创建虚拟机</h1><p>1.打开<font color="red" size="3">VMware</font>，点击创建新的虚拟机：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/02.png" alt></p><p>2.点击自定义（高级）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/03.png" alt></p><p>3.这一步直接默认就可以：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/04.png" alt></p><p>4.选择稍后安装操作系统：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/05.png" alt></p><p>5.选择<font color="red" size="3">Linux</font>，版本选择<font color="red" size="3">Linux 4 ×64位</font>，因为<font color="red" size="3">CentOS 8</font>系列基于<font color="red" size="3"> Linux</font> 内核<font color="red" size="3"> 4.18</font>：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/06.png" alt></p><p>6.虚拟机名称随便，安装位置看自己电脑配置吧，建议安装在<font color="red" size="3">D</font>盘：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/07.png" alt></p><p>7.处理器数量根据自己电脑来配置，反正不够后面可以更改，要安装图形界面的话可以填大一点，新手就这个配置也可以了：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/08.png" alt></p><p>8.内存大小根据自己电脑适当配置，我的电脑内存<font color="red" size="3">16G</font>，所以我给它分配<font color="red" size="3">4G</font>，要安装图形界面的话可以填大一点：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/09.png" alt></p><p>9.设置虚拟机网络连接模式（<font color="red" size="3">NAT</font>）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/10.png" alt></p><p><strong>关于网络连接模式说明：</strong></p><ul><li><p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p></li><li><p>NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p></li><li><p>仅主机：虚拟机与宿主机直接连起来</p></li></ul><p>10.选择<font color="red" size="3">I/O</font>控制器类型，然后下一步：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/11.png" alt></p><p>11.选择磁盘类型：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/12.png" alt></p><p>12.选择创建新虚拟磁盘，然后下一步：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/13.png" alt></p><p>13.根据自己的需要分配磁盘容量，勾选将虚拟磁盘拆分成多个文件（方便以后将虚拟机拷贝到设备），然后下一步：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/14.png" alt></p><p>14.根据自己需要指定磁盘文件存储位置，我放在D盘：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/15.png" alt></p><p>15.到这里虚拟机就创建完成了，可以点击自定义硬件更改配置，点击完成创建成功：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/16.png" alt></p><h1 id="三、安装CentOS-8-1"><a href="#三、安装CentOS-8-1" class="headerlink" title="三、安装CentOS 8.1"></a>三、安装CentOS 8.1</h1><p>1.点击编辑虚拟机设置：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/17.png" alt></p><p>2.选择<font color="red" size="3">CD/DVD</font>，勾选启动时连接，再选择使用ISO映像文件，找到下载好的系统镜像文件添加进去，最后确定：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/18.png" alt></p><p>3.开启此虚拟机：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/19.png" alt></p><p>4.开启虚拟机后会出现以下界面，鼠标点进黑窗口，使用键盘方向键选择第一项，安装<font color="red" size="3">CentOS 8</font>，回车，系统开始自动安装</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/20.png" alt></p><p>5.安装完成后选择语言，根据自己情况选择，然后点击继续：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/21.png" alt></p><p>6.首先打开网络和主机名，给虚拟机连上网络：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/22.png" alt></p><p><strong>如果网络连接不上，多半是<font color="red" size="3">DHCP</font>问题，解决办法：</strong></p><p><a href="https://blog.csdn.net/suoyudong/article/details/83037670" target="_blank" rel="noopener">解决安装centos 过程中以太网连接不上网络，不能自动分配ip的问题</a> (By 索渝东)</p><p>7.点击时间和日期，设置系统时间并更改时区(打开网络时间)：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/23.png" alt></p><p>8.选择安装目的地：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/24.png" alt></p><p>9.选择自定义配置，点击完成：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/25.png" alt></p><p>10.添加磁盘分区</p><p><font color="red" size="3">Linux</font>的分区，并不像<font color="red" size="3">Windows</font>一样，分成<font color="red" size="3">C、D、E</font>等盘，介绍几个重要的分区：</p><ul><li>交换分区（swap）：交换分区和Windows的虚拟内存很像。现在内存也便宜，物理服务器的配置也高，以前的说法是一般为物理内存的2倍，现在一般情况下划分为4~8GB备用即可。我们虚拟机的内存是4GB，我们就划8GB吧。</li><li>启动分区（boot）：200MB足够了。</li><li>根分区（/）：剩余空间都给根分区吧。当然我们也可以单独划出/data分区，专门用来存储存数据，不过这里我们先不这样做，直接全部都给根分区。</li></ul><p>按照下图顺序依次进行设置：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/26.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/27.png" alt></p><p>11.点击完成后会弹出更改摘要页面，点击接受更改：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/28.png" alt></p><p>12.点击开始安装：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/29.png" alt></p><p>13.设置<font color="red" size="3">ROOT</font>密码：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/30.png" alt></p><p>14.点击创建用户，可以把用户设为管理员方便操作，如果密码简单就点击两次完成：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/31.png" alt></p><p>15.安装完成后点击重启电脑：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/32.png" alt></p><p>16.重启完成后点击<font color="red" size="3">LICENS INFORMATION</font>,勾选同意许可，然后点击完成：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/33.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/34.png" alt></p><p>17.点击结束配置：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/35.png" alt></p><p>18.来到登录界面，点击未列出，以<font color="red" size="3">root</font>登录，方便后面配置操作：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/36.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/37.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/38.png" alt></p><p>19.选择语言：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/39.png" alt></p><p>选择键盘布局：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/40.png" alt></p><p>是否打开位置服务：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/41.png" alt></p><p>然后按照需要添加账号，然后就可以进入啦：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/42.png" alt></p><p>20.关闭系统使用帮助后，来到我们的<font color="red" size="3">centos8.1</font>桌面，点击活动可以看到系统软件，第一个是内置浏览器，点击最下面可以看到系统所有软件：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/43.png" alt></p><p>21.点击右上角折叠按钮可以连接网络，打开浏览器就可以访问啦，如果不能联网，在上面已经给出解决办法：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/44.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/45.png" alt></p><p>22.右上角有关机按钮，点击就可以关机：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/46.png" alt></p><p>到这里，我们的<font color="red" size="3">CentOS 8 Linux</font> 就算安装完成了，其他<font color="red" size="3">CentOS 8 </font>系列发行版本安装过程类似，可作参考。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建个人博客超详细教程</title>
      <link href="/1.html"/>
      <url>/1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png" alt></p><p><font color="magenta" size="4"><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color="red" size="4"> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p></li><li><p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p></li><li><p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p></li></ul><p><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" title="为什么你应该（从现在开始就）写博客" target="_blank" rel="noopener">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p><p><a href="https://www.zhihu.com/question/19916345" title="为什么要自建博客？" target="_blank" rel="noopener">《为什么要自建博客？》</a>   (By 知乎)</p><p><a href="https://www.cnblogs.com/jhzhu/p/3893297.html" title="我为什么写博客" target="_blank" rel="noopener">《我为什么写博客》</a> （By 知明所以）</p><p>我们需要知道搭建博客要用到的框架。<font color="red" size="3">Hexo</font>是高效的静态站点生成框架，它基于<font color="red" size="3">Node.js</font>。我们使用<font color="red" size="3">MarkDown</font>在本地编辑我们的博客文章，通过<font color="red" size="3">Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><ul><li><strong>快速搭建</strong></li><li>安装<font color="red" size="3">Node.js</font></li><li>添加国内镜像</li><li>安装<font color="red" size="3">Git </font></li><li>注册<font color="red" size="3">Github</font>账号</li><li>创建<font color="red" size="3">Git</font>仓库</li><li>安装<font color="red" size="3">Hexo</font> </li><li>配置本地<font color="red" size="3">Hexo</font></li><li>连接<font color="red" size="3">Github</font>与本地 </li><li>写文章、发布文章 </li><li><font color="red" size="3">MarkDown</font>文章编辑器说明</li><li>配置个性化域名</li><li>更换自己喜欢的<font color="red" size="3">Hexo</font>主题</li><li>我的博客源代码</li><li>结语</li></ul><hr><h1 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h1><p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p><p>在这里以我的博客为例。</p><h2 id="一、下载博客源代码"><a href="#一、下载博客源代码" class="headerlink" title="一、下载博客源代码"></a>一、下载博客源代码</h2><p>大家可以直接素质二连，<font color="red" size="3">Star&amp;Fork</font>我的博客源代码：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png" alt></p><p><strong>第一种</strong>：直接<font color="red" size="3">DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p><p><strong>第二种</strong>：如果你已经安装了<a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">Git</a>，就可以右键单击<font color="red" size="3">Come Bash Here</font>运行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:MUYIio/hexo-themes-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将所有文件下载到本地，这个复杂一点。</p><h2 id="二、修改博客文档配置"><a href="#二、修改博客文档配置" class="headerlink" title="二、修改博客文档配置"></a>二、修改博客文档配置</h2><p>首先将我们下载的博客源代码解压，然后修改主要配置：</p><ul><li>根目录配置文件<font color="red" size="3">_config.yml</font>和主题目录配置文件<font color="red" size="3">_config.yml</font>中修改个人信息。</li><li>根目录配置文件中修改<font color="red" size="3">deploy</font>一栏的<font color="red" size="3">repository</font>。</li><li>根目录配置文件中修改<font color="red" size="3">baidu_url_submit</font>一栏的<font color="red" size="3">token</font>。</li><li>主题配置文件中修改<font color="red" size="3">gitalk</font>一栏，修改方法见正文。</li></ul><p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p><p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p><p><strong>本地环境搭建好之后会生成的文件：</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png" alt></p><p>然后直接把<font color="red" size="3">Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png" alt></p><p>然后在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>点击输入以下命令上传就可以了：</p><pre><code>hexo cleanhexo ghexo d</code></pre><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>了解一下什么是<font color="red" size="3">Node.js</font>：</p><blockquote><p><font color="red" size="3">Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p></blockquote><p>需要用到的命令：</p><pre><code>$ git --version$ node -v$ npm -v</code></pre><p><a href="https://nodejs.org/en/download/" title="Node.js" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color="red" size="3">Next</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png" alt></p><p>检验是否安装成功：<br>按<font color="red" size="3">Win+R</font>打开命令提示符，输入<font color="red" size="3">node -v</font>和<font color="red" size="3">npm -v</font>，如果出现版本号，那么就安装成功了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png" alt></p><h1 id="添加国内镜像"><a href="#添加国内镜像" class="headerlink" title="添加国内镜像"></a>添加国内镜像</h1><p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><blockquote><p><font color="red" size="3">Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color="red" size="3">Github</font>。</p></blockquote><p><a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png" alt></p><p>参考资料：<a href="https://www.cnblogs.com/jytx/p/5602927.html" title="如何在windows下安装GIT" target="_blank" rel="noopener">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p><p>检验是否安装成功：</p><p>安装完成后在命令提示符中输入<font color="red" size="3">git –version</font>验证是否安装成功</p><pre><code>git --version</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png" alt></p><h1 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h1><p><font color="red" size="3">Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href="https://github.com/" title="Github" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Github</font>官网点击 <font color="red" size="3">Sign Up </font>注册账户。</p><h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><p>登录<font color="red" size="3">Github</font>创建一个仓库</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png" alt></p><p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color="red" size="3">.github.io</font>后缀，<font color="red" size="3">README</font>初始化也要勾上。名称一定要和你的<font color="red" size="3">Github</font>名字完全一样，比如你<font color="red" size="3">github</font>名字叫<font color="red" size="3">A</font>，那么仓库名字一定要是<font color="red" size="3">A.github.io</font>。</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png" alt></p><p>选择一个自己喜欢的主题：<br>在上面创建的仓库里面点击<font color="red" size="3">Settings</font>（不是头像下面那个<font color="red" size="3">Settings</font>），向下拉到最后有个<font color="red" size="3">GitHub Pages</font>，点击<font color="red" size="3">Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color="red" size="3">GitHub Pages</font>，就可以预览效果啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png" alt></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote><p><font color="red" size="3">Hexo</font>是一款基于<font color="red" size="3">Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color="red" size="3">GitHub</font>和<font color="red" size="3">Heroku</font>上，是搭建博客的首选框架。</p></blockquote><p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color="red" size="3">（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，输入以下<font color="red" size="3"> npm </font>命令即可安装</p><pre><code>$ npm install hexo-cli -g</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png" alt></p><p>输入<font color="red" size="3">hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p><h1 id="配置本地hexo"><a href="#配置本地hexo" class="headerlink" title="配置本地hexo"></a>配置本地hexo</h1><p>还是在刚才新建的文件夹下再新建一个<font color="red" size="3">Hexo</font>文件夹，比如我的<font color="red" size="3">（C/panakot Blog/Hexo）</font>，在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，依次输入以下<font color="red" size="3"> npm </font>命令即可初始化。</p><pre><code>hexo initnpm install</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png" alt></p><p>初始化成功生成的文件：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png" alt></p><p>接着我们输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p><p>显示以下信息说明操作正确：</p><p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png" alt></p><p>按<font color="red" size="3">ctrl+c</font>关闭本地服务器。</p><p><strong>我们以后常用到的<font color="red" size="3">Hexo</font>命令：</strong></p><ul><li><p><font color="red" size="3">hexo s</font>等价于 <font color="red" size="3">hexo server</font>  #<font color="red" size="3">Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><font color="red" size="3">hexo g</font> 等价于 <font color="red" size="3">hexo generate</font>  #生成静态网页 (执行 $ <font color="red" size="3">hexo g</font>后会在站点根目录下生成<font color="red" size="3">public</font>文件夹,<font color="red" size="3"> hexo</font>会将”<font color="red" size="3">/blog/source/</font>“ 下面的<font color="red" size="3">.md</font>后缀的文件编译为<font color="red" size="3">.html</font>后缀的文件,存放在”<font color="red" size="3">/blog/public/ </font>“ 路径下)</p></li><li><p><font color="red" size="3">hexo d </font>等价于 <font color="red" size="3">hexo deploy</font>  #将本地数据部署到远端服务器(如<font color="red" size="3">github</font>)</p></li><li><p><font color="red" size="3">hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color="red" size="3">public</font>文件夹</p></li></ul><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><h2 id="一、生成密钥"><a href="#一、生成密钥" class="headerlink" title="一、生成密钥"></a>一、生成密钥</h2><p>右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>输入以下命令：</p><pre><code>git config --global user.name &quot;Name&quot;git config --global user.email &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Name</font>和<font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的用户名和邮箱。</strong></p><p>然后生成密钥：</p><pre><code>ssh-keygen -t rsa -C &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的邮箱</strong></p><p>然后会出现：</p><pre><code>Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>回车之后：</p><pre><code>Enter passphrase (empty for no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again:</code></pre><p>接下来会有：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:这里是各种字母数字组成的字符串，结尾是你的邮箱The key&#39;s randomart image is:这里也是各种字母数字符号组成的字符串</code></pre><p>现在密钥已经生成，一般存放在<font color="red" size="3">（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p><pre><code> clip &lt; ~/.ssh/id_rsa.pub</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png" alt></p><h2 id="二、连接Github"><a href="#二、连接Github" class="headerlink" title="二、连接Github"></a>二、连接Github</h2><p>在<font color="red" size="3">Github</font>头像下面点击<font color="red" size="3">Settings</font>，再点击<font color="red" size="3">SSH and GPG keys</font>，新建一个<font color="red" size="3">SSH</font>，名字任意。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png" alt></p><p>然后将刚才复制的密钥添加就可以了，像这样：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png" alt></p><p><strong>本地连接Github</strong></p><p>右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p><pre><code>ssh -T git@github.com//注意不要做任何修改</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png" alt></p><p>用记事本打开博客根目录下的<font color="red" size="3">_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color="red" size="3">Github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png" alt></p><p>修改最后一行的配置：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>改为：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository: git@github.com:panakot/panakot.github.io.git  branch: master</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png" alt></p><p>切记：</p><ul><li><strong><font color="red" size="3">repository</font>修改为你自己的<font color="red" size="3">github</font>项目地址</strong>。</li><li><strong>每一个冒号后面都有一个空格。</strong></li></ul><h1 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入以下命令，安装一个扩展.</p><pre><code>npm i hexo-deployer-git</code></pre><p>然后输入下面的命令，新建一篇文章。</p><pre><code>hexo new post &quot;article title&quot;</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png" alt></p><p>然后打开<font color="red" size="3">C:\panakot Blog\Hexo\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color="red" size="3">.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png" alt></p><p>编写完<font color="red" size="3">markdown</font>文件后，根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>可以本地预览效果，最后输入<font color="red" size="3">hexo d</font>上传到<font color="red" size="3">github</font>上。</p><p>你的博客地址：<font color="red" size="3">https://你的用户名.github.io</font>，比如我的是：<a href="https://muyiio.github.io" target="_blank" rel="noopener">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p><h1 id="MarkDown文章编辑器说明"><a href="#MarkDown文章编辑器说明" class="headerlink" title="MarkDown文章编辑器说明"></a>MarkDown文章编辑器说明</h1><blockquote><p>前面我们提到了使用<font color="red" size="3">MarkDown</font>编辑我们的博客文章。<font color="red" size="3"> Markdown</font> 是<font color="red" size="3"> 2004</font> 年由 <font color="red" size="3">John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color="red" size="3"> .md </font>文件可以使用支持 <font color="red" size="3">Markdown </font>语法的编辑器编辑，然后将写好的文章<font color="red" size="3">（.md文件）</font>保存到<font color="red" size="3"> \Hexo\source_posts </font>文件夹下即可。</p></blockquote><p> <font color="red" size="3">Windows </font>上推荐使用 <font color="red" size="3">MarkdownPad2 </font>或者<font color="red" size="3">小书匠</font>编辑器，<font color="red" size="3">macOS </font>上使用<font color="red" size="3"> Mou</font> 编辑器，<font color="red" size="3">Linux </font>上使用 <font color="red" size="3">Remarkable</font> 编辑器，<font color="red" size="3">Web </font>端上使用 简书。</p><p><strong><a href="http://markdownpad.com/download.html" title="MarkDown" target="_blank" rel="noopener">点击此处</a>下载<font color="red" size="3">MarkDown</font><br>，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p><p><a href="https://www.jianshu.com/p/q81RER/" title="献给写作者的 Markdown 新手指南" target="_blank" rel="noopener">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p><p><a href="https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app" title="Markdown语法图文全面详解" target="_blank" rel="noopener">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p><p><a href="https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app" title="Markdown 语法手册 （完整整理版）" target="_blank" rel="noopener">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p><p><a href="https://sspai.com/post/25137" title="认识与入门 Markdown" target="_blank" rel="noopener">《认识与入门 Markdown》</a>（By Te_Lee）</p><p>写完文章记得在博客根目录<font color="red" size="3">Bash Here</font>输入<font color="red" size="3">hexo g</font>和<font color="red" size="3">hexo d</font>上传到网站。</p><h1 id="配置个性化域名"><a href="#配置个性化域名" class="headerlink" title="配置个性化域名"></a>配置个性化域名</h1><p>一顿操作下来，打开我们的博客还是：<font color="red" size="3"><a href="http://www.xxx.github.io" target="_blank" rel="noopener">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color="red" size="3"><a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> </font>。</p><p><a href="https://www.aliyun.com/" title="阿里云" target="_blank" rel="noopener">阿里云</a>和<a href="https://cloud.tencent.com/" title="腾讯云" target="_blank" rel="noopener">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png" alt></p><p><strong>方法一：</strong>点击添加记录，需要添加两个记录，两个记录类型都是 <font color="red" size="3">CNAME </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color="red" size="3">muyiio.github.io</font>），保存之后域名解析就完成了！</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png" alt></p><p><strong>方法二：</strong>两个记录类型为<font color="red" size="3"> A </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都为博客的<font color="red" size="3"> IP</font> 地址，<font color="red" size="3">IP </font>地址可以<font color="red" size="3"> cmd</font> 中输入<font color="red" size="3"> ping</font> 你的博客地址 获得（比如我的：<font color="red" size="3">ping muyiio.github.io</font>），保存之后域名解析就完成了！</p><p>参考资料：</p><p><a href="https://blog.csdn.net/it_man/article/details/9017307" title="域名解析中A记录、CNAME、MX记录、NS记录的区别和联系" target="_blank" rel="noopener">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png" alt></p><p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p><blockquote><p>如果你填写的是没有<font color="red" size="3">www</font>的，比如 <font color="red" size="3">muyio.com</font>，那么无论是访问<font color="red" size="3"> <a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a> </font>还是<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font> ，都会自动跳转到<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font>。</p></blockquote><blockquote><p>如果你填写的是带<font color="red" size="3">www</font>的，比如 <font color="red" size="3"><a href="http://www.muyiio.com" target="_blank" rel="noopener">www.muyiio.com</a> </font>，那么无论是访问 <font color="red" size="3"><a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a></font> 还是 <font color="red" size="3"><a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a> </font>，都会自动跳转到 <font color="red" size="3"><a href="http://www.imuyiio.com" target="_blank" rel="noopener">http://www.imuyiio.com</a></font>。</p></blockquote><p>然后打开你的<font color="red" size="3">github</font>博客项目，点击settings，拉到下面<font color="red" size="3">Custom domain</font>处，填上你自己的域名，保存就可以了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png" alt></p><p>现在我们的项目根目录应该会出现一个名为<font color="red" size="3">CNAME</font>的文件了。如果没有的话，打开你本地博客<font color="red" size="3">/source</font>目录，我的是<font color="red" size="3">C:\Blog\Hexo\source</font>，新建<font color="red" size="3">CNAME</font>文件，<font color="red" size="3">（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color="red" size="3">hexo g、hexo d</font>上传到<font color="red" size="3">github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png" alt></p><p>现在就可以通过我们的个性化域名：<font color="red" size="3"><a href="http://www.xxx.com、xxx.com" target="_blank" rel="noopener">www.xxx.com、xxx.com</a></font>访问自己的博客了。</p><h1 id="更换自己喜欢的Hexo主题"><a href="#更换自己喜欢的Hexo主题" class="headerlink" title="更换自己喜欢的Hexo主题"></a>更换自己喜欢的Hexo主题</h1><p>点击进入<a href="https://hexo.io/themes/" title="Hexo主题专栏" target="_blank" rel="noopener">Hexo主题专栏</a>可以看到很多<font color="red" size="3">Hexo</font>主题：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png" alt></p><p>推荐：</p><p><a href="https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app" title="几个好用的hexo主题" target="_blank" rel="noopener">几个好用的hexo主题</a> (By fail_perfectly)</p><p>这里我们以<a href="http://huangxuan.me/" title="Bean Tech" target="_blank" rel="noopener">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color="red" size="3">GitHub</font>（<font color="red" size="3">有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png" alt></p><p>点击进入主题的<font color="red" size="3">GitHub</font>地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png" alt></p><p>复制该项目地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png" alt></p><p>然后打开<font color="red" size="3"> Hexo </font>文件夹下的<font color="red" size="3"> themes</font> 目录（如：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes</font>），右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>$ git clone 此处填写你刚才复制的主题地址</code></pre><p>以我们刚才复制的为例：</p><pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io</code></pre><p>下载完成后即可在<font color="red" size="3"> themes </font>目录下生成 <font color="red" size="3">hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color="red" size="3">Hexo</font> 文件夹下的配置文件 <font color="red" size="3">_config.yml </font>，找到关键字 <font color="red" size="3">theme</font>，修改参数为：<font color="red" size="3">theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png" alt></p><p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color="red" size="3">_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo_config.yml</font>），主要包含<font color="red" size="3"> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color="red" size="3"> _config.yml </font>文件里都有相关注释，按需修改即可。</p><h1 id="我的博客源代码"><a href="#我的博客源代码" class="headerlink" title="我的博客源代码"></a>我的博客源代码</h1><p><strong>我的博客源代码地址：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color="red" size="3">Star&amp;Fork</font>。</strong></p><p>下载源代码：git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:MUYIio/hexo-themes-matery.git</p><p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color="red" size="3">Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p><p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p><table><tr><td bgcolor="orange">-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            </td></tr></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p><p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
